import streamlit as st
import pandas as pd
from database import Database
from auth import init_auth, check_auth, check_role, can_manage_data, check_page_access
from utils import show_success, show_error, apply_theme
from datetime import datetime, timedelta
import os
import sqlite3
import io
import re
import time
from translations import get_text
import atexit

# Initialize backup system
try:
    from gdrive_backup import GoogleDriveBackup
    BACKUP_AVAILABLE = True
    
except ImportError as e:
    BACKUP_AVAILABLE = False

def parse_date(date_str):
    """Try multiple date formats and return standardized date string"""
    # Handle None, nan, or empty strings
    if date_str is None:
        return None
        
    # Convert to string for consistent handling
    date_str_lower = str(date_str).lower().strip()
    
    # More comprehensive check for invalid date values
    if (pd.isna(date_str) or 
        date_str_lower == "" or 
        date_str_lower in ['nan', 'none', 'null', 'na', 'n/a', 'kh√¥ng r√µ', 'x', '?', '-', '--']):
        return None
        
    # Handle NaT value from pandas
    if hasattr(date_str, 'dtype') and pd.isna(date_str):
        return None
        
    # Special case for Excel "nan" representation
    if date_str_lower == "nan":
        return None

    # Already a datetime object
    if isinstance(date_str, datetime):
        return date_str.strftime('%Y-%m-%d')
    
    # Try to parse various date formats
    date_formats = [
        '%d/%m/%Y',     # 25/12/2023
        '%m/%d/%Y',     # 12/25/2023  
        '%Y-%m-%d',     # 2023-12-25
        '%d-%m-%Y',     # 25-12-2023
        '%m-%d-%Y',     # 12-25-2023
        '%d/%m/%y',     # 25/12/23
        '%m/%d/%y',     # 12/25/23
        '%y-%m-%d',     # 23-12-25
        '%d-%m-%y',     # 25-12-23
        '%m-%d-%y',     # 12-25-23
        '%d.%m.%Y',     # 25.12.2023
        '%m.%d.%Y',     # 12.25.2023
        '%d %m %Y',     # 25 12 2023
        '%m %d %Y',     # 12 25 2023
        '%d %B %Y',     # 25 December 2023
        '%B %d, %Y',    # December 25, 2023
        '%d %b %Y',     # 25 Dec 2023
        '%b %d, %Y',    # Dec 25, 2023
    ]
    
    for fmt in date_formats:
        try:
            # Parse the date
            parsed_date = datetime.strptime(str(date_str).strip(), fmt)
            
            # Basic validation - reject obviously wrong dates
            current_year = datetime.now().year
            if parsed_date.year < 1900 or parsed_date.year > current_year + 10:
                continue
                
            # Return standardized format
            return parsed_date.strftime('%Y-%m-%d')
        except ValueError:
            continue
    
    # If no format worked, try to handle numbers (timestamps)
    try:
        # Check if it might be a timestamp or Excel serial number
        num_date = float(date_str)
        
        # Excel date serial number (days since 1900-01-01)
        if 1 <= num_date <= 100000:  # Reasonable range for Excel dates
            # Excel has a bug where it thinks 1900 is a leap year
            if num_date > 59:
                num_date -= 1
            excel_epoch = datetime(1900, 1, 1)
            parsed_date = excel_epoch + timedelta(days=num_date - 1)
            return parsed_date.strftime('%Y-%m-%d')
            
        # Unix timestamp (seconds since 1970-01-01)
        elif 0 <= num_date <= 2147483647:  # Valid Unix timestamp range
            parsed_date = datetime.fromtimestamp(num_date)
            return parsed_date.strftime('%Y-%m-%d')
            
    except (ValueError, OverflowError):
        pass
    
    # If all parsing attempts failed, raise an informative error
    raise ValueError(f"Cannot parse date '{date_str}'. Supported formats: DD/MM/YYYY, MM/DD/YYYY, YYYY-MM-DD, etc.")

def database_management_section():
    """Backup and restore management section with local options only"""
    
    # Local backup section
    st.subheader("üíæ Sao l∆∞u c·ª•c b·ªô")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì¶ T·∫°o b·∫£n sao l∆∞u c·ª•c b·ªô", use_container_width=True):
            with st.spinner("ƒêang t·∫°o b·∫£n sao l∆∞u..."):
                try:
                    from local_backup import LocalBackup
                    backup_service = LocalBackup()
                    
                    # Create backup
                    backup_path = backup_service.create_database_backup()
                    
                    if backup_path:
                        st.success("‚úÖ Sao l∆∞u c·ª•c b·ªô th√†nh c√¥ng!")
                        st.info(f"üìÇ V·ªã tr√≠: {backup_path}")
                        
                        # Show download option
                        with open(backup_path, 'rb') as f:
                            backup_data = f.read()
                            st.download_button(
                                label="‚¨áÔ∏è T·∫£i xu·ªëng backup",
                                data=backup_data,
                                file_name=os.path.basename(backup_path),
                                mime="application/zip"
                            )
                    else:
                        st.error("‚ùå Sao l∆∞u th·∫•t b·∫°i!")
                        
                except Exception as e:
                    st.error(f"‚ùå L·ªói sao l∆∞u: {str(e)}")
    
    with col2:
        st.write("**üìã Th√¥ng tin sao l∆∞u:**")
        try:
            from local_backup import LocalBackup
            backup_service = LocalBackup()
            backups = backup_service.get_backup_info()
            
            if backups:
                st.write(f"üóÇÔ∏è C√≥ {len(backups)} b·∫£n sao l∆∞u")
                for backup in backups[-3:]:  # Show last 3 backups
                    st.write(f"‚Ä¢ {backup['filename']} ({backup['size']})")
            else:
                st.write("üì≠ Ch∆∞a c√≥ b·∫£n sao l∆∞u n√†o")
                
        except Exception as e:
            st.write("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra th√¥ng tin backup")
    
    # Restore Section
    st.subheader("üîÑ Kh√¥i ph·ª•c d·ªØ li·ªáu")
    
    # Upload and restore backup
    uploaded_file = st.file_uploader(
        "Ch·ªçn file backup ƒë·ªÉ kh√¥i ph·ª•c",
        type=['zip', 'db'],
        help="Ch·ªçn file backup (.zip ho·∫∑c .db) ƒë·ªÉ kh√¥i ph·ª•c d·ªØ li·ªáu"
    )
    
    if uploaded_file:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.info(f"üìÅ File ƒë√£ ch·ªçn: {uploaded_file.name}")
            st.info(f"üìä K√≠ch th∆∞·ªõc: {uploaded_file.size / 1024 / 1024:.2f} MB")
        
        with col2:
            if st.button("üîÑ Kh√¥i ph·ª•c", type="primary"):
                with st.spinner("ƒêang kh√¥i ph·ª•c d·ªØ li·ªáu..."):
                    try:
                        # Save uploaded file temporarily
                        temp_path = f"temp_restore_{uploaded_file.name}"
                        with open(temp_path, 'wb') as f:
                            f.write(uploaded_file.getvalue())
                        
                        # Restore from backup
                        from local_backup import LocalBackup
                        backup_service = LocalBackup()
                        
                        success = backup_service.restore_backup(temp_path)
                        
                        # Clean up temp file
                        os.remove(temp_path)
                        
                        if success:
                            st.success("‚úÖ Kh√¥i ph·ª•c th√†nh c√¥ng!")
                            st.success("üîÑ Vui l√≤ng t·∫£i l·∫°i trang ƒë·ªÉ th·∫•y d·ªØ li·ªáu m·ªõi")
                            st.balloons()
                            time.sleep(2)
                            st.rerun()
                        else:
                            st.error("‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i!")
                            
                    except Exception as e:
                        st.error(f"‚ùå L·ªói kh√¥i ph·ª•c: {str(e)}")
                        # Clean up temp file if it exists
                        if 'temp_path' in locals() and os.path.exists(temp_path):
                            os.remove(temp_path)
    
    # Information section
    st.subheader("‚ÑπÔ∏è Th√¥ng tin h·ªá th·ªëng sao l∆∞u")
    st.info("""
    **H·ªá th·ªëng sao l∆∞u c·ª•c b·ªô:**
    ‚Ä¢ T·ª± ƒë·ªông sao l∆∞u h√†ng ng√†y l√∫c 2:00 AM
    ‚Ä¢ T·∫°o file backup n√©n (.zip) v·ªõi metadata
    ‚Ä¢ T·ª± ƒë·ªông d·ªçn d·∫πp c√°c backup c≈© (gi·ªØ t·ªëi ƒëa 10 b·∫£n)
    ‚Ä¢ H·ªó tr·ª£ kh√¥i ph·ª•c t·ª´ file backup
    ‚Ä¢ Backup bao g·ªìm to√†n b·ªô d·ªØ li·ªáu h·ªá th·ªëng
    """)

def user_management_section():
    """User management interface for admin users"""
    # ... (keeping the existing user management code)
    pass

# ... (other function definitions would go here)

def render():
    """Main render function"""
    init_auth()
    
    # Apply theme from session state
    # apply_theme()  # Disabled - using Streamlit defaults

    # Set current page for role checking
    st.session_state.current_page = "01_Qu·∫£n_l√Ω_H·ªá_th·ªëng"

    check_auth()
    
    # Restrict page to administrators only
    user_role = getattr(st.session_state, 'user_role', None)
    if user_role not in ['admin', 'administrative']:
        st.error("üö´ Ch·ªâ c√≥ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ truy c·∫≠p trang n√†y.")
        st.info("Trang n√†y ch·ª©a c√°c ch·ª©c nƒÉng qu·∫£n l√Ω h·ªá th·ªëng nh·∫°y c·∫£m v√† ch·ªâ d√†nh cho ng∆∞·ªùi qu·∫£n tr·ªã.")
        st.stop()
    
    # Check if user has access to this page dynamically  
    if not check_page_access('01_Qu·∫£n_l√Ω_H·ªá_th·ªëng'):
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.")
        st.stop()
        return

    st.title("‚öôÔ∏è H·ªá th·ªëng qu·∫£n l√Ω d·ªØ li·ªáu L√†ng H·ªØu Ngh·ªã")

    # Create tabs for different management sections - reordered per user request
    tabs = st.tabs([
        "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
        "üìä Qu·∫£n l√Ω d·ªØ li·ªáu Spreadsheet",
        f"üì• {get_text('pages.system.import_data', 'Nh·∫≠p D·ªØ Li·ªáu t·ª´ Excel')}", 
        f"üíæ {get_text('pages.system.backup_restore', 'Sao l∆∞u & Kh√¥i ph·ª•c')}"
    ])

    with tabs[0]:
        # User management section (merged from admin page)
        user_management_section()

    with tabs[1]:
        # Spreadsheet data management
        st.info("Ch·ª©c nƒÉng qu·∫£n l√Ω d·ªØ li·ªáu spreadsheet")

    with tabs[2]:
        # Excel data import
        st.info("Ch·ª©c nƒÉng nh·∫≠p d·ªØ li·ªáu t·ª´ Excel")

    with tabs[3]:
        # Backup and restore
        database_management_section()
        
    st.info("""
    ### üîÑ Ph√¢n chia ch·ª©c nƒÉng
    - **Nh·∫≠p d·ªØ li·ªáu t·ª´ Excel** (Trang hi·ªán t·∫°i): Nh·∫≠p d·ªØ li·ªáu h·ªçc sinh t·ª´ file Excel v·ªõi x·ª≠ l√Ω ƒë·∫∑c bi·ªát (chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y th√°ng, l√†m s·∫°ch d·ªØ li·ªáu...)
    - **Qu·∫£n l√Ω D·ªØ li·ªáu** (Trang qu·∫£n l√Ω Database): Xem, ch·ªânh s·ª≠a v√† xu·∫•t/nh·∫≠p d·ªØ li·ªáu tr·ª±c ti·∫øp v·ªõi t·ª´ng b·∫£ng
    - **Sao l∆∞u & Kh√¥i ph·ª•c** (Trang hi·ªán t·∫°i): T·∫°o v√† kh√¥i ph·ª•c c√°c b·∫£n sao l∆∞u c·ªßa to√†n b·ªô c∆° s·ªü d·ªØ li·ªáu
    """)

if __name__ == "__main__":
    render()