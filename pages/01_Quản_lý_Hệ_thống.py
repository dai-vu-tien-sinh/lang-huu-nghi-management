import streamlit as st
import pandas as pd
from database import Database
from auth import init_auth, check_auth, check_role, can_manage_data, check_page_access
from utils import show_success, show_error, apply_theme
from datetime import datetime, timedelta
import os
import sqlite3
import io
import re
import time
from translations import get_text
import atexit

# Initialize backup system
try:
    from gdrive_backup import GoogleDriveBackup
    BACKUP_AVAILABLE = True
    
except ImportError as e:
    BACKUP_AVAILABLE = False

def parse_date_advanced(date_str, format_hint="Auto-detect"):
    """Advanced date parsing with multiple format support and auto-detection"""
    if not date_str or pd.isna(date_str):
        return None
        
    # Convert to string for consistent handling
    date_str_clean = str(date_str).strip()
    
    # Handle empty or invalid values
    if not date_str_clean or date_str_clean.lower() in ['nan', 'none', 'null', 'na', 'n/a', 'kh√¥ng r√µ', 'x', '?', '-', '--']:
        return None
    
    # Define date formats to try
    date_formats = []
    
    if format_hint == "Auto-detect":
        # Auto-detect based on common patterns
        date_formats = [
            '%d/%m/%Y', '%d-%m-%Y', '%Y-%m-%d', '%m/%d/%Y',
            '%d/%m/%y', '%d-%m-%y', '%Y/%m/%d', '%m-%d-%Y',
            '%d.%m.%Y', '%d.%m.%y', '%Y.%m.%d',
            '%d %m %Y', '%d %m %y', '%Y %m %d'
        ]
    else:
        # Use specific format hint
        format_map = {
            "dd/mm/yyyy": ['%d/%m/%Y'],
            "dd-mm-yyyy": ['%d-%m-%Y'],
            "yyyy-mm-dd": ['%Y-%m-%d'],
            "mm/dd/yyyy": ['%m/%d/%Y'],
            "dd/mm/yy": ['%d/%m/%y'],
            "dd-mm-yy": ['%d-%m-%y'],
            "yyyy/mm/dd": ['%Y/%m/%d']
        }
        date_formats = format_map.get(format_hint, ['%d/%m/%Y'])
    
    # Try parsing with pandas first (handles Excel dates)
    try:
        parsed_date = pd.to_datetime(date_str_clean, dayfirst=True)
        return parsed_date.strftime('%Y-%m-%d')
    except:
        pass
    
    # Try parsing with specified formats
    from datetime import datetime
    for fmt in date_formats:
        try:
            parsed_date = datetime.strptime(date_str_clean, fmt)
            return parsed_date.strftime('%Y-%m-%d')
        except ValueError:
            continue
    
    # Try parsing numeric Excel serial dates
    try:
        if date_str_clean.replace('.', '').isdigit():
            excel_date = float(date_str_clean)
            if 1 <= excel_date <= 100000:  # Reasonable range for Excel dates
                from datetime import datetime, timedelta
                # Excel epoch starts from 1900-01-01, but with 1900 leap year bug
                excel_epoch = datetime(1899, 12, 30)
                parsed_date = excel_epoch + timedelta(days=excel_date)
                return parsed_date.strftime('%Y-%m-%d')
    except:
        pass
    
    return None

def parse_date(date_str):
    """Try multiple date formats and return standardized date string"""
    # Handle None, nan, or empty strings
    if date_str is None:
        return None
        
    # Convert to string for consistent handling
    date_str_lower = str(date_str).lower().strip()
    
    # More comprehensive check for invalid date values
    if (pd.isna(date_str) or 
        date_str_lower == "" or 
        date_str_lower in ['nan', 'none', 'null', 'na', 'n/a', 'kh√¥ng r√µ', 'x', '?', '-', '--']):
        return None
        
    # Handle NaT value from pandas
    if hasattr(date_str, 'dtype') and pd.isna(date_str):
        return None
        
    # Special case for Excel "nan" representation
    if date_str_lower == "nan":
        return None

    # Already a datetime object
    if isinstance(date_str, datetime):
        return date_str.strftime('%Y-%m-%d')
    
    # Try to parse various date formats
    date_formats = [
        '%d/%m/%Y',     # 25/12/2023
        '%m/%d/%Y',     # 12/25/2023  
        '%Y-%m-%d',     # 2023-12-25
        '%d-%m-%Y',     # 25-12-2023
        '%m-%d-%Y',     # 12-25-2023
        '%d/%m/%y',     # 25/12/23
        '%m/%d/%y',     # 12/25/23
        '%y-%m-%d',     # 23-12-25
        '%d-%m-%y',     # 25-12-23
        '%m-%d-%y',     # 12-25-23
        '%d.%m.%Y',     # 25.12.2023
        '%m.%d.%Y',     # 12.25.2023
        '%d %m %Y',     # 25 12 2023
        '%m %d %Y',     # 12 25 2023
        '%d %B %Y',     # 25 December 2023
        '%B %d, %Y',    # December 25, 2023
        '%d %b %Y',     # 25 Dec 2023
        '%b %d, %Y',    # Dec 25, 2023
    ]
    
    for fmt in date_formats:
        try:
            # Parse the date
            parsed_date = datetime.strptime(str(date_str).strip(), fmt)
            
            # Basic validation - reject obviously wrong dates
            current_year = datetime.now().year
            if parsed_date.year < 1900 or parsed_date.year > current_year + 10:
                continue
                
            # Return standardized format
            return parsed_date.strftime('%Y-%m-%d')
        except ValueError:
            continue
    
    # If no format worked, try to handle numbers (timestamps)
    try:
        # Check if it might be a timestamp or Excel serial number
        num_date = float(date_str)
        
        # Excel date serial number (days since 1900-01-01)
        if 1 <= num_date <= 100000:  # Reasonable range for Excel dates
            # Excel has a bug where it thinks 1900 is a leap year
            if num_date > 59:
                num_date -= 1
            excel_epoch = datetime(1900, 1, 1)
            parsed_date = excel_epoch + timedelta(days=num_date - 1)
            return parsed_date.strftime('%Y-%m-%d')
            
        # Unix timestamp (seconds since 1970-01-01)
        elif 0 <= num_date <= 2147483647:  # Valid Unix timestamp range
            parsed_date = datetime.fromtimestamp(num_date)
            return parsed_date.strftime('%Y-%m-%d')
            
    except (ValueError, OverflowError):
        pass
    
    # If all parsing attempts failed, raise an informative error
    raise ValueError(f"Cannot parse date '{date_str}'. Supported formats: DD/MM/YYYY, MM/DD/YYYY, YYYY-MM-DD, etc.")

def database_management_section():
    """Backup and restore management section with local options only"""
    
    # Local backup section
    st.subheader("üíæ Sao l∆∞u c·ª•c b·ªô")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì¶ T·∫°o b·∫£n sao l∆∞u c·ª•c b·ªô", use_container_width=True):
            with st.spinner("ƒêang t·∫°o b·∫£n sao l∆∞u..."):
                try:
                    from local_backup import LocalBackup
                    backup_service = LocalBackup()
                    
                    # Create backup
                    backup_path = backup_service.create_database_backup()
                    
                    if backup_path:
                        st.success("‚úÖ Sao l∆∞u c·ª•c b·ªô th√†nh c√¥ng!")
                        st.info(f"üìÇ V·ªã tr√≠: {backup_path}")
                        
                        # Show download option
                        with open(backup_path, 'rb') as f:
                            backup_data = f.read()
                            st.download_button(
                                label="‚¨áÔ∏è T·∫£i xu·ªëng backup",
                                data=backup_data,
                                file_name=os.path.basename(backup_path),
                                mime="application/zip"
                            )
                    else:
                        st.error("‚ùå Sao l∆∞u th·∫•t b·∫°i!")
                        
                except Exception as e:
                    st.error(f"‚ùå L·ªói sao l∆∞u: {str(e)}")
    
    with col2:
        st.write("**üìã Th√¥ng tin sao l∆∞u:**")
        try:
            from local_backup import LocalBackup
            backup_service = LocalBackup()
            backups = backup_service.get_backup_info()
            
            if backups:
                st.write(f"üóÇÔ∏è C√≥ {len(backups)} b·∫£n sao l∆∞u")
                for i, backup in enumerate(backups[:3]):  # Show first 3 backups (most recent)
                    col_date, col_restore = st.columns([3, 1])
                    
                    with col_date:
                        st.write(f"‚Ä¢ {backup['created']} ({backup['size']})")
                    
                    with col_restore:
                        if st.button("üîÑ", key=f"restore_{i}", help="Kh√¥i ph·ª•c backup n√†y"):
                            # Store backup info in session state for confirmation
                            st.session_state.restore_backup_path = backup['path']
                            st.session_state.restore_backup_name = backup['created']
                            st.session_state.show_restore_confirm = True
                            st.rerun()
            else:
                st.write("üì≠ Ch∆∞a c√≥ b·∫£n sao l∆∞u n√†o")
                
        except Exception as e:
            st.write("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra th√¥ng tin backup")
    
    # Handle restore confirmation dialog
    if st.session_state.get('show_restore_confirm', False):
        st.subheader("‚ö†Ô∏è X√°c nh·∫≠n kh√¥i ph·ª•c")
        st.warning(f"""
        **B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ backup:**
        üìÖ {st.session_state.get('restore_backup_name', 'Kh√¥ng x√°c ƒë·ªãnh')}
        
        ‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng:**
        - D·ªØ li·ªáu hi·ªán t·∫°i s·∫Ω ƒë∆∞·ª£c sao l∆∞u t·ª± ƒë·ªông tr∆∞·ªõc khi kh√¥i ph·ª•c
        - B·∫°n c√≥ th·ªÉ ho√†n t√°c thao t√°c n√†y sau khi kh√¥i ph·ª•c
        - T·∫•t c·∫£ thay ƒë·ªïi sau th·ªùi ƒëi·ªÉm backup s·∫Ω b·ªã m·∫•t
        """)
        
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            if st.button("‚úÖ X√°c nh·∫≠n kh√¥i ph·ª•c", type="primary", use_container_width=True):
                with st.spinner("ƒêang kh√¥i ph·ª•c d·ªØ li·ªáu..."):
                    try:
                        from local_backup import LocalBackup
                        backup_service = LocalBackup()
                        
                        # Create pre-restore backup
                        pre_restore_backup = backup_service.create_pre_restore_backup()
                        if pre_restore_backup:
                            st.session_state.last_pre_restore_backup = pre_restore_backup
                        
                        # Restore from selected backup
                        success = backup_service.restore_backup(st.session_state.restore_backup_path)
                        
                        if success:
                            st.success("‚úÖ Kh√¥i ph·ª•c th√†nh c√¥ng!")
                            st.success("üîÑ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c. Trang s·∫Ω t·ª± ƒë·ªông t·∫£i l·∫°i...")
                            
                            # Store restore info for revert option
                            st.session_state.restore_completed = True
                            st.session_state.restored_from = st.session_state.restore_backup_name
                            
                            # Clear confirmation dialog
                            st.session_state.show_restore_confirm = False
                            del st.session_state.restore_backup_path
                            del st.session_state.restore_backup_name
                            
                            st.balloons()
                            time.sleep(2)
                            st.rerun()
                        else:
                            st.error("‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i!")
                            
                    except Exception as e:
                        st.error(f"‚ùå L·ªói kh√¥i ph·ª•c: {str(e)}")
        
        with col2:
            if st.button("‚ùå H·ªßy b·ªè", use_container_width=True):
                st.session_state.show_restore_confirm = False
                if 'restore_backup_path' in st.session_state:
                    del st.session_state.restore_backup_path
                if 'restore_backup_name' in st.session_state:
                    del st.session_state.restore_backup_name
                st.rerun()
    
    # Show revert option if a restore was just completed
    if st.session_state.get('restore_completed', False):
        st.subheader("‚Ü©Ô∏è Ho√†n t√°c kh√¥i ph·ª•c")
        st.info(f"""
        **Kh√¥i ph·ª•c g·∫ßn nh·∫•t:** {st.session_state.get('restored_from', 'Kh√¥ng x√°c ƒë·ªãnh')}
        
        B·∫°n c√≥ th·ªÉ ho√†n t√°c vi·ªác kh√¥i ph·ª•c n√†y v√† quay l·∫°i d·ªØ li·ªáu tr∆∞·ªõc ƒë√≥.
        """)
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            if st.button("‚Ü©Ô∏è Ho√†n t√°c kh√¥i ph·ª•c", type="secondary", use_container_width=True):
                if st.session_state.get('last_pre_restore_backup'):
                    with st.spinner("ƒêang ho√†n t√°c kh√¥i ph·ª•c..."):
                        try:
                            from local_backup import LocalBackup
                            backup_service = LocalBackup()
                            
                            success = backup_service.restore_backup(st.session_state.last_pre_restore_backup)
                            
                            if success:
                                st.success("‚úÖ ƒê√£ ho√†n t√°c kh√¥i ph·ª•c th√†nh c√¥ng!")
                                st.success("üîÑ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c v·ªÅ tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥")
                                
                                # Clear restore session state
                                st.session_state.restore_completed = False
                                if 'restored_from' in st.session_state:
                                    del st.session_state.restored_from
                                if 'last_pre_restore_backup' in st.session_state:
                                    del st.session_state.last_pre_restore_backup
                                
                                st.balloons()
                                time.sleep(2)
                                st.rerun()
                            else:
                                st.error("‚ùå Ho√†n t√°c th·∫•t b·∫°i!")
                                
                        except Exception as e:
                            st.error(f"‚ùå L·ªói ho√†n t√°c: {str(e)}")
                else:
                    st.error("‚ùå Kh√¥ng t√¨m th·∫•y backup ƒë·ªÉ ho√†n t√°c")
        
        with col2:
            if st.button("‚úì Gi·ªØ nguy√™n", use_container_width=True):
                st.session_state.restore_completed = False
                if 'restored_from' in st.session_state:
                    del st.session_state.restored_from
                if 'last_pre_restore_backup' in st.session_state:
                    del st.session_state.last_pre_restore_backup
                st.rerun()
    
    # Restore Section - File Upload
    if not st.session_state.get('show_restore_confirm', False):
        st.subheader("üì§ Kh√¥i ph·ª•c t·ª´ file")
        
        # Upload and restore backup
        uploaded_file = st.file_uploader(
            "Ch·ªçn file backup ƒë·ªÉ kh√¥i ph·ª•c",
            type=['zip', 'db'],
            help="Ch·ªçn file backup (.zip ho·∫∑c .db) ƒë·ªÉ kh√¥i ph·ª•c d·ªØ li·ªáu"
        )
        
        if uploaded_file:
            col1, col2 = st.columns([3, 1])
            with col1:
                st.info(f"üìÅ File ƒë√£ ch·ªçn: {uploaded_file.name}")
                st.info(f"üìä K√≠ch th∆∞·ªõc: {uploaded_file.size / 1024 / 1024:.2f} MB")
            
            with col2:
                if st.button("üîÑ Kh√¥i ph·ª•c t·ª´ file", type="primary"):
                    with st.spinner("ƒêang kh√¥i ph·ª•c d·ªØ li·ªáu..."):
                        try:
                            # Save uploaded file temporarily
                            temp_path = f"temp_restore_{uploaded_file.name}"
                            with open(temp_path, 'wb') as f:
                                f.write(uploaded_file.getvalue())
                            
                            # Create pre-restore backup
                            from local_backup import LocalBackup
                            backup_service = LocalBackup()
                            pre_restore_backup = backup_service.create_pre_restore_backup()
                            if pre_restore_backup:
                                st.session_state.last_pre_restore_backup = pre_restore_backup
                            
                            # Restore from backup
                            success = backup_service.restore_backup(temp_path)
                            
                            # Clean up temp file
                            os.remove(temp_path)
                            
                            if success:
                                st.success("‚úÖ Kh√¥i ph·ª•c th√†nh c√¥ng!")
                                st.success("üîÑ Vui l√≤ng t·∫£i l·∫°i trang ƒë·ªÉ th·∫•y d·ªØ li·ªáu m·ªõi")
                                
                                # Store restore info for revert option
                                st.session_state.restore_completed = True
                                st.session_state.restored_from = uploaded_file.name
                                
                                st.balloons()
                                time.sleep(2)
                                st.rerun()
                            else:
                                st.error("‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i!")
                                
                        except Exception as e:
                            st.error(f"‚ùå L·ªói kh√¥i ph·ª•c: {str(e)}")
                            # Clean up temp file if it exists
                            if 'temp_path' in locals() and os.path.exists(temp_path):
                                os.remove(temp_path)
    
    # Information section
    st.subheader("‚ÑπÔ∏è Th√¥ng tin h·ªá th·ªëng sao l∆∞u")
    st.info("""
    **H·ªá th·ªëng sao l∆∞u c·ª•c b·ªô:**
    ‚Ä¢ T·ª± ƒë·ªông sao l∆∞u h√†ng ng√†y l√∫c 2:00 AM
    ‚Ä¢ T·∫°o file backup n√©n (.zip) v·ªõi metadata
    ‚Ä¢ T·ª± ƒë·ªông d·ªçn d·∫πp c√°c backup c≈© (gi·ªØ t·ªëi ƒëa 10 b·∫£n)
    ‚Ä¢ H·ªó tr·ª£ kh√¥i ph·ª•c t·ª´ file backup
    ‚Ä¢ Backup bao g·ªìm to√†n b·ªô d·ªØ li·ªáu h·ªá th·ªëng
    """)

def user_management_section():
    """User management interface for admin users with password protection"""
    st.subheader("üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng")
    
    # Only main admin can access user management
    if st.session_state.user.username != 'admin':
        st.warning("üö´ Ch·ªâ t√†i kho·∫£n admin ch√≠nh m·ªõi c√≥ th·ªÉ qu·∫£n l√Ω ng∆∞·ªùi d√πng.")
        return
    
    # Password protection for user management
    if not st.session_state.get('user_management_unlocked', False):
        st.warning("‚ö†Ô∏è ƒê√¢y l√† khu v·ª±c nh·∫°y c·∫£m y√™u c·∫ßu x√°c th·ª±c b·ªï sung")
        st.info("üîê Qu·∫£n l√Ω ng∆∞·ªùi d√πng c√≥ th·ªÉ thay ƒë·ªïi quy·ªÅn truy c·∫≠p v√† x√≥a t√†i kho·∫£n. Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ ti·∫øp t·ª•c.")
        
        with st.form("user_management_auth"):
            admin_password = st.text_input(
                "Nh·∫≠p m·∫≠t kh·∫©u admin ƒë·ªÉ truy c·∫≠p qu·∫£n l√Ω ng∆∞·ªùi d√πng:",
                type="password",
                help="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i c·ªßa t√†i kho·∫£n admin"
            )
            
            col1, col2 = st.columns(2)
            with col1:
                verify_submitted = st.form_submit_button("üîì X√°c th·ª±c", type="primary")
            with col2:
                cancel_submitted = st.form_submit_button("‚ùå H·ªßy")
            
            if verify_submitted:
                if admin_password:
                    # Verify admin password
                    import hashlib
                    password_hash = hashlib.sha256(admin_password.encode()).hexdigest()
                    
                    db = Database()
                    admin_user = db.get_user_by_username('admin')
                    
                    if admin_user and admin_user.password_hash == password_hash:
                        st.session_state.user_management_unlocked = True
                        st.session_state.user_management_unlock_time = time.time()
                        st.success("‚úÖ X√°c th·ª±c th√†nh c√¥ng! ƒêang m·ªü kh√≥a qu·∫£n l√Ω ng∆∞·ªùi d√πng...")
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng! Vui l√≤ng th·ª≠ l·∫°i.")
                        time.sleep(2)
                else:
                    st.error("‚ùå Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!")
            
            if cancel_submitted:
                st.info("üîí ƒê√£ h·ªßy truy c·∫≠p qu·∫£n l√Ω ng∆∞·ªùi d√πng")
                return
        
        return
    
    # Check if unlock has expired (15 minutes timeout)
    unlock_time = st.session_state.get('user_management_unlock_time', 0)
    if time.time() - unlock_time > 900:  # 15 minutes = 900 seconds
        st.session_state.user_management_unlocked = False
        st.warning("‚è∞ Phi√™n x√°c th·ª±c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng x√°c th·ª±c l·∫°i.")
        st.rerun()
    
    # Show unlock status and remaining time
    remaining_time = 900 - (time.time() - unlock_time)
    minutes_left = int(remaining_time // 60)
    st.success(f"üîì Qu·∫£n l√Ω ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a. C√≤n l·∫°i: {minutes_left} ph√∫t")
    
    # Add manual lock button
    col1, col2, col3 = st.columns([1, 1, 2])
    with col1:
        if st.button("üîí Kh√≥a l·∫°i", help="Kh√≥a l·∫°i qu·∫£n l√Ω ng∆∞·ªùi d√πng"):
            st.session_state.user_management_unlocked = False
            if 'user_management_unlock_time' in st.session_state:
                del st.session_state.user_management_unlock_time
            st.info("üîí ƒê√£ kh√≥a qu·∫£n l√Ω ng∆∞·ªùi d√πng")
            st.rerun()
    
    with col2:
        if st.button("‚è∞ Gia h·∫°n", help="Gia h·∫°n th·ªùi gian truy c·∫≠p"):
            st.session_state.user_management_unlock_time = time.time()
            st.success("‚úÖ ƒê√£ gia h·∫°n th√™m 15 ph√∫t")
            st.rerun()
    
    db = Database()
    
    # Create tabs for user management
    user_tabs = st.tabs(["üîë Xem m·∫≠t kh·∫©u", "‚ûï Th√™m ng∆∞·ªùi d√πng", "üîß Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng"])
    
    with user_tabs[0]:
        st.write("**üîë Xem m·∫≠t kh·∫©u ng∆∞·ªùi d√πng:**")
        st.warning("‚ö†Ô∏è Ch·ª©c nƒÉng n√†y ch·ªâ d√†nh cho vi·ªác kh√¥i ph·ª•c t√†i kho·∫£n. Vui l√≤ng s·ª≠ d·ª•ng c·∫©n th·∫≠n!")
        
        try:
            # Get user passwords (this uses the existing method)
            user_passwords = db.get_user_passwords()
            
            if user_passwords:
                st.write("**üìä Danh s√°ch m·∫≠t kh·∫©u ng∆∞·ªùi d√πng:**")
                
                # Create password table
                password_data = []
                for user_id, user_info in user_passwords.items():
                    password_data.append({
                        'ID': user_id,
                        'T√™n ƒëƒÉng nh·∫≠p': user_info['username'],
                        'H·ªç t√™n': user_info['full_name'],
                        'Vai tr√≤': user_info['role'],
                        'M·∫≠t kh·∫©u': user_info['password']
                    })
                
                # Display password table with special formatting
                df_passwords = pd.DataFrame(password_data)
                
                # Use data editor to allow copying
                st.data_editor(
                    df_passwords,
                    use_container_width=True,
                    disabled=True,
                    hide_index=True
                )
                
                st.info(f"üìä T·ªïng s·ªë t√†i kho·∫£n: {len(user_passwords)}")
                
                # Security notice
                st.error("""
                üîí **L∆∞u √Ω b·∫£o m·∫≠t:**
                ‚Ä¢ Kh√¥ng chia s·∫ª th√¥ng tin m·∫≠t kh·∫©u v·ªõi ng∆∞·ªùi kh√°c
                ‚Ä¢ Ch·ªâ s·ª≠ d·ª•ng khi c·∫ßn kh√¥i ph·ª•c t√†i kho·∫£n
                ‚Ä¢ Khuy·∫øn ngh·ªã ng∆∞·ªùi d√πng ƒë·ªïi m·∫≠t kh·∫©u sau khi kh√¥i ph·ª•c
                ‚Ä¢ M·∫≠t kh·∫©u ƒë∆∞·ª£c m√£ h√≥a trong c∆° s·ªü d·ªØ li·ªáu
                """)
                
                # Export passwords option
                if st.button("üìÑ Xu·∫•t danh s√°ch m·∫≠t kh·∫©u", help="Xu·∫•t ra file ƒë·ªÉ sao l∆∞u"):
                    # Create export data
                    export_data = "ID,T√™n ƒëƒÉng nh·∫≠p,H·ªç t√™n,Vai tr√≤,M·∫≠t kh·∫©u\n"
                    for user_id, user_info in user_passwords.items():
                        export_data += f"{user_id},{user_info['username']},{user_info['full_name']},{user_info['role']},{user_info['password']}\n"
                    
                    st.download_button(
                        label="‚¨áÔ∏è T·∫£i file CSV",
                        data=export_data,
                        file_name=f"user_passwords_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv",
                        help="T·∫£i xu·ªëng danh s√°ch m·∫≠t kh·∫©u d∆∞·ªõi d·∫°ng CSV"
                    )
                
            else:
                st.info("üì≠ Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m·∫≠t kh·∫©u.")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi l·∫•y th√¥ng tin m·∫≠t kh·∫©u: {str(e)}")
            
        # Password reset functionality
        st.subheader("üîÑ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u")
        
        with st.form("reset_password_form"):
            try:
                users = db.get_all_users()
                if users:
                    user_options = {f"{u.full_name} ({u.username})": u.id for u in users}
                    selected_user_reset = st.selectbox(
                        "Ch·ªçn ng∆∞·ªùi d√πng c·∫ßn ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:",
                        options=list(user_options.keys())
                    )
                    
                    new_password_reset = st.text_input(
                        "M·∫≠t kh·∫©u m·ªõi:",
                        type="password",
                        help="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi cho ng∆∞·ªùi d√πng"
                    )
                    
                    confirm_password = st.text_input(
                        "X√°c nh·∫≠n m·∫≠t kh·∫©u:",
                        type="password",
                        help="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u ƒë·ªÉ x√°c nh·∫≠n"
                    )
                    
                    reset_submitted = st.form_submit_button("üîÑ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u", type="primary")
                    
                    if reset_submitted:
                        if not new_password_reset:
                            st.error("‚ùå Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!")
                        elif new_password_reset != confirm_password:
                            st.error("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                        elif len(new_password_reset) < 6:
                            st.error("‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!")
                        else:
                            user_id = user_options[selected_user_reset]
                            success = db.update_user(user_id=user_id, new_password=new_password_reset)
                            
                            if success:
                                st.success(f"‚úÖ ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho '{selected_user_reset}' th√†nh c√¥ng!")
                                st.info("üí° Vui l√≤ng th√¥ng b√°o m·∫≠t kh·∫©u m·ªõi cho ng∆∞·ªùi d√πng v√† y√™u c·∫ßu h·ªç ƒë·ªïi m·∫≠t kh·∫©u.")
                            else:
                                st.error("‚ùå ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i!")
                
            except Exception as e:
                st.error(f"‚ùå L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: {str(e)}")

    with user_tabs[1]:
        st.write("**‚ûï Th√™m ng∆∞·ªùi d√πng m·ªõi:**")
        
        with st.form("add_user_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                new_username = st.text_input("T√™n ƒëƒÉng nh·∫≠p *", key="new_username")
                new_fullname = st.text_input("H·ªç t√™n ƒë·∫ßy ƒë·ªß *", key="new_fullname")
                new_email = st.text_input("Email", key="new_email")
            
            with col2:
                new_password = st.text_input("M·∫≠t kh·∫©u *", type="password", key="new_password")
                new_role = st.selectbox("Vai tr√≤ *", 
                                      ['teacher', 'doctor', 'administrative', 'family'],
                                      key="new_role")
                
                # Family-specific field
                if new_role == 'family':
                    students = db.get_all_students()
                    student_options = {f"{s.full_name} (ID: {s.id})": s.id for s in students}
                    if student_options:
                        selected_student = st.selectbox("H·ªçc sinh li√™n quan", 
                                                       options=list(student_options.keys()),
                                                       key="family_student")
                        family_student_id = student_options[selected_student]
                    else:
                        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ h·ªçc sinh n√†o trong h·ªá th·ªëng.")
                        family_student_id = None
                else:
                    family_student_id = None
            
            submitted = st.form_submit_button("‚úÖ Th√™m ng∆∞·ªùi d√πng", type="primary")
            
            if submitted:
                if not all([new_username, new_fullname, new_password]):
                    st.error("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc (*)")
                else:
                    try:
                        success = db.create_user(
                            username=new_username,
                            password=new_password,
                            role=new_role,
                            full_name=new_fullname,
                            email=new_email if new_email else None,
                            family_student_id=family_student_id
                        )
                        
                        if success:
                            st.success(f"‚úÖ ƒê√£ th√™m ng∆∞·ªùi d√πng '{new_username}' th√†nh c√¥ng!")
                            st.rerun()
                        else:
                            st.error("‚ùå Th√™m ng∆∞·ªùi d√πng th·∫•t b·∫°i. T√™n ƒëƒÉng nh·∫≠p c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i.")
                            
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi th√™m ng∆∞·ªùi d√πng: {str(e)}")
    
    with user_tabs[2]:
        st.write("**üîß Ch·ªânh s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng:**")
        
        try:
            users = db.get_all_users()
            
            if users:
                # Select user to edit
                user_options = {f"{u.full_name} ({u.username})": u.id for u in users}
                selected_user_display = st.selectbox("Ch·ªçn ng∆∞·ªùi d√πng c·∫ßn ch·ªânh s·ª≠a:", 
                                                   options=list(user_options.keys()))
                
                if selected_user_display:
                    user_id = user_options[selected_user_display]
                    user = db.get_user_by_id(user_id)
                    
                    if user:
                        with st.form("edit_user_form"):
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                edit_username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", value=user.username, disabled=True)
                                edit_fullname = st.text_input("H·ªç t√™n", value=user.full_name)
                                edit_email = st.text_input("Email", value=user.email or "")
                            
                            with col2:
                                new_password_edit = st.text_input("M·∫≠t kh·∫©u m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi)", 
                                                                type="password")
                                edit_role = st.selectbox("Vai tr√≤", 
                                                        ['admin', 'teacher', 'doctor', 'administrative', 'family'],
                                                        index=['admin', 'teacher', 'doctor', 'administrative', 'family'].index(user.role))
                            
                            col_update, col_delete = st.columns(2)
                            
                            with col_update:
                                update_submitted = st.form_submit_button("üíæ C·∫≠p nh·∫≠t", type="primary")
                            
                            with col_delete:
                                if user.username != 'admin':  # Prevent deleting main admin
                                    delete_submitted = st.form_submit_button("üóëÔ∏è X√≥a ng∆∞·ªùi d√πng", 
                                                                           type="secondary")
                                else:
                                    st.info("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n admin ch√≠nh")
                                    delete_submitted = False
                            
                            if update_submitted:
                                try:
                                    success = db.update_user(
                                        user_id=user_id,
                                        full_name=edit_fullname,
                                        email=edit_email if edit_email else None,
                                        role=edit_role,
                                        new_password=new_password_edit if new_password_edit else None
                                    )
                                    
                                    if success:
                                        st.success("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!")
                                        st.rerun()
                                    else:
                                        st.error("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!")
                                        
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {str(e)}")
                            
                            if delete_submitted:
                                try:
                                    success = db.delete_user(user_id)
                                    
                                    if success:
                                        st.success("‚úÖ ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!")
                                        st.rerun()
                                    else:
                                        st.error("‚ùå X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i!")
                                        
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói khi x√≥a: {str(e)}")
            
            else:
                st.info("üì≠ Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o ƒë·ªÉ ch·ªânh s·ª≠a.")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng: {str(e)}")

def spreadsheet_management_section():
    """Spreadsheet-style data management interface"""
    st.subheader("üìä Qu·∫£n l√Ω d·ªØ li·ªáu Spreadsheet")
    
    db = Database()
    
    # Create tabs for different data types
    data_tabs = st.tabs(["üë• Ng∆∞·ªùi d√πng", "üéì H·ªçc sinh", "üèõÔ∏è C·ª±u chi·∫øn binh", "üè• H·ªì s∆° y t·∫ø"])
    
    with data_tabs[0]:
        st.write("**üë• Qu·∫£n l√Ω d·ªØ li·ªáu ng∆∞·ªùi d√πng:**")
        
        try:
            users = db.get_all_users()
            
            if users:
                # Create editable dataframe
                user_data = []
                for user in users:
                    user_data.append({
                        'ID': user.id,
                        'T√™n ƒëƒÉng nh·∫≠p': user.username,
                        'H·ªç t√™n': user.full_name,
                        'Vai tr√≤': user.role,
                        'Email': user.email or '',
                        'Ch·∫ø ƒë·ªô t·ªëi': user.dark_mode if hasattr(user, 'dark_mode') else False
                    })
                
                df = pd.DataFrame(user_data)
                edited_df = st.data_editor(df, use_container_width=True, num_rows="dynamic")
                
                if st.button("üíæ L∆∞u thay ƒë·ªïi ng∆∞·ªùi d√πng", type="primary"):
                    st.info("üí° Ch·ª©c nƒÉng l∆∞u tr·ª±c ti·∫øp t·ª´ b·∫£ng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng s·ª≠ d·ª•ng tab 'Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng'.")
            else:
                st.info("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng.")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng: {str(e)}")
    
    with data_tabs[1]:
        st.write("**üéì Qu·∫£n l√Ω d·ªØ li·ªáu h·ªçc sinh:**")
        
        try:
            students = db.get_all_students()
            
            if students:
                student_data = []
                for student in students:
                    student_data.append({
                        'ID': student.id,
                        'H·ªç t√™n': student.full_name,
                        'Ng√†y sinh': student.birth_date,
                        'ƒê·ªãa ch·ªâ': student.address,
                        'Email': student.email or '',
                        'Gi·ªõi t√≠nh': getattr(student, 'gender', ''),
                        'ƒêi·ªán tho·∫°i': getattr(student, 'phone', ''),
                        'L·ªõp ID': student.class_id or ''
                    })
                
                df = pd.DataFrame(student_data)
                st.data_editor(df, use_container_width=True, disabled=True)
                
                st.info("üí° ƒê·ªÉ ch·ªânh s·ª≠a th√¥ng tin h·ªçc sinh, vui l√≤ng s·ª≠ d·ª•ng trang 'Qu·∫£n l√Ω h·ªì s∆°'.")
            else:
                st.info("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu h·ªçc sinh.")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu h·ªçc sinh: {str(e)}")
    
    with data_tabs[2]:
        st.write("**üèõÔ∏è Qu·∫£n l√Ω d·ªØ li·ªáu c·ª±u chi·∫øn binh:**")
        
        try:
            veterans = db.get_all_veterans()
            
            if veterans:
                veteran_data = []
                for veteran in veterans:
                    veteran_data.append({
                        'ID': veteran.id,
                        'H·ªç t√™n': veteran.full_name,
                        'Ng√†y sinh': veteran.birth_date,
                        'ƒê·ªãa ch·ªâ': veteran.address,
                        'Email': veteran.email or '',
                        'ƒê∆°n v·ªã ph·ª•c v·ª•': getattr(veteran, 'unit_served', ''),
                        'C·∫•p b·∫≠c': getattr(veteran, 'rank', '')
                    })
                
                df = pd.DataFrame(veteran_data)
                st.data_editor(df, use_container_width=True, disabled=True)
                
                st.info("üí° ƒê·ªÉ ch·ªânh s·ª≠a th√¥ng tin c·ª±u chi·∫øn binh, vui l√≤ng s·ª≠ d·ª•ng trang 'Qu·∫£n l√Ω h·ªì s∆°'.")
            else:
                st.info("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu c·ª±u chi·∫øn binh.")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu c·ª±u chi·∫øn binh: {str(e)}")
    
    with data_tabs[3]:
        st.write("**üè• Qu·∫£n l√Ω h·ªì s∆° y t·∫ø:**")
        
        try:
            medical_records = db.get_all_medical_records()
            
            if medical_records:
                medical_data = []
                for record in medical_records:
                    medical_data.append({
                        'ID': record.id,
                        'B·ªánh nh√¢n ID': record.student_id,
                        'Ng√†y kh√°m': record.examination_date,
                        'Ch·∫©n ƒëo√°n': record.diagnosis,
                        'ƒêi·ªÅu tr·ªã': record.treatment,
                        'B√°c sƒ© ID': record.doctor_id
                    })
                
                df = pd.DataFrame(medical_data)
                st.data_editor(df, use_container_width=True, disabled=True)
                
                st.info("üí° ƒê·ªÉ ch·ªânh s·ª≠a h·ªì s∆° y t·∫ø, vui l√≤ng s·ª≠ d·ª•ng trang 'Y t·∫ø'.")
            else:
                st.info("üì≠ Ch∆∞a c√≥ h·ªì s∆° y t·∫ø.")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫£i h·ªì s∆° y t·∫ø: {str(e)}")

def excel_import_section():
    """Excel data import functionality with advanced edge case handling"""
    st.subheader("üì• Nh·∫≠p d·ªØ li·ªáu t·ª´ Excel - N√¢ng cao")
    
    db = Database()
    
    # Advanced settings section
    with st.expander("‚öôÔ∏è C√†i ƒë·∫∑t n√¢ng cao", expanded=False):
        st.write("**üìÖ ƒê·ªãnh d·∫°ng ng√†y th√°ng:**")
        col1, col2 = st.columns(2)
        with col1:
            date_formats = [
                "dd/mm/yyyy", "dd-mm-yyyy", "yyyy-mm-dd", "mm/dd/yyyy", 
                "dd/mm/yy", "dd-mm-yy", "yyyy/mm/dd", "Auto-detect"
            ]
            selected_date_format = st.selectbox(
                "ƒê·ªãnh d·∫°ng ng√†y th√°ng trong Excel:",
                date_formats,
                index=len(date_formats)-1,
                help="Ch·ªçn ƒë·ªãnh d·∫°ng ng√†y th√°ng ho·∫∑c ƒë·ªÉ Auto-detect t·ª± nh·∫≠n di·ªán"
            )
        
        with col2:
            # Duplicate handling options
            duplicate_options = [
                "Skip duplicates", "Update existing", "Create new", "Ask for each"
            ]
            duplicate_handling = st.selectbox(
                "X·ª≠ l√Ω b·∫£n ghi tr√πng l·∫∑p:",
                duplicate_options,
                help="C√°ch x·ª≠ l√Ω khi ph√°t hi·ªán d·ªØ li·ªáu tr√πng l·∫∑p"
            )
        
        st.write("**üîß T√πy ch·ªçn x·ª≠ l√Ω d·ªØ li·ªáu:**")
        col3, col4 = st.columns(2)
        with col3:
            clean_data = st.checkbox("T·ª± ƒë·ªông l√†m s·∫°ch d·ªØ li·ªáu", value=True, help="Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a, ƒë·ªãnh d·∫°ng l·∫°i text")
            validate_email = st.checkbox("Ki·ªÉm tra ƒë·ªãnh d·∫°ng email", value=True, help="X√°c th·ª±c ƒë·ªãa ch·ªâ email h·ª£p l·ªá")
        
        with col4:
            validate_phone = st.checkbox("Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i", value=True, help="X√°c th·ª±c ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam")
            ignore_empty_rows = st.checkbox("B·ªè qua d√≤ng tr·ªëng", value=True, help="Kh√¥ng x·ª≠ l√Ω c√°c d√≤ng kh√¥ng c√≥ d·ªØ li·ªáu quan tr·ªçng")
    
    # File upload
    uploaded_file = st.file_uploader(
        "Ch·ªçn file Excel ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu",
        type=['xlsx', 'xls'],
        help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng .xlsx v√† .xls. File t·ªëi ƒëa 200MB"
    )
    
    if uploaded_file:
        try:
            # Enhanced file reading with error handling
            with st.spinner("ƒêang ƒë·ªçc file Excel..."):
                try:
                    # Try reading with different encodings and engines
                    df = pd.read_excel(uploaded_file, engine='openpyxl')
                except Exception as e1:
                    try:
                        df = pd.read_excel(uploaded_file, engine='xlrd')
                    except Exception as e2:
                        st.error(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file Excel. L·ªói: {str(e1)}")
                        st.error(f"Th·ª≠ l·∫°i v·ªõi engine kh√°c: {str(e2)}")
                        return
            
            # Data validation and cleaning
            original_rows = len(df)
            
            # Remove completely empty rows if option is selected
            if ignore_empty_rows:
                df = df.dropna(how='all')
                removed_empty = original_rows - len(df)
                if removed_empty > 0:
                    st.info(f"üßπ ƒê√£ lo·∫°i b·ªè {removed_empty} d√≤ng tr·ªëng")
            
            # Basic data info
            st.success(f"‚úÖ ƒê√£ t·∫£i file Excel th√†nh c√¥ng!")
            
            # Show data statistics
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("üìä T·ªïng d√≤ng", len(df))
            with col2:
                st.metric("üìã T·ªïng c·ªôt", len(df.columns))
            with col3:
                st.metric("üìù D√≤ng c√≥ d·ªØ li·ªáu", df.count().max())
            with col4:
                st.metric("üö´ D√≤ng thi·∫øu d·ªØ li·ªáu", len(df) - df.count().max())
            
            # Show data quality assessment
            st.subheader("üîç ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu")
            quality_tab1, quality_tab2, quality_tab3 = st.tabs(["üìä T·ªïng quan", "‚ö†Ô∏è V·∫•n ƒë·ªÅ ph√°t hi·ªán", "üëÄ Xem tr∆∞·ªõc"])
            
            with quality_tab1:
                # Data type analysis
                st.write("**üìà Ph√¢n t√≠ch ki·ªÉu d·ªØ li·ªáu:**")
                dtype_info = []
                for col in df.columns:
                    null_count = df[col].isnull().sum()
                    null_percent = (null_count / len(df)) * 100
                    dtype_info.append({
                        'C·ªôt': col,
                        'Ki·ªÉu d·ªØ li·ªáu': str(df[col].dtype),
                        'Gi√° tr·ªã null': null_count,
                        '% Thi·∫øu': f"{null_percent:.1f}%"
                    })
                
                st.dataframe(pd.DataFrame(dtype_info), use_container_width=True)
            
            with quality_tab2:
                # Identify potential issues
                issues = []
                
                for col in df.columns:
                    col_data = df[col].dropna()
                    if len(col_data) == 0:
                        continue
                    
                    # Check for potential date columns
                    if any(keyword in col.lower() for keyword in ['date', 'ng√†y', 'sinh', 't·∫°o', 'c·∫≠p nh·∫≠t']):
                        try:
                            pd.to_datetime(col_data.iloc[0])
                            issues.append(f"‚úÖ C·ªôt '{col}' c√≥ th·ªÉ l√† ng√†y th√°ng")
                        except:
                            issues.append(f"‚ö†Ô∏è C·ªôt '{col}' c√≥ th·ªÉ l√† ng√†y th√°ng nh∆∞ng ƒë·ªãnh d·∫°ng kh√¥ng chu·∫©n")
                    
                    # Check for potential email columns
                    if any(keyword in col.lower() for keyword in ['email', 'mail', 'e-mail']):
                        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                        valid_emails = col_data.astype(str).str.match(email_pattern).sum()
                        if valid_emails < len(col_data) * 0.8:
                            issues.append(f"‚ö†Ô∏è C·ªôt '{col}' c√≥ {len(col_data) - valid_emails} email kh√¥ng h·ª£p l·ªá")
                        else:
                            issues.append(f"‚úÖ C·ªôt '{col}' c√≥ ƒë·ªãnh d·∫°ng email h·ª£p l·ªá")
                    
                    # Check for duplicate values
                    duplicates = col_data.duplicated().sum()
                    if duplicates > 0:
                        issues.append(f"üîÑ C·ªôt '{col}' c√≥ {duplicates} gi√° tr·ªã tr√πng l·∫∑p")
                
                if issues:
                    for issue in issues:
                        if issue.startswith("‚úÖ"):
                            st.success(issue)
                        elif issue.startswith("‚ö†Ô∏è"):
                            st.warning(issue)
                        elif issue.startswith("üîÑ"):
                            st.info(issue)
                else:
                    st.success("‚úÖ Kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ n√†o trong d·ªØ li·ªáu")
            
            with quality_tab3:
                # Show preview with enhanced formatting
                st.write("**üëÄ Xem tr∆∞·ªõc d·ªØ li·ªáu (10 d√≤ng ƒë·∫ßu):**")
                preview_df = df.head(10).copy()
                
                # Apply basic cleaning for preview if enabled
                if clean_data:
                    for col in preview_df.columns:
                        if preview_df[col].dtype == 'object':
                            preview_df[col] = preview_df[col].astype(str).str.strip()
                
                st.dataframe(preview_df, use_container_width=True)
            
            # Data type selection
            st.subheader("üìã Ch·ªçn lo·∫°i d·ªØ li·ªáu")
            data_type = st.selectbox(
                "D·ªØ li·ªáu trong file Excel n√†y l√†:",
                ["H·ªçc sinh", "C·ª±u chi·∫øn binh", "Ng∆∞·ªùi d√πng", "H·ªì s∆° y t·∫ø"]
            )
            
            # Column mapping
            st.subheader("üîó √Ånh x·∫° c·ªôt d·ªØ li·ªáu")
            
            excel_columns = list(df.columns)
            
            if data_type == "H·ªçc sinh":
                st.write("**√Ånh x·∫° c·ªôt cho d·ªØ li·ªáu h·ªçc sinh:**")
                col1, col2 = st.columns(2)
                
                with col1:
                    name_col = st.selectbox("C·ªôt 'H·ªç t√™n':", excel_columns, key="name_col")
                    birth_col = st.selectbox("C·ªôt 'Ng√†y sinh':", excel_columns, key="birth_col")
                    address_col = st.selectbox("C·ªôt 'ƒê·ªãa ch·ªâ':", excel_columns, key="address_col")
                
                with col2:
                    email_col = st.selectbox("C·ªôt 'Email':", [""] + excel_columns, key="email_col")
                    gender_col = st.selectbox("C·ªôt 'Gi·ªõi t√≠nh':", [""] + excel_columns, key="gender_col")
                    phone_col = st.selectbox("C·ªôt 'ƒêi·ªán tho·∫°i':", [""] + excel_columns, key="phone_col")
                
                if st.button("üì• Nh·∫≠p d·ªØ li·ªáu h·ªçc sinh", type="primary"):
                    with st.spinner("ƒêang x·ª≠ l√Ω v√† nh·∫≠p d·ªØ li·ªáu..."):
                        try:
                            success_count = 0
                            error_count = 0
                            duplicate_count = 0
                            updated_count = 0
                            error_details = []
                            
                            # Progress tracking
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            total_rows = len(df)
                            
                            for idx, row in df.iterrows():
                                # Update progress
                                progress = (idx + 1) / total_rows
                                progress_bar.progress(progress)
                                status_text.text(f"ƒêang x·ª≠ l√Ω d√≤ng {idx + 1}/{total_rows}")
                                
                                try:
                                    # Clean and validate data
                                    raw_name = row[name_col] if pd.notna(row[name_col]) else ''
                                    raw_birth = row[birth_col] if pd.notna(row[birth_col]) else ''
                                    raw_address = row[address_col] if pd.notna(row[address_col]) else ''
                                    raw_email = row[email_col] if email_col and pd.notna(row[email_col]) else None
                                    raw_gender = row[gender_col] if gender_col and pd.notna(row[gender_col]) else None
                                    raw_phone = row[phone_col] if phone_col and pd.notna(row[phone_col]) else None
                                    
                                    # Skip empty rows if option enabled
                                    if ignore_empty_rows and not any([raw_name, raw_birth, raw_address]):
                                        continue
                                    
                                    # Clean data if enabled
                                    if clean_data:
                                        raw_name = str(raw_name).strip() if raw_name else ''
                                        raw_address = str(raw_address).strip() if raw_address else ''
                                        if raw_email:
                                            raw_email = str(raw_email).strip().lower()
                                        if raw_phone:
                                            # Clean phone number (remove spaces, dashes, etc.)
                                            raw_phone = ''.join(filter(str.isdigit, str(raw_phone)))
                                    
                                    # Validate email format
                                    if validate_email and raw_email:
                                        import re
                                        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                                        if not re.match(email_pattern, raw_email):
                                            error_details.append(f"D√≤ng {idx + 1}: Email kh√¥ng h·ª£p l·ªá '{raw_email}'")
                                            raw_email = None
                                    
                                    # Validate phone number format
                                    if validate_phone and raw_phone:
                                        # Vietnamese phone number validation
                                        if not (raw_phone.startswith('0') and len(raw_phone) in [10, 11]):
                                            error_details.append(f"D√≤ng {idx + 1}: SƒêT kh√¥ng h·ª£p l·ªá '{raw_phone}'")
                                            raw_phone = None
                                    
                                    # Parse date with multiple formats
                                    processed_birth_date = None
                                    if raw_birth:
                                        processed_birth_date = parse_date_advanced(raw_birth, selected_date_format)
                                        if not processed_birth_date:
                                            error_details.append(f"D√≤ng {idx + 1}: Ng√†y sinh kh√¥ng h·ª£p l·ªá '{raw_birth}'")
                                    
                                    # Check for duplicates
                                    existing_student = None
                                    if raw_name and processed_birth_date:
                                        # Check for existing student with same name and birth date
                                        try:
                                            students = db.get_all_students()
                                            for student in students:
                                                if (student.full_name.lower() == raw_name.lower() and 
                                                    student.birth_date == processed_birth_date):
                                                    existing_student = student
                                                    break
                                        except:
                                            pass
                                    
                                    # Prepare student data
                                    student_data = {
                                        'full_name': raw_name,
                                        'birth_date': processed_birth_date,
                                        'address': raw_address,
                                        'email': raw_email,
                                        'gender': raw_gender,
                                        'phone': raw_phone
                                    }
                                    
                                    # Handle duplicates based on user preference
                                    if existing_student:
                                        if duplicate_handling == "Skip duplicates":
                                            duplicate_count += 1
                                            continue
                                        elif duplicate_handling == "Update existing":
                                            # Update existing student
                                            if db.update_student(existing_student.id, **student_data):
                                                updated_count += 1
                                            else:
                                                error_count += 1
                                                error_details.append(f"D√≤ng {idx + 1}: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªçc sinh '{raw_name}'")
                                            continue
                                        elif duplicate_handling == "Ask for each":
                                            # This would require UI interaction - for now, skip
                                            duplicate_count += 1
                                            continue
                                        # "Create new" - proceed with creation
                                    
                                    # Validate required fields
                                    if not raw_name:
                                        error_count += 1
                                        error_details.append(f"D√≤ng {idx + 1}: Thi·∫øu h·ªç t√™n")
                                        continue
                                    
                                    # Create student
                                    if db.create_student(**student_data):
                                        success_count += 1
                                    else:
                                        error_count += 1
                                        error_details.append(f"D√≤ng {idx + 1}: Kh√¥ng th·ªÉ t·∫°o h·ªçc sinh '{raw_name}'")
                                        
                                except Exception as e:
                                    error_count += 1
                                    error_details.append(f"D√≤ng {idx + 1}: L·ªói x·ª≠ l√Ω - {str(e)}")
                            
                            # Complete progress
                            progress_bar.progress(1.0)
                            status_text.text("Ho√†n th√†nh!")
                            
                            # Show results
                            st.success(f"‚úÖ Nh·∫≠p d·ªØ li·ªáu ho√†n th√†nh!")
                            
                            # Results summary
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("‚úÖ Th√†nh c√¥ng", success_count)
                            with col2:
                                st.metric("üîÑ C·∫≠p nh·∫≠t", updated_count)
                            with col3:
                                st.metric("‚è≠Ô∏è B·ªè qua", duplicate_count)
                            with col4:
                                st.metric("‚ùå L·ªói", error_count)
                            
                            # Show error details if any
                            if error_details:
                                with st.expander(f"‚ö†Ô∏è Chi ti·∫øt l·ªói ({len(error_details)} m·ª•c)", expanded=False):
                                    for error in error_details[:50]:  # Limit to first 50 errors
                                        st.error(error)
                                    if len(error_details) > 50:
                                        st.warning(f"... v√† {len(error_details) - 50} l·ªói kh√°c")
                            
                        except Exception as e:
                            st.error(f"‚ùå L·ªói nghi√™m tr·ªçng khi nh·∫≠p d·ªØ li·ªáu: {str(e)}")
                            st.exception(e)
            
            elif data_type == "Ng∆∞·ªùi d√πng":
                st.write("**√Ånh x·∫° c·ªôt cho d·ªØ li·ªáu ng∆∞·ªùi d√πng:**")
                col1, col2 = st.columns(2)
                
                with col1:
                    username_col = st.selectbox("C·ªôt 'T√™n ƒëƒÉng nh·∫≠p':", excel_columns, key="username_col")
                    fullname_col = st.selectbox("C·ªôt 'H·ªç t√™n':", excel_columns, key="fullname_col")
                    role_col = st.selectbox("C·ªôt 'Vai tr√≤':", excel_columns, key="role_col")
                
                with col2:
                    password_col = st.selectbox("C·ªôt 'M·∫≠t kh·∫©u':", excel_columns, key="password_col")
                    email_col_user = st.selectbox("C·ªôt 'Email':", [""] + excel_columns, key="email_col_user")
                
                if st.button("üì• Nh·∫≠p d·ªØ li·ªáu ng∆∞·ªùi d√πng", type="primary"):
                    st.warning("‚ö†Ô∏è Ch·ª©c nƒÉng nh·∫≠p ng∆∞·ªùi d√πng t·ª´ Excel c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai c·∫©n th·∫≠n ƒë·ªÉ ƒë·∫£m b·∫£o b·∫£o m·∫≠t.")
            
            else:
                st.info(f"üí° Ch·ª©c nƒÉng nh·∫≠p '{data_type}' ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {str(e)}")
    
    # Enhanced import instructions
    st.subheader("üìñ H∆∞·ªõng d·∫´n nh·∫≠p d·ªØ li·ªáu n√¢ng cao")
    
    instruction_tabs = st.tabs(["üìã ƒê·ªãnh d·∫°ng file", "üéì D·ªØ li·ªáu h·ªçc sinh", "üë• D·ªØ li·ªáu ng∆∞·ªùi d√πng", "‚öôÔ∏è T√≠nh nƒÉng n√¢ng cao"])
    
    with instruction_tabs[0]:
        st.info("""
        **üìã ƒê·ªãnh d·∫°ng file Excel ƒë∆∞·ª£c h·ªó tr·ª£:**
        ‚Ä¢ File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xlsx ho·∫∑c .xls
        ‚Ä¢ D√≤ng ƒë·∫ßu ti√™n ch·ª©a t√™n c·ªôt (header)
        ‚Ä¢ T·ªëi ƒëa 200MB, kh√¥ng gi·ªõi h·∫°n s·ªë d√≤ng
        ‚Ä¢ H·ªó tr·ª£ nhi·ªÅu engine ƒë·ªçc file (openpyxl, xlrd)
        ‚Ä¢ T·ª± ƒë·ªông ph√°t hi·ªán v√† x·ª≠ l√Ω encoding
        """)
    
    with instruction_tabs[1]:
        st.info("""
        **üéì D·ªØ li·ªáu h·ªçc sinh:**
        ‚Ä¢ **C·ªôt b·∫Øt bu·ªôc:** H·ªç t√™n, Ng√†y sinh, ƒê·ªãa ch·ªâ
        ‚Ä¢ **C·ªôt t√πy ch·ªçn:** Email, Gi·ªõi t√≠nh, ƒêi·ªán tho·∫°i
        ‚Ä¢ **ƒê·ªãnh d·∫°ng ng√†y:** dd/mm/yyyy, dd-mm-yyyy, yyyy-mm-dd, ho·∫∑c Auto-detect
        ‚Ä¢ **Email:** T·ª± ƒë·ªông validate ƒë·ªãnh d·∫°ng email@domain.com
        ‚Ä¢ **SƒêT:** Validate s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam (10-11 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0)
        """)
    
    with instruction_tabs[2]:
        st.warning("""
        **üë• D·ªØ li·ªáu ng∆∞·ªùi d√πng:**
        ‚Ä¢ **C·ªôt b·∫Øt bu·ªôc:** T√™n ƒëƒÉng nh·∫≠p, H·ªç t√™n, Vai tr√≤, M·∫≠t kh·∫©u
        ‚Ä¢ **Vai tr√≤ h·ª£p l·ªá:** admin, teacher, doctor, administrative, family
        ‚Ä¢ **B·∫£o m·∫≠t:** Ch·ª©c nƒÉng n√†y c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai c·∫©n th·∫≠n
        ‚Ä¢ **Khuy·∫øn ngh·ªã:** Ch·ªâ admin c√≥ th·ªÉ nh·∫≠p d·ªØ li·ªáu ng∆∞·ªùi d√πng
        """)
    
    with instruction_tabs[3]:
        st.success("""
        **‚öôÔ∏è T√≠nh nƒÉng n√¢ng cao:**
        ‚Ä¢ **X·ª≠ l√Ω tr√πng l·∫∑p:** Skip, Update, Create new, Ask for each
        ‚Ä¢ **L√†m s·∫°ch d·ªØ li·ªáu:** T·ª± ƒë·ªông lo·∫°i b·ªè kho·∫£ng tr·∫Øng, ƒë·ªãnh d·∫°ng text
        ‚Ä¢ **Validation:** Email, s·ªë ƒëi·ªán tho·∫°i, ng√†y th√°ng
        ‚Ä¢ **Progress tracking:** Theo d√µi ti·∫øn tr√¨nh import real-time
        ‚Ä¢ **Error reporting:** Chi ti·∫øt l·ªói v·ªõi s·ªë d√≤ng c·ª• th·ªÉ
        ‚Ä¢ **Data quality:** Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu tr∆∞·ªõc khi import
        """)

# ... (other function definitions would go here)

def render():
    """Main render function"""
    init_auth()
    
    # Apply theme from session state
    # apply_theme()  # Disabled - using Streamlit defaults

    # Set current page for role checking
    st.session_state.current_page = "01_Qu·∫£n_l√Ω_H·ªá_th·ªëng"

    check_auth()
    
    # Restrict page to administrators only
    user_role = getattr(st.session_state, 'user_role', None)
    if user_role not in ['admin', 'administrative']:
        st.error("üö´ Ch·ªâ c√≥ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ truy c·∫≠p trang n√†y.")
        st.info("Trang n√†y ch·ª©a c√°c ch·ª©c nƒÉng qu·∫£n l√Ω h·ªá th·ªëng nh·∫°y c·∫£m v√† ch·ªâ d√†nh cho ng∆∞·ªùi qu·∫£n tr·ªã.")
        st.stop()
    
    # Check if user has access to this page dynamically  
    if not check_page_access('01_Qu·∫£n_l√Ω_H·ªá_th·ªëng'):
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.")
        st.stop()
        return

    st.title("‚öôÔ∏è H·ªá th·ªëng qu·∫£n l√Ω d·ªØ li·ªáu L√†ng H·ªØu Ngh·ªã")

    # Create tabs for different management sections - reordered per user request
    tabs = st.tabs([
        "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
        "üìä Qu·∫£n l√Ω d·ªØ li·ªáu Spreadsheet",
        f"üì• {get_text('pages.system.import_data', 'Nh·∫≠p D·ªØ Li·ªáu t·ª´ Excel')}", 
        f"üíæ {get_text('pages.system.backup_restore', 'Sao l∆∞u & Kh√¥i ph·ª•c')}"
    ])

    with tabs[0]:
        # User management section with enhanced security
        user_management_section()

    with tabs[1]:
        # Spreadsheet data management
        spreadsheet_management_section()

    with tabs[2]:
        # Excel data import
        excel_import_section()

    with tabs[3]:
        # Backup and restore
        database_management_section()
        
    st.info("""
    ### üîÑ Ph√¢n chia ch·ª©c nƒÉng
    - **Nh·∫≠p d·ªØ li·ªáu t·ª´ Excel** (Trang hi·ªán t·∫°i): Nh·∫≠p d·ªØ li·ªáu h·ªçc sinh t·ª´ file Excel v·ªõi x·ª≠ l√Ω ƒë·∫∑c bi·ªát (chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y th√°ng, l√†m s·∫°ch d·ªØ li·ªáu...)
    - **Qu·∫£n l√Ω D·ªØ li·ªáu** (Trang qu·∫£n l√Ω Database): Xem, ch·ªânh s·ª≠a v√† xu·∫•t/nh·∫≠p d·ªØ li·ªáu tr·ª±c ti·∫øp v·ªõi t·ª´ng b·∫£ng
    - **Sao l∆∞u & Kh√¥i ph·ª•c** (Trang hi·ªán t·∫°i): T·∫°o v√† kh√¥i ph·ª•c c√°c b·∫£n sao l∆∞u c·ªßa to√†n b·ªô c∆° s·ªü d·ªØ li·ªáu
    """)

if __name__ == "__main__":
    render()