import streamlit as st
from auth import init_auth, check_auth, check_role, can_edit_student_info, can_edit_veteran_info, check_page_access
from database import Database
from models import Student, Veteran
from utils import show_success, show_error, apply_theme
from translations import get_text
import pandas as pd
from io import BytesIO
from datetime import datetime
import base64
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.shared import OxmlElement, qn
from auth import is_search_allowed, is_print_allowed, get_role_based_search_types
import plotly.express as px
import plotly.graph_objects as go
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import inch
import os
try:
    from PIL import Image
except ImportError:
    Image = None

def export_student_comprehensive_report(db, student_id):
    """Xu·∫•t b√°o c√°o t·ªïng k·∫øt to√†n di·ªán c·ªßa h·ªçc sinh theo m·∫´u ch√≠nh th·ª©c"""
    from datetime import datetime
    from docx import Document
    from docx.shared import Inches
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    from io import BytesIO
    
    # L·∫•y th√¥ng tin h·ªçc sinh
    student_query = """
        SELECT s.*, c.name as class_name, c.academic_year
        FROM students s
        LEFT JOIN classes c ON s.class_id = c.id
        WHERE s.id = ?
    """
    student_data = db.conn.execute(student_query, (student_id,)).fetchone()
    
    if not student_data:
        return None
    
    # L·∫•y l·ªãch s·ª≠ y t·∫ø
    medical_records = db.conn.execute("""
        SELECT mr.date, mr.diagnosis, mr.treatment, u.full_name as doctor_name, mr.notes
        FROM medical_records mr
        LEFT JOIN users u ON mr.doctor_id = u.id
        WHERE mr.patient_id = ? AND mr.patient_type = 'student'
        ORDER BY mr.date DESC
    """, (student_id,)).fetchall()
    
    # L·∫•y t√†i li·ªáu th·ª±c t·∫ø ƒë√£ upload cho h·ªçc sinh (n·∫øu b·∫£ng t·ªìn t·∫°i)
    try:
        uploaded_documents = db.conn.execute("""
            SELECT df.file_name, df.description, df.upload_date, u.full_name as uploaded_by, 
                   df.file_type, df.file_data, LENGTH(df.file_data) as file_size
            FROM document_files df
            LEFT JOIN users u ON df.uploaded_by = u.id
            WHERE df.student_id = ?
            ORDER BY df.upload_date DESC
        """, (student_id,)).fetchall()
        print(f"DEBUG: Found {len(uploaded_documents)} documents for student {student_id}")
        for doc in uploaded_documents:
            print(f"DEBUG: Document: {doc[0]} ({doc[4]})")
    except Exception as e:
        print(f"DEBUG: Error loading documents: {e}")
        # N·∫øu b·∫£ng document_files ch∆∞a t·ªìn t·∫°i, tr·∫£ v·ªÅ danh s√°ch r·ªóng
        uploaded_documents = []
    
    # L·∫•y ghi ch√∫ c·ªßa gi√°o vi√™n
    teacher_notes = db.conn.execute("""
        SELECT sn.content, sn.note_type, sn.is_important, sn.created_at, 
               u.full_name as teacher_name, c.name as class_name
        FROM student_notes sn
        LEFT JOIN users u ON sn.teacher_id = u.id
        LEFT JOIN classes c ON sn.class_id = c.id
        WHERE sn.student_id = ?
        ORDER BY sn.created_at DESC
    """, (student_id,)).fetchall()
    
    # L·∫•y l·ªãch s·ª≠ l·ªõp h·ªçc chi ti·∫øt
    class_history = db.conn.execute("""
        SELECT c.name, c.academic_year, 
               sch.start_date, sch.end_date, sch.notes,
               u.full_name as teacher_name
        FROM student_class_history sch
        JOIN classes c ON sch.class_id = c.id
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE sch.student_id = ?
        UNION
        SELECT c.name, c.academic_year, 
               COALESCE(s.admission_date, 'Kh√¥ng r√µ') as start_date,
               'ƒêang h·ªçc' as end_date,
               'L·ªõp hi·ªán t·∫°i' as notes,
               u.full_name as teacher_name
        FROM students s
        JOIN classes c ON s.class_id = c.id
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE s.id = ? AND s.class_id IS NOT NULL
        ORDER BY start_date DESC
    """, (student_id, student_id)).fetchall()
    

    
    # T·∫°o document Word
    doc = Document()
    
    # Header
    header_para = doc.add_paragraph()
    header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    header_run = header_para.add_run("·ª¶Y BAN MTTQ VI·ªÜT NAM")
    header_run.bold = True
    header_para.add_run("\n(T√äN ƒê∆†N V·ªä B√ÅO C√ÅO)")
    
    header_para2 = doc.add_paragraph()
    header_para2.alignment = WD_ALIGN_PARAGRAPH.CENTER
    header_run2 = header_para2.add_run("C·ªòNG HO√Ä X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM")
    header_run2.bold = True
    header_para2.add_run("\nƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c")
    
    # Ng√†y th√°ng
    today = datetime.now()
    date_para = doc.add_paragraph()
    date_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    date_para.add_run(f"..., ng√†y {today.day} th√°ng {today.month} nƒÉm {today.year}")
    
    # Ti√™u ƒë·ªÅ ch√≠nh
    title_para = doc.add_paragraph()
    title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    title_run = title_para.add_run("B√ÅO C√ÅO T·ªîNG K·∫æT")
    title_run.bold = True
    
    subtitle_para = doc.add_paragraph()
    subtitle_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    subtitle_run = subtitle_para.add_run(f"C√îNG T√ÅC M·∫∂T TR·∫¨N NƒÇM {today.year}")
    subtitle_run.bold = True
    
    # Th√¥ng tin h·ªçc sinh
    doc.add_heading("TH√îNG TIN H·ªåC SINH", level=2)
    
    # T·∫°o b·∫£ng th√¥ng tin c∆° b·∫£n
    info_table = doc.add_table(rows=1, cols=2)
    info_table.style = 'Table Grid'
    
    # Th√¥ng tin c∆° b·∫£n - Fix field mapping based on actual database structure
    basic_info = [
        ("ID H·ªçc sinh", student_data[0]),
        ("H·ªç v√† t√™n", student_data[1]),
        ("Ng√†y sinh", student_data[2] or "Ch∆∞a c·∫≠p nh·∫≠t"),
        ("Gi·ªõi t√≠nh", student_data[8] or "Ch∆∞a c·∫≠p nh·∫≠t"),  # Fixed: index 8 for gender
        ("ƒê·ªãa ch·ªâ", student_data[3] or "Ch∆∞a c·∫≠p nh·∫≠t"),
        ("Email", student_data[4] or "Ch∆∞a c·∫≠p nh·∫≠t"),
        ("S·ªë ƒëi·ªán tho·∫°i", student_data[9] or "Ch∆∞a c·∫≠p nh·∫≠t"),  # Fixed: index 9 for phone
        ("Ph·ª• huynh", student_data[11] or "Ch∆∞a c·∫≠p nh·∫≠t"),  # Fixed: index 11 for parent_name
        ("Ng√†y nh·∫≠p h·ªçc", student_data[5] or "Ch∆∞a c·∫≠p nh·∫≠t"),
        ("NƒÉm h·ªçc", student_data[10] or "Ch∆∞a c·∫≠p nh·∫≠t"),  # Fixed: index 10 for year
        ("L·ªõp h·ªçc hi·ªán t·∫°i", student_data[-2] or "Ch∆∞a ph√¢n l·ªõp"),
        ("NƒÉm h·ªçc l·ªõp", student_data[-1] or "Ch∆∞a c·∫≠p nh·∫≠t"),
        ("S·ªë quy·∫øt ƒë·ªãnh", student_data[12] or "Ch∆∞a c·∫≠p nh·∫≠t"),
        ("Th√¥ng tin nh√† ch·ªØ T", student_data[13] or "Ch∆∞a c·∫≠p nh·∫≠t"),
        ("S·ª©c kh·ªèe khi v√†o l√†ng", student_data[14] or "Ch∆∞a c·∫≠p nh·∫≠t"),
        ("ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô khi v√†o l√†ng", student_data[15] or "Ch∆∞a c·∫≠p nh·∫≠t")
    ]
    
    for info_item in basic_info:
        row_cells = info_table.add_row().cells
        row_cells[0].text = info_item[0]
        row_cells[1].text = str(info_item[1])
    

    
    # L·ªãch s·ª≠ y t·∫ø (lu√¥n hi·ªÉn th·ªã section)
    doc.add_heading("L·ªäCH S·ª¨ Y T·∫æ", level=2)
    
    medical_table = doc.add_table(rows=1, cols=5)
    medical_table.style = 'Table Grid'
    
    # Header
    header_cells = medical_table.rows[0].cells
    header_cells[0].text = "Ng√†y kh√°m"
    header_cells[1].text = "Ch·∫©n ƒëo√°n"
    header_cells[2].text = "ƒêi·ªÅu tr·ªã"
    header_cells[3].text = "B√°c sƒ©"
    header_cells[4].text = "Ghi ch√∫"
    
    if medical_records:
        for record in medical_records:
            row_cells = medical_table.add_row().cells
            row_cells[0].text = str(record[0])[:10] if record[0] else ""  # Date only
            row_cells[1].text = str(record[1]) if record[1] else ""
            row_cells[2].text = str(record[2]) if record[2] else ""
            row_cells[3].text = str(record[3]) if record[3] else ""
            row_cells[4].text = str(record[4]) if record[4] else ""
    else:
        # Add empty row to show no medical records
        row_cells = medical_table.add_row().cells
        row_cells[0].text = "Ch∆∞a c√≥ l·ªãch s·ª≠ y t·∫ø"
        row_cells[1].text = ""
        row_cells[2].text = ""
        row_cells[3].text = ""
        row_cells[4].text = ""
    
    # Ghi ch√∫ v·ªÅ t√†i li·ªáu ƒë√≠nh k√®m (kh√¥ng nh√∫ng v√†o b√°o c√°o)
    if uploaded_documents:
        doc.add_heading("T√ÄI LI·ªÜU ƒê√çNH K√àM", level=2)
        doc.add_paragraph(f"H·ªçc sinh n√†y c√≥ {len(uploaded_documents)} t√†i li·ªáu ƒë√≠nh k√®m:")
        
        for i, doc_record in enumerate(uploaded_documents, 1):
            file_name = doc_record[0] or "Kh√¥ng t√™n"
            description = doc_record[1] or "Kh√¥ng c√≥ m√¥ t·∫£"
            upload_date = doc_record[2] or ""
            
            # Format upload date
            if upload_date:
                try:
                    if isinstance(upload_date, str):
                        parsed_date = datetime.strptime(upload_date, '%Y-%m-%d %H:%M:%S.%f')
                        upload_date = parsed_date.strftime('%d/%m/%Y')
                except:
                    pass
            
            # Th√™m th√¥ng tin file v√†o danh s√°ch
            doc.add_paragraph(f"{i}. {file_name} - {description} (Ng√†y t·∫£i: {upload_date})")
        
        doc.add_paragraph()
        note = doc.add_paragraph()
        note.add_run("üìå Ghi ch√∫: ").bold = True
        note.add_run("C√°c t√†i li·ªáu tr√™n ƒë∆∞·ª£c xu·∫•t ri√™ng c√πng v·ªõi b√°o c√°o n√†y. Vui l√≤ng ki·ªÉm tra c√°c file ƒë√≠nh k√®m.")
    else:
        doc.add_heading("T√ÄI LI·ªÜU ƒê√çNH K√àM", level=2)
        doc.add_paragraph("Ch∆∞a c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c t·∫£i l√™n cho h·ªçc sinh n√†y.")
    
    # L·ªãch s·ª≠ l·ªõp h·ªçc (lu√¥n hi·ªÉn th·ªã)
    doc.add_heading("L·ªäCH S·ª¨ L·ªöP H·ªåC", level=2)
    
    class_table = doc.add_table(rows=1, cols=6)
    class_table.style = 'Table Grid'
    
    # Header
    header_cells = class_table.rows[0].cells
    header_cells[0].text = "L·ªõp"
    header_cells[1].text = "NƒÉm h·ªçc"
    header_cells[2].text = "Ng√†y b·∫Øt ƒë·∫ßu"
    header_cells[3].text = "Ng√†y k·∫øt th√∫c"
    header_cells[4].text = "Gi√°o vi√™n"
    header_cells[5].text = "Ghi ch√∫"
    
    if class_history:
        for class_record in class_history:
            row_cells = class_table.add_row().cells
            row_cells[0].text = str(class_record[0]) if class_record[0] else ""
            row_cells[1].text = str(class_record[1]) if class_record[1] else ""
            row_cells[2].text = str(class_record[2]) if class_record[2] else ""
            row_cells[3].text = str(class_record[3]) if class_record[3] else "ƒêang h·ªçc"
            row_cells[4].text = str(class_record[5]) if len(class_record) > 5 and class_record[5] else ""
            row_cells[5].text = str(class_record[4]) if len(class_record) > 4 and class_record[4] else ""
    else:
        # Th√™m h√†ng tr·ªëng ƒë·ªÉ b√°o hi·ªáu ch∆∞a c√≥ l·ªãch s·ª≠
        row_cells = class_table.add_row().cells
        row_cells[0].text = "Ch∆∞a c√≥ th√¥ng tin l·ªõp h·ªçc"
        row_cells[1].text = ""
        row_cells[2].text = ""
        row_cells[3].text = ""
        row_cells[4].text = ""
        row_cells[5].text = ""

    # Ghi ch√∫ c·ªßa gi√°o vi√™n (lu√¥n hi·ªÉn th·ªã section)
    doc.add_heading("GHI CH√ö C·ª¶A GI√ÅO VI√äN", level=2)
    
    notes_table = doc.add_table(rows=1, cols=6)
    notes_table.style = 'Table Grid'
    
    # Header
    header_cells = notes_table.rows[0].cells
    header_cells[0].text = "Ng√†y ghi ch√∫"
    header_cells[1].text = "Lo·∫°i ghi ch√∫"
    header_cells[2].text = "M·ª©c ƒë·ªô"
    header_cells[3].text = "N·ªôi dung"
    header_cells[4].text = "Gi√°o vi√™n"
    header_cells[5].text = "L·ªõp"
    
    if teacher_notes:
        for note in teacher_notes:
            row_cells = notes_table.add_row().cells
            row_cells[0].text = str(note[3])[:10] if note[3] else ""  # created_at (date part)
            row_cells[1].text = str(note[1]) if note[1] else ""  # note_type
            row_cells[2].text = "Quan tr·ªçng" if note[2] else "B√¨nh th∆∞·ªùng"  # is_important
            row_cells[3].text = str(note[0]) if note[0] else ""  # content
            row_cells[4].text = str(note[4]) if note[4] else ""  # teacher_name
            row_cells[5].text = str(note[5]) if note[5] else ""  # class_name
    else:
        # Add empty row to show no teacher notes
        row_cells = notes_table.add_row().cells
        row_cells[0].text = "Ch∆∞a c√≥ ghi ch√∫ t·ª´ gi√°o vi√™n"
        row_cells[1].text = ""
        row_cells[2].text = ""
        row_cells[3].text = ""
        row_cells[4].text = ""
        row_cells[5].text = ""
    
    # This section is now handled earlier in the code with uploaded_documents
    
    # K·∫øt lu·∫≠n v√† ƒë√°nh gi√° t·ªïng quan (ƒë·ªÉ vi·∫øt tay)
    doc.add_heading("T√ìM T·∫ÆT V√Ä ƒê√ÅNH GI√Å T·ªîNG QUAN", level=2)
    
    summary_para = doc.add_paragraph()
    summary_para.add_run("ƒê√°nh gi√° v·ªÅ s·ª± ph√°t tri·ªÉn c·ªßa h·ªçc sinh:")
    summary_para.add_run("\n\n" + "_" * 80)
    summary_para.add_run("\n\n" + "_" * 80)
    summary_para.add_run("\n\n" + "_" * 80)
    summary_para.add_run("\n\n" + "_" * 80)
    summary_para.add_run("\n\n")
    
    summary_para.add_run("ƒê·ªÅ xu·∫•t h∆∞·ªõng d·∫´n ti·∫øp theo:")
    summary_para.add_run("\n\n" + "_" * 80)
    summary_para.add_run("\n\n" + "_" * 80)
    summary_para.add_run("\n\n" + "_" * 80)
    summary_para.add_run("\n\n")
    
    # K·∫øt lu·∫≠n th·ªëng k√™
    doc.add_heading("TH·ªêNG K√ä T·ªîNG QUAN", level=2)
    
    stats_para = doc.add_paragraph()
    stats_para.add_run("T√≥m t·∫Øt ho·∫°t ƒë·ªông v√† s·ªë li·ªáu quan tr·ªçng:")
    
    conclusion_list = doc.add_paragraph()
    conclusion_list.add_run(f"‚Ä¢ S·ª©c kh·ªèe khi v√†o l√†ng: {student_data[14] or 'Ch∆∞a ghi nh·∫≠n'}")
    conclusion_list.add_run(f"\n‚Ä¢ ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô khi v√†o l√†ng: {student_data[15] or 'Ch∆∞a ghi nh·∫≠n'}")
    
    # Th√™m t√≥m t·∫Øt ghi ch√∫ c·ªßa gi√°o vi√™n n·∫øu c√≥
    if teacher_notes:
        important_notes = [note for note in teacher_notes if note[2]]  # is_important = True
        if important_notes:
            conclusion_list.add_run(f"\n‚Ä¢ C√≥ {len(important_notes)} ghi ch√∫ quan tr·ªçng t·ª´ gi√°o vi√™n")
        conclusion_list.add_run(f"\n‚Ä¢ T·ªïng s·ªë ghi ch√∫ theo d√µi: {len(teacher_notes)}")
    
    # Th√™m t·ªïng k·∫øt y t·∫ø v√† t√†i li·ªáu
    if medical_records:
        conclusion_list.add_run(f"\n‚Ä¢ S·ªë l·∫ßn kh√°m y t·∫ø: {len(medical_records)}")
    if uploaded_documents:
        conclusion_list.add_run(f"\n‚Ä¢ T√†i li·ªáu ƒë√≠nh k√®m: {len(uploaded_documents)} file (xu·∫•t ri√™ng)")
    if class_history:
        conclusion_list.add_run(f"\n‚Ä¢ S·ªë l·ªõp ƒë√£ h·ªçc: {len(class_history)}")
    
    # Ch·ªØ k√Ω
    doc.add_paragraph("\n\n")
    signature_para = doc.add_paragraph()
    signature_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    signature_para.add_run("Ng∆∞·ªùi l·∫≠p b√°o c√°o")
    signature_para.add_run("\n\n\n")
    signature_para.add_run("(K√Ω t√™n v√† ƒë√≥ng d·∫•u)")
    
    # L∆∞u file Word
    output = BytesIO()
    doc.save(output)
    output.seek(0)
    
    # Tr·∫£ v·ªÅ c·∫£ b√°o c√°o Word v√† danh s√°ch t√†i li·ªáu ƒë√≠nh k√®m
    return output, uploaded_documents



def display_student_details(student, db):
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa h·ªçc sinh"""
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Hi·ªÉn th·ªã ·∫£nh h·ªçc sinh n·∫øu c√≥
        if student.profile_image:
            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† chuy·ªÉn ƒë·ªïi n·∫øu c·∫ßn
                if isinstance(student.profile_image, str):
                    st.warning(get_text('common.invalid_image', 'D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá'))
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
                else:
                    img_data = base64.b64encode(student.profile_image).decode()
                    st.markdown(
                        f'<img src="data:image/jpeg;base64,{img_data}" width="150" style="border-radius: 10px;">',
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.warning(f"{get_text('common.image_display_error', 'Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh')}: {str(e)}")
                st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
        else:
            st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
    
    with col2:
        col_a, col_b = st.columns(2)
        not_updated = get_text('common.not_updated', 'Ch∆∞a c·∫≠p nh·∫≠t')
        
        with col_a:
            st.markdown(f"**üÜî ID H·ªçc sinh:** {student.id}")
            st.markdown(f"**üéÇ {get_text('profile.birth_date', 'Ng√†y sinh')}:** {student.birth_date or not_updated}")
            st.markdown(f"**‚öß {get_text('profile.gender', 'Gi·ªõi t√≠nh')}:** {student.gender or not_updated}")
            st.markdown(f"**üì± {get_text('profile.phone', 'ƒêi·ªán tho·∫°i')}:** {student.phone or not_updated}")
            st.markdown(f"**üìç {get_text('profile.address', 'ƒê·ªãa ch·ªâ')}:** {student.address or not_updated}")
        
        with col_b:
            # L·∫•y th√¥ng tin l·ªõp h·ªçc n·∫øu c√≥
            class_info = get_text('profile.no_class', 'Ch∆∞a ph√¢n l·ªõp')
            if student.class_id:
                class_data = db.get_class(student.class_id)
                if class_data:
                    class_info = f"{class_data.name} ({class_data.academic_year})"
                    
            st.markdown(f"**üë®‚Äçüè´ {get_text('profile.class', 'L·ªõp')}:** {class_info}")
            st.markdown(f"**üìß {get_text('profile.email', 'Email')}:** {student.email or not_updated}")
            st.markdown(f"**üë™ {get_text('profile.parent', 'Ph·ª• huynh')}:** {student.parent_name or not_updated}")
            st.markdown(f"**üìÖ {get_text('profile.admission_date', 'Ng√†y nh·∫≠p h·ªçc')}:** {student.admission_date or not_updated}")
    
    # Hi·ªÉn th·ªã th√¥ng tin h√†nh ch√≠nh
    st.markdown(f"##### üèõÔ∏è Th√¥ng tin h√†nh ch√≠nh")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**üìã S·ªë quy·∫øt ƒë·ªãnh:** {getattr(student, 'decision_number', None) or not_updated}")
    
    with col2:
        st.markdown(f"**üèòÔ∏è Nh√†:** {getattr(student, 'nha_chu_t_info', None) or not_updated}")
    
    # Hi·ªÉn th·ªã th√¥ng tin y t·∫ø chi ti·∫øt
    st.markdown(f"##### üè• Th√¥ng tin y t·∫ø chi ti·∫øt")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**üíä S·ª©c kh·ªèe khi v√†o l√†ng:** {getattr(student, 'health_on_admission', None) or not_updated}")
        st.info("üí° **L∆∞u √Ω:** Th√¥ng tin chi ti·∫øt v·ªÅ h·ªì s∆° y t·∫ø ƒë∆∞·ª£c qu·∫£n l√Ω trong **trang Y t·∫ø**")
    
    with col2:
        st.markdown(f"**üîç ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô:** {getattr(student, 'initial_characteristics', None) or not_updated}")
    


def display_veteran_details(veteran, db):
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa c·ª±u chi·∫øn binh"""
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Hi·ªÉn th·ªã ·∫£nh c·ª±u chi·∫øn binh n·∫øu c√≥
        if veteran.profile_image:
            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† chuy·ªÉn ƒë·ªïi n·∫øu c·∫ßn
                if isinstance(veteran.profile_image, str):
                    st.warning(get_text('common.invalid_image', 'D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá'))
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
                else:
                    img_data = base64.b64encode(veteran.profile_image).decode()
                    st.markdown(
                        f'<img src="data:image/jpeg;base64,{img_data}" width="150" style="border-radius: 10px;">',
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.warning(f"{get_text('common.image_display_error', 'Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh')}: {str(e)}")
                st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
        else:
            st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
    
    with col2:
        col_a, col_b = st.columns(2)
        not_updated = get_text('common.not_updated', 'Ch∆∞a c·∫≠p nh·∫≠t')
        
        with col_a:
            st.markdown(f"**üÜî ID B·ªánh nh√¢n:** {veteran.id}")
            st.markdown(f"**üéÇ {get_text('profile.birth_date', 'Ng√†y sinh')}:** {veteran.birth_date or not_updated}")
            st.markdown(f"**üèÖ {get_text('profile.service_period', 'Th·ªùi gian ph·ª•c v·ª•')}:** {veteran.service_period or not_updated}")
            st.markdown(f"**üìç {get_text('profile.address', 'ƒê·ªãa ch·ªâ')}:** {veteran.address or not_updated}")
        
        with col_b:
            st.markdown(f"**üìß {get_text('profile.email', 'Email')}:** {veteran.email or not_updated}")
            st.markdown(f"**üìû {get_text('profile.contact', 'Li√™n h·ªá')}:** {veteran.contact_info or not_updated}")
            st.markdown(f"**üè• S·ª©c kh·ªèe:** {veteran.health_condition or not_updated}")

def handle_student_edit(student, db):
    """X·ª≠ l√Ω ch·ªânh s·ª≠a th√¥ng tin h·ªçc sinh"""
    # Th√™m n√∫t ƒë√≥ng ·ªü ƒë·∫ßu form
    col_header1, col_header2 = st.columns([4, 1])
    with col_header1:
        st.subheader(f"‚úèÔ∏è {get_text('profile.edit_information', 'Ch·ªânh s·ª≠a th√¥ng tin')}")
    with col_header2:
        if st.button("‚ùå ƒê√≥ng", key=f"close_edit_{student.id}", help="ƒê√≥ng form ch·ªânh s·ª≠a"):
            del st.session_state.edit_student_id
            st.rerun()
    
    # Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i v√† t√πy ch·ªçn t·∫£i l√™n ·∫£nh m·ªõi
    uploaded_image = None
    col_img1, col_img2 = st.columns([1, 2])
    
    with col_img1:
        # Hi·ªÉn th·ªã ·∫£nh h·ªçc sinh n·∫øu c√≥
        if student.profile_image:
            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† chuy·ªÉn ƒë·ªïi n·∫øu c·∫ßn
                if isinstance(student.profile_image, str):
                    st.warning("D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá")
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
                else:
                    img_data = base64.b64encode(student.profile_image).decode()
                    st.markdown(
                        f'<img src="data:image/jpeg;base64,{img_data}" width="150" style="border-radius: 10px;">',
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh: {str(e)}")
                st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
        else:
            st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
    
    with col_img2:
        # T·∫£i l√™n ·∫£nh m·ªõi
        uploaded_image = st.file_uploader(get_text("profile.upload_new_image", "T·∫£i l√™n ·∫£nh m·ªõi"), type=["jpg", "jpeg", "png"])
        if uploaded_image is not None:
            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
            st.image(uploaded_image, width=200)
            
            # L∆∞u ·∫£nh v√†o c∆° s·ªü d·ªØ li·ªáu khi nh·∫•n n√∫t
            if st.button(get_text("profile.save_image", "L∆∞u ·∫£nh"), key="save_student_image"):
                try:
                    # ƒê·ªçc d·ªØ li·ªáu ·∫£nh
                    image_bytes = uploaded_image.getvalue()
                    # L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
                    if db.save_student_image(student.id, image_bytes):
                        show_success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng!")
                        st.rerun()  # Reload ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh m·ªõi
                    else:
                        show_error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh")
                except Exception as e:
                    show_error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ·∫£nh: {str(e)}")
    
    # T·∫°o form ch·ªânh s·ª≠a
    with st.form("edit_student_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            full_name = st.text_input(get_text("profile.full_name", "H·ªç v√† t√™n"), value=student.full_name)
            birth_date = st.text_input(get_text("profile.birth_date", "Ng√†y sinh"), value=student.birth_date or "", 
                                      help=get_text("profile.date_format_help", "ƒê·ªãnh d·∫°ng: YYYY-MM-DD"))
            gender = st.selectbox(get_text("profile.gender", "Gi·ªõi t√≠nh"), 
                                options=[get_text("gender.male", "Nam"), get_text("gender.female", "N·ªØ"), get_text("gender.other", "Kh√°c")],
                                index=[get_text("gender.male", "Nam"), get_text("gender.female", "N·ªØ"), get_text("gender.other", "Kh√°c")].index(student.gender) if student.gender in [get_text("gender.male", "Nam"), get_text("gender.female", "N·ªØ"), get_text("gender.other", "Kh√°c")] else 0)
            phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value=student.phone or "")
            address = st.text_input("ƒê·ªãa ch·ªâ", value=student.address or "")
        
        with col2:
            email = st.text_input("Email", value=student.email or "")
            parent_name = st.text_input("Ph·ª• huynh", value=student.parent_name or "")
            year = st.text_input("NƒÉm h·ªçc", value=student.year or "")
            
            # L·∫•y danh s√°ch l·ªõp h·ªçc
            classes = db.get_classes()
            class_options = [(0, "Kh√¥ng ph√¢n l·ªõp")] + [(c.id, f"{c.name} ({c.academic_year})") for c in classes]
            
            # T√¨m v·ªã tr√≠ c·ªßa l·ªõp h·ªçc hi·ªán t·∫°i trong danh s√°ch
            selected_index = 0
            for i, (class_id, _) in enumerate(class_options):
                if student.class_id == class_id:
                    selected_index = i
                    break
            
            class_id = st.selectbox(
                "L·ªõp", 
                options=range(len(class_options)),
                format_func=lambda i: class_options[i][1],
                index=selected_index
            )
            class_id = class_options[class_id][0] if class_id is not None else None
            
            # Convert class_id = 0 to None
            if class_id == 0:
                class_id = None
            
            # ƒê·ªïi ƒë·ªãnh d·∫°ng ng√†y nh·∫≠p h·ªçc t·ª´ text sang date_input
            admission_date = None
            try:
                if student.admission_date:
                    admission_date = datetime.strptime(student.admission_date, "%Y-%m-%d").date()
            except:
                pass
            
            admission_date = st.date_input("Ng√†y nh·∫≠p h·ªçc", value=admission_date or datetime.now().date())
        
        # Th√¥ng tin h√†nh ch√≠nh
        st.subheader("üèõÔ∏è Th√¥ng tin h√†nh ch√≠nh")
        col1, col2 = st.columns(2)
        
        with col1:
            decision_number = st.text_input("S·ªë quy·∫øt ƒë·ªãnh", value=getattr(student, 'decision_number', '') or "")
        
        with col2:
            nha_chu_t_info = st.text_input("Nh√†", value=getattr(student, 'nha_chu_t_info', '') or "")
        
        # Th√¥ng tin y t·∫ø chi ti·∫øt
        st.subheader("üè• Th√¥ng tin y t·∫ø chi ti·∫øt")
        col1, col2 = st.columns(2)
        
        with col1:
            health_on_admission = st.text_area("S·ª©c kh·ªèe khi v√†o l√†ng", value=getattr(student, 'health_on_admission', '') or "")
        
        with col2:
            initial_characteristics = st.text_area("ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô khi v√†o l√†ng", value=getattr(student, 'initial_characteristics', '') or "", 
                                                  help="M√¥ t·∫£ ƒë·∫∑c ƒëi·ªÉm v√† t√¨nh tr·∫°ng ban ƒë·∫ßu c·ªßa b·ªánh nh√¢n khi v√†o l√†ng")
        

            
        if st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi"):
            student_data = {
                "full_name": full_name,
                "birth_date": birth_date,
                "gender": gender,
                "phone": phone,
                "address": address,
                "email": email,
                "parent_name": parent_name,
                "year": year,
                "admission_date": admission_date.strftime("%Y-%m-%d"),
                "class_id": class_id,
                "decision_number": decision_number,
                "nha_chu_t_info": nha_chu_t_info,
                "health_on_admission": health_on_admission,
                "initial_characteristics": initial_characteristics
            }
            
            try:
                if db.update_student(student.id, student_data):
                    # Ghi nh·∫≠n l·ªãch s·ª≠ thay ƒë·ªïi l·ªõp h·ªçc n·∫øu l·ªõp h·ªçc thay ƒë·ªïi
                    if student.class_id != class_id:
                        db.update_student_class(student.id, class_id)
                    
                    show_success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh th√†nh c√¥ng!")
                    st.rerun()
                else:
                    show_error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh")
            except Exception as e:
                show_error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {str(e)}")

def handle_veteran_edit(veteran, db):
    """X·ª≠ l√Ω ch·ªânh s·ª≠a th√¥ng tin c·ª±u chi·∫øn binh"""
    st.subheader("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin")
    
    # Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i v√† t√πy ch·ªçn t·∫£i l√™n ·∫£nh m·ªõi
    uploaded_image = None
    col_img1, col_img2 = st.columns([1, 2])
    
    with col_img1:
        # Hi·ªÉn th·ªã ·∫£nh c·ª±u chi·∫øn binh n·∫øu c√≥
        if veteran.profile_image:
            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† chuy·ªÉn ƒë·ªïi n·∫øu c·∫ßn
                if isinstance(veteran.profile_image, str):
                    st.warning("D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá")
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
                else:
                    img_data = base64.b64encode(veteran.profile_image).decode()
                    st.markdown(
                        f'<img src="data:image/jpeg;base64,{img_data}" width="150" style="border-radius: 10px;">',
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh: {str(e)}")
                st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
        else:
            st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
    
    with col_img2:
        # T·∫£i l√™n ·∫£nh m·ªõi
        uploaded_image = st.file_uploader(get_text("profile.upload_new_image", "T·∫£i l√™n ·∫£nh m·ªõi"), type=["jpg", "jpeg", "png"], key="upload_veteran_image")
        if uploaded_image is not None:
            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
            st.image(uploaded_image, width=200)
            
            # L∆∞u ·∫£nh v√†o c∆° s·ªü d·ªØ li·ªáu khi nh·∫•n n√∫t
            if st.button(get_text("profile.save_image", "L∆∞u ·∫£nh"), key="save_veteran_image"):
                try:
                    # ƒê·ªçc d·ªØ li·ªáu ·∫£nh
                    image_bytes = uploaded_image.getvalue()
                    # L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
                    if db.save_veteran_image(veteran.id, image_bytes):
                        show_success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng!")
                        st.rerun()  # Reload ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh m·ªõi
                    else:
                        show_error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh")
                except Exception as e:
                    show_error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ·∫£nh: {str(e)}")
    
    # T·∫°o form ch·ªânh s·ª≠a
    with st.form("edit_veteran_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            full_name = st.text_input("H·ªç v√† t√™n", value=veteran.full_name)
            birth_date = st.text_input("Ng√†y sinh", value=veteran.birth_date or "", 
                                      help="ƒê·ªãnh d·∫°ng: YYYY-MM-DD")
            service_period = st.text_input("Th·ªùi gian ph·ª•c v·ª•", value=veteran.service_period or "")
            address = st.text_input("ƒê·ªãa ch·ªâ", value=veteran.address or "")
        
        with col2:
            health_condition = st.text_input("S·ª©c kh·ªèe", value=veteran.health_condition or "")
            email = st.text_input("Email", value=veteran.email or "")
            contact_info = st.text_input("Th√¥ng tin li√™n h·ªá", value=veteran.contact_info or "")
            
        # ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô
        st.subheader("üìã ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô")
        initial_characteristics = st.text_area("ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô khi v√†o l√†ng", 
                                              value=getattr(veteran, 'initial_characteristics', '') or "",
                                              help="M√¥ t·∫£ ƒë·∫∑c ƒëi·ªÉm v√† t√¨nh tr·∫°ng ban ƒë·∫ßu c·ªßa c·ª±u chi·∫øn binh khi v√†o l√†ng")
            
        if st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi"):
            veteran_data = {
                "full_name": full_name,
                "birth_date": birth_date,
                "service_period": service_period,
                "address": address,
                "health_condition": health_condition,
                "email": email,
                "contact_info": contact_info,
                "initial_characteristics": initial_characteristics
            }
            
            try:
                if db.update_veteran(veteran.id, veteran_data):
                    show_success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin c·ª±u chi·∫øn binh th√†nh c√¥ng!")
                    st.rerun()
                else:
                    show_error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ª±u chi·∫øn binh")
            except Exception as e:
                show_error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {str(e)}")

def add_new_student(db):
    """Th√™m h·ªçc sinh m·ªõi"""
    st.subheader("‚ûï Th√™m h·ªçc sinh m·ªõi")
    
    # T·∫£i l√™n ·∫£nh cho h·ªçc sinh m·ªõi
    uploaded_image = st.file_uploader("T·∫£i l√™n ·∫£nh h·ªçc sinh", type=["jpg", "jpeg", "png"], key="upload_new_student_image")
    if uploaded_image is not None:
        st.image(uploaded_image, width=200)
        st.info("·∫¢nh s·∫Ω ƒë∆∞·ª£c l∆∞u sau khi b·∫°n th√™m h·ªçc sinh")
    
    with st.form("add_student_form"):
        # Th√¥ng tin c∆° b·∫£n
        col1, col2 = st.columns(2)
        with col1:
            full_name = st.text_input("H·ªç v√† t√™n", key="add_full_name")
            birth_date = st.text_input("Ng√†y sinh", key="add_birth_place", 
                                     help="ƒê·ªãnh d·∫°ng: YYYY-MM-DD")
            gender = st.selectbox("Gi·ªõi t√≠nh", ["Nam", "N·ªØ", "Kh√°c"], key="add_gender")
            phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", key="add_phone")
            address = st.text_input("ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫", key="add_address")
        
        with col2:
            email = st.text_input("Email", key="add_email")
            parent_name = st.text_input("Ph·ª• huynh", key="add_parent_name")
            year = st.text_input("NƒÉm h·ªçc", key="add_year")
            admission_date = st.date_input("Ng√†y nh·∫≠p h·ªçc", key="add_admission_date")

            # L·∫•y danh s√°ch l·ªõp h·ªçc
            classes = db.get_classes()
            class_options = [(0, "Kh√¥ng ph√¢n l·ªõp")] + [(c.id, f"{c.name} ({c.academic_year})") for c in classes]
            
            class_id = st.selectbox(
                "L·ªõp",
                options=range(len(class_options)),
                format_func=lambda i: class_options[i][1],
                key="add_class_id"
            )
            class_id = class_options[class_id][0] if class_id is not None else None
            
            # Convert class_id = 0 to None
            if class_id == 0:
                class_id = None

        # Th√¥ng tin h√†nh ch√≠nh
        st.subheader("üèõÔ∏è Th√¥ng tin h√†nh ch√≠nh")
        col1, col2 = st.columns(2)
        
        with col1:
            decision_number = st.text_input(
                "S·ªë quy·∫øt ƒë·ªãnh",
                key="add_decision_number",
                help="S·ªë quy·∫øt ƒë·ªãnh nh·∫≠p h·ªçc"
            )
        
        with col2:
            nha_chu_t_info = st.text_area(
                "Nh√†",
                key="add_nha_chu_t_info",
                help="Th√¥ng tin li√™n quan ƒë·∫øn nh√† ch·ªØ T"
            )

        # T√¨nh tr·∫°ng y t·∫ø m·ªü r·ªông
        st.subheader("üè• Th√¥ng tin y t·∫ø chi ti·∫øt")
        col1, col2 = st.columns(2)
        
        with col1:
            health_on_admission = st.text_area(
                "T√¨nh tr·∫°ng s·ª©c kh·ªèe khi v√†o l√†ng",
                key="add_health_on_admission",
                help="M√¥ t·∫£ t√¨nh tr·∫°ng s·ª©c kh·ªèe ban ƒë·∫ßu khi nh·∫≠p h·ªçc"
            )
        
        with col2:
            initial_characteristics = st.text_area(
                "ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô khi v√†o l√†ng",
                key="add_initial_characteristics",
                help="M√¥ t·∫£ ƒë·∫∑c ƒëi·ªÉm v√† t√¨nh tr·∫°ng ban ƒë·∫ßu c·ªßa b·ªánh nh√¢n khi v√†o l√†ng"
            )



        if st.form_submit_button("Th√™m h·ªçc sinh"):
            student_data = {
                "full_name": full_name,
                "birth_date": birth_date,
                "gender": gender,
                "phone": phone,
                "address": address,
                "email": email,
                "parent_name": parent_name,
                "year": year,
                "admission_date": admission_date.strftime("%Y-%m-%d"),

                "class_id": class_id,
                "decision_number": decision_number,
                "nha_chu_t_info": nha_chu_t_info,
                "health_on_admission": health_on_admission,
                "initial_characteristics": initial_characteristics
            }
            
            if not full_name:
                show_error("Vui l√≤ng nh·∫≠p h·ªç v√† t√™n h·ªçc sinh")
            else:
                try:
                    student_id = db.add_student(student_data)
                    if student_id:
                        # N·∫øu c√≥ l·ªõp h·ªçc, c·∫≠p nh·∫≠t l·ªãch s·ª≠ l·ªõp h·ªçc
                        if class_id:
                            db.update_student_class(student_id, class_id)
                        
                        # N·∫øu c√≥ t·∫£i l√™n ·∫£nh, l∆∞u ·∫£nh v√†o c∆° s·ªü d·ªØ li·ªáu
                        if 'upload_new_student_image' in st.session_state and st.session_state.upload_new_student_image is not None:
                            uploaded_image = st.session_state.upload_new_student_image
                            image_bytes = uploaded_image.getvalue()
                            if db.save_student_image(student_id, image_bytes):
                                show_success(f"ƒê√£ th√™m h·ªçc sinh {full_name} v√† l∆∞u ·∫£nh th√†nh c√¥ng!")
                            else:
                                show_success(f"ƒê√£ th√™m h·ªçc sinh {full_name} th√†nh c√¥ng, nh∆∞ng kh√¥ng th·ªÉ l∆∞u ·∫£nh!")
                        else:
                            show_success(f"ƒê√£ th√™m h·ªçc sinh {full_name} th√†nh c√¥ng!")
                            
                        st.rerun()
                    else:
                        show_error("Kh√¥ng th·ªÉ th√™m h·ªçc sinh")
                except Exception as e:
                    show_error(f"L·ªói khi th√™m h·ªçc sinh: {str(e)}")

def add_new_veteran(db):
    """Th√™m c·ª±u chi·∫øn binh m·ªõi"""
    st.subheader("‚ûï Th√™m c·ª±u chi·∫øn binh m·ªõi")
    
    # T·∫£i l√™n ·∫£nh cho c·ª±u chi·∫øn binh m·ªõi
    uploaded_image = st.file_uploader("T·∫£i l√™n ·∫£nh c·ª±u chi·∫øn binh", type=["jpg", "jpeg", "png"], key="upload_new_veteran_image")
    if uploaded_image is not None:
        st.image(uploaded_image, width=200)
        st.info("·∫¢nh s·∫Ω ƒë∆∞·ª£c l∆∞u sau khi b·∫°n th√™m c·ª±u chi·∫øn binh")
    
    with st.form("add_veteran_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            full_name = st.text_input("H·ªç v√† t√™n", key="add_vet_name")
            birth_date = st.text_input("Ng√†y sinh", key="add_vet_birth", 
                                     help="ƒê·ªãnh d·∫°ng: YYYY-MM-DD")
            service_period = st.text_input("Th·ªùi gian ph·ª•c v·ª•", key="add_vet_service")
            address = st.text_input("ƒê·ªãa ch·ªâ", key="add_vet_address")
        
        with col2:
            health_condition = st.text_input("S·ª©c kh·ªèe", key="add_vet_health")
            email = st.text_input("Email", key="add_vet_email")
            contact_info = st.text_input("Th√¥ng tin li√™n h·ªá", key="add_vet_contact")
            
        # ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô
        st.subheader("üìã ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô")
        initial_characteristics = st.text_area("ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô khi v√†o l√†ng", 
                                              key="add_vet_initial_characteristics",
                                              help="M√¥ t·∫£ ƒë·∫∑c ƒëi·ªÉm v√† t√¨nh tr·∫°ng ban ƒë·∫ßu c·ªßa c·ª±u chi·∫øn binh khi v√†o l√†ng")
            
        if st.form_submit_button("Th√™m c·ª±u chi·∫øn binh"):
            if not full_name:
                show_error("Vui l√≤ng nh·∫≠p h·ªç v√† t√™n")
            else:
                veteran_data = {
                    "full_name": full_name,
                    "birth_date": birth_date,
                    "service_period": service_period,
                    "address": address,
                    "health_condition": health_condition,
                    "email": email,
                    "contact_info": contact_info,
                    "initial_characteristics": initial_characteristics
                }
                
                try:
                    veteran_id = db.add_veteran(veteran_data)
                    if veteran_id:
                        # N·∫øu c√≥ t·∫£i l√™n ·∫£nh, l∆∞u ·∫£nh v√†o c∆° s·ªü d·ªØ li·ªáu
                        if 'upload_new_veteran_image' in st.session_state and st.session_state.upload_new_veteran_image is not None:
                            uploaded_image = st.session_state.upload_new_veteran_image
                            image_bytes = uploaded_image.getvalue()
                            if db.save_veteran_image(veteran_id, image_bytes):
                                show_success(f"ƒê√£ th√™m c·ª±u chi·∫øn binh {full_name} v√† l∆∞u ·∫£nh th√†nh c√¥ng!")
                            else:
                                show_success(f"ƒê√£ th√™m c·ª±u chi·∫øn binh {full_name} th√†nh c√¥ng, nh∆∞ng kh√¥ng th·ªÉ l∆∞u ·∫£nh!")
                        else:
                            show_success(f"ƒê√£ th√™m c·ª±u chi·∫øn binh {full_name} th√†nh c√¥ng!")
                            
                        st.rerun()
                    else:
                        show_error("Kh√¥ng th·ªÉ th√™m c·ª±u chi·∫øn binh")
                except Exception as e:
                    show_error(f"L·ªói khi th√™m c·ª±u chi·∫øn binh: {str(e)}")

def render():
    # Initialize authentication first
    init_auth()
    
    # Apply theme from session state
    # apply_theme()  # Disabled - using Streamlit defaults
    
    # Set current page for role checking
    st.session_state.current_page = "02_Qu·∫£n_l√Ω_h·ªì_s∆°"
    
    check_auth()
    
    # Check if user has access to this page dynamically
    if not check_page_access('02_Qu·∫£n_l√Ω_h·ªì_s∆°'):
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.")
        st.stop()
        return
    
    db = Database()
    
    st.title(f"üë• {get_text('profile.title', 'Qu·∫£n L√Ω H·ªì S∆°')}")
    
    # T·∫°o tabs ch√≠nh cho qu·∫£n l√Ω h·ªì s∆°, t√†i li·ªáu, th·ªëng k√™ v√† xu·∫•t d·ªØ li·ªáu
    main_tabs = st.tabs([
        "üë• Qu·∫£n l√Ω h·ªì s∆°",
        "üìÅ Qu·∫£n l√Ω t√†i li·ªáu",
        "üìä Th·ªëng k√™ v√† b√°o c√°o", 
        "üì§ Xu·∫•t d·ªØ li·ªáu"
    ])
    
    with main_tabs[0]:
        # T·∫°o tabs cho h·ªçc sinh v√† c·ª±u chi·∫øn binh
        entity_type = st.radio(
            get_text('profile.select_type', 'Ch·ªçn lo·∫°i h·ªì s∆°'), 
            [get_text('common.student', 'H·ªçc sinh'), get_text('common.veteran', 'C·ª±u chi·∫øn binh')], 
            horizontal=True
        )
        
        # Th√™m t√¨m ki·∫øm n√¢ng cao v·ªõi dropdown
        with st.expander("üîç T√¨m ki·∫øm n√¢ng cao", expanded=False):
            if entity_type == get_text('common.student', 'H·ªçc sinh'):
                render_student_advanced_search(db)
            else:
                render_veteran_advanced_search(db)
        
        if entity_type == get_text('common.student', 'H·ªçc sinh'):
            student_tabs = st.tabs([
                f"üîç {get_text('common.list', 'Danh s√°ch')}", 
                f"‚ûï {get_text('common.add_new', 'Th√™m m·ªõi')}"
            ])
            
            with student_tabs[0]:
                st.subheader(f"üìã {get_text('profile.student_list', 'Danh s√°ch h·ªçc sinh')}")
                
                # Th√™m √¥ t√¨m ki·∫øm
                search_query = st.text_input(
                    f"üîç {get_text('common.search_by_name', 'T√¨m ki·∫øm theo t√™n')}", 
                    key="search_student"
                )
                
                # L·∫•y danh s√°ch h·ªçc sinh
                students = db.get_students()
                
                # L·ªçc h·ªçc sinh theo t√¨m ki·∫øm n·∫øu c√≥
                if search_query:
                    search_query = search_query.lower()
                    students = [s for s in students if search_query in s.full_name.lower()]
                
                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng h·ªçc sinh
                st.info(f"üìä {get_text('common.total', 'T·ªïng s·ªë')}: {len(students)} {get_text('common.student', 'h·ªçc sinh')}")
                
                # Hi·ªÉn th·ªã danh s√°ch h·ªçc sinh trong c√°c expanders
                for student in students:
                    # Ki·ªÉm tra n·∫øu ƒëang ch·ªânh s·ª≠a h·ªçc sinh n√†y
                    is_editing = 'edit_student_id' in st.session_state and st.session_state.edit_student_id == student.id
                    
                    with st.expander(f"üë®‚Äçüéì {student.full_name}" + (" ‚úèÔ∏è (ƒêang ch·ªânh s·ª≠a)" if is_editing else ""), expanded=is_editing):
                        # Th√¥ng tin chi ti·∫øt h·ªçc sinh
                        display_student_details(student, db)
                        
                        # N√∫t ch·ªânh s·ª≠a v√† xu·∫•t b√°o c√°o
                        col1, col2 = st.columns(2)
                        with col1:
                            if can_edit_student_info():
                                if not is_editing:
                                    if st.button(f"‚úèÔ∏è {get_text('common.edit', 'Ch·ªânh s·ª≠a')}", key=f"edit_student_{student.id}"):
                                        st.session_state.edit_student_id = student.id
                                        st.rerun()
                                else:
                                    if st.button(f"‚ùå {get_text('common.cancel_edit', 'H·ªßy ch·ªânh s·ª≠a')}", key=f"cancel_edit_{student.id}"):
                                        del st.session_state.edit_student_id
                                        st.rerun()
                        
                        with col2:
                            if st.button("üìÑ Xu·∫•t b√°o c√°o Word", key=f"export_report_{student.id}"):
                                try:
                                    word_file, documents = export_student_comprehensive_report(db, student.id)
                                    if word_file:
                                        st.success("B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                        
                                        # T·∫£i xu·ªëng b√°o c√°o Word
                                        st.download_button(
                                            label="üì• T·∫£i xu·ªëng b√°o c√°o Word",
                                            data=word_file,
                                            file_name=f"bao_cao_tong_ket_{student.full_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.docx",
                                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                            key=f"download_report_{student.id}"
                                        )
                                        
                                        # Xu·∫•t t√†i li·ªáu ƒë√≠nh k√®m n·∫øu c√≥
                                        if documents:
                                            st.info(f"üìé T√¨m th·∫•y {len(documents)} t√†i li·ªáu ƒë√≠nh k√®m. T·∫£i xu·ªëng t·ª´ng file:")
                                            
                                            # T·∫°o c·ªôt ƒë·ªÉ hi·ªÉn th·ªã c√°c n√∫t t·∫£i xu·ªëng t√†i li·ªáu
                                            cols = st.columns(min(len(documents), 3))
                                            for i, doc in enumerate(documents):
                                                col_idx = i % 3
                                                with cols[col_idx]:
                                                    file_name = doc[0] or "unknown_file"
                                                    file_data = doc[5]  # file_data BLOB
                                                    file_type = doc[4] or ""
                                                    
                                                    # T·∫°o mime type t·ª´ file type
                                                    mime_type = "application/octet-stream"
                                                    if file_type:
                                                        if "pdf" in file_type.lower():
                                                            mime_type = "application/pdf"
                                                        elif "word" in file_type.lower() or "docx" in file_type.lower():
                                                            mime_type = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                                        elif "excel" in file_type.lower() or "xlsx" in file_type.lower():
                                                            mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                                        elif "image" in file_type.lower() or any(ext in file_type.lower() for ext in ['jpg', 'jpeg', 'png', 'gif']):
                                                            mime_type = file_type
                                                    
                                                    st.download_button(
                                                        label=f"üìé {file_name}",
                                                        data=file_data,
                                                        file_name=file_name,
                                                        mime=mime_type,
                                                        key=f"download_doc_{student.id}_{i}",
                                                        help=f"T·∫£i xu·ªëng: {doc[1] or 'Kh√¥ng c√≥ m√¥ t·∫£'}"
                                                    )
                                        else:
                                            st.info("üìù B√°o c√°o kh√¥ng c√≥ t√†i li·ªáu ƒë√≠nh k√®m")
                                    else:
                                        show_error("Kh√¥ng th·ªÉ t·∫°o b√°o c√°o")
                                except Exception as e:
                                    show_error(f"L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
                        
                        # Hi·ªÉn th·ªã form ch·ªânh s·ª≠a ngay trong expander n·∫øu ƒëang ch·ªânh s·ª≠a
                        if is_editing:
                            st.divider()
                            handle_student_edit(student, db)
        
            with student_tabs[1]:
                # Ki·ªÉm tra quy·ªÅn th√™m h·ªçc sinh m·ªõi
                if can_edit_student_info():
                    add_new_student(db)
                else:
                    st.warning(get_text("profile.student_add_permission_denied", "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m h·ªçc sinh m·ªõi"))
    
        else:  # C·ª±u chi·∫øn binh
            veteran_tabs = st.tabs([
                f"üîç {get_text('common.list', 'Danh s√°ch')}", 
                f"‚ûï {get_text('common.add_new', 'Th√™m m·ªõi')}"
            ])
            
            with veteran_tabs[0]:
                st.subheader(f"üìã {get_text('profile.veteran_list', 'Danh s√°ch c·ª±u chi·∫øn binh')}")
            
            # Th√™m √¥ t√¨m ki·∫øm
            search_query = st.text_input(
                f"üîç {get_text('common.search_by_name', 'T√¨m ki·∫øm theo t√™n')}", 
                key="search_veteran"
            )
            
            # L·∫•y danh s√°ch c·ª±u chi·∫øn binh
            veterans = db.get_veterans()
            
            # L·ªçc c·ª±u chi·∫øn binh theo t√¨m ki·∫øm n·∫øu c√≥
            if search_query:
                search_query = search_query.lower()
                veterans = [v for v in veterans if search_query in v.full_name.lower()]
            
            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng c·ª±u chi·∫øn binh
            st.info(f"üìä {get_text('common.total', 'T·ªïng s·ªë')}: {len(veterans)} {get_text('common.veteran', 'c·ª±u chi·∫øn binh')}")
            
            # Hi·ªÉn th·ªã danh s√°ch c·ª±u chi·∫øn binh trong c√°c expanders
            for veteran in veterans:
                with st.expander(f"üéñÔ∏è {veteran.full_name}"):
                    # Th√¥ng tin chi ti·∫øt c·ª±u chi·∫øn binh
                    display_veteran_details(veteran, db)
                    
                    # N√∫t ch·ªânh s·ª≠a
                    if can_edit_veteran_info():
                        if st.button(f"‚úèÔ∏è {get_text('common.edit', 'Ch·ªânh s·ª≠a')}", key=f"edit_veteran_{veteran.id}"):
                            st.session_state.edit_veteran_id = veteran.id
                            st.rerun()
            
            # Hi·ªÉn th·ªã form ch·ªânh s·ª≠a n·∫øu ƒë√£ ch·ªçn c·ª±u chi·∫øn binh
            if hasattr(st.session_state, 'edit_veteran_id'):
                for veteran in veterans:
                    if veteran.id == st.session_state.edit_veteran_id:
                        handle_veteran_edit(veteran, db)
                        break
                
                # N√∫t h·ªßy ch·ªânh s·ª≠a
                if st.button(f"‚ùå {get_text('common.cancel_edit', 'H·ªßy ch·ªânh s·ª≠a')}", key="cancel_veteran_edit"):
                    del st.session_state.edit_veteran_id
                    st.rerun()
        
            with veteran_tabs[1]:
                # Ki·ªÉm tra quy·ªÅn th√™m c·ª±u chi·∫øn binh m·ªõi
                if can_edit_veteran_info():
                    add_new_veteran(db)
                else:
                    st.warning(get_text("profile.veteran_add_permission_denied", "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m c·ª±u chi·∫øn binh m·ªõi"))
    
    with main_tabs[1]:
        # Qu·∫£n l√Ω t√†i li·ªáu
        render_document_management_section(db)
    
    with main_tabs[2]:
        # Th·ªëng k√™ v√† b√°o c√°o
        render_statistics_section(db)
    
    with main_tabs[3]:
        # Xu·∫•t d·ªØ li·ªáu
        render_export_section(db)

def render_statistics_section(db):
    """Render statistics and analytics section"""
    st.subheader("üìä Th·ªëng k√™ v√† ph√¢n t√≠ch d·ªØ li·ªáu")
    
    # Import required modules
    import plotly.express as px
    import plotly.graph_objects as go
    from datetime import datetime, timedelta
    
    # Overview statistics
    col1, col2, col3, col4 = st.columns(4)
    
    total_students = len(db.get_students())
    total_veterans = len(db.get_veterans())
    
    medical_records = db.conn.execute("SELECT COUNT(*) FROM medical_records").fetchone()[0]
    psych_evals = db.conn.execute("SELECT COUNT(*) FROM psychological_evaluations").fetchone()[0]
    
    with col1:
        st.metric("T·ªïng s·ªë h·ªçc sinh", total_students)
    with col2:
        st.metric("T·ªïng s·ªë c·ª±u chi·∫øn binh", total_veterans)
    with col3:
        st.metric("S·ªë h·ªì s∆° y t·∫ø", medical_records)
    with col4:
        st.metric("S·ªë ƒë√°nh gi√° t√¢m l√Ω", psych_evals)
    
    # Charts section
    st.subheader("üìà Bi·ªÉu ƒë·ªì th·ªëng k√™")
    
    chart_tabs = st.tabs([
        "üìä Ph√¢n b·ªë l·ªõp h·ªçc"
    ])
    
    with chart_tabs[0]:
        # Class distribution chart
        data = db.conn.execute("""
            SELECT c.name, COUNT(s.id) as student_count
            FROM classes c
            LEFT JOIN students s ON c.id = s.class_id
            GROUP BY c.id, c.name
            ORDER BY student_count DESC
        """).fetchall()
        
        if data:
            df = pd.DataFrame(data, columns=['class_name', 'count'])
            fig = px.bar(df, x='class_name', y='count',
                        title='Ph√¢n B·ªë H·ªçc Sinh Theo L·ªõp')
            fig.update_layout(xaxis_tickangle=45)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc")





def export_student_list_integrated(students, format_type='excel'):
    """Export student list from search results"""
    if not students:
        st.warning("Kh√¥ng c√≥ h·ªçc sinh n√†o ƒë·ªÉ xu·∫•t")
        return
    
    db = Database()
    
    # Prepare data for export
    data = []
    for student in students:
        class_name = "Ch∆∞a ph√¢n l·ªõp"
        if student.class_id:
            class_info = db.get_class(student.class_id)
            if class_info:
                class_name = class_info.name
        
        student_data = {
            "ID": student.id,
            "H·ªç v√† t√™n": student.full_name,
            "Ng√†y sinh": student.birth_date or "Ch∆∞a c·∫≠p nh·∫≠t",
            "Gi·ªõi t√≠nh": student.gender or "Ch∆∞a c·∫≠p nh·∫≠t",
            "ƒê·ªãa ch·ªâ": student.address or "Ch∆∞a c·∫≠p nh·∫≠t",
            "Email": student.email or "Ch∆∞a c·∫≠p nh·∫≠t",
            "S·ªë ƒëi·ªán tho·∫°i": student.phone or "Ch∆∞a c·∫≠p nh·∫≠t",
            "L·ªõp": class_name,
            "Ng√†y nh·∫≠p h·ªçc": student.admission_date or "Ch∆∞a c·∫≠p nh·∫≠t",

        }
        data.append(student_data)
    
    df = pd.DataFrame(data)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    if format_type == 'excel':
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name="Danh s√°ch h·ªçc sinh")
        
        excel_data = output.getvalue()
        filename = f"Danh_sach_hoc_sinh_{timestamp}.xlsx"
        
        st.download_button(
            label="üì• T·∫£i xu·ªëng danh s√°ch (Excel)",
            data=excel_data,
            file_name=filename,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key="download_student_list_integrated_excel"
        )
        st.success("ƒê√£ t·∫°o file Excel th√†nh c√¥ng!")
        
    elif format_type == 'csv':
        csv = df.to_csv(index=False).encode('utf-8')
        filename = f"Danh_sach_hoc_sinh_{timestamp}.csv"
        
        st.download_button(
            label="üì• T·∫£i xu·ªëng danh s√°ch (CSV)",
            data=csv,
            file_name=filename,
            mime="text/csv",
            key="download_student_list_integrated_csv"
        )
        st.success("ƒê√£ t·∫°o file CSV th√†nh c√¥ng!")

def render_student_advanced_search(db):
    """Render advanced search for students"""
    # Check search permissions
    if not is_search_allowed():
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng t√¨m ki·∫øm")
        return
    
    with st.form("student_advanced_search"):
        st.subheader("üîç T√¨m ki·∫øm h·ªçc sinh n√¢ng cao")
        
        col1, col2 = st.columns(2)
        with col1:
            name_query = st.text_input("T√™n h·ªçc sinh", key="adv_student_name")
            address = st.text_input("ƒê·ªãa ch·ªâ", key="adv_student_address")
            email = st.text_input("Email", key="adv_student_email")
            phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", key="adv_student_phone")
            
        with col2:
            gender = st.selectbox("Gi·ªõi t√≠nh", ["T·∫•t c·∫£", "Nam", "N·ªØ"], key="adv_student_gender")
            year = st.text_input("NƒÉm", key="adv_student_year")
            parent_name = st.text_input("Ph·ª• huynh", key="adv_student_parent")
        
        # Class selection
        class_options = [(None, "T·∫•t c·∫£ l·ªõp")] + [(c.id, c.name) for c in db.get_classes()]
        selected_class = st.selectbox(
            "L·ªõp",
            options=range(len(class_options)),
            format_func=lambda i: class_options[i][1],
            key="adv_student_class"
        )
        class_id = class_options[selected_class][0] if selected_class > 0 else None
        

        
        search_button = st.form_submit_button("üîç T√¨m ki·∫øm", type="primary")
    
    # Handle search results outside the form
    if search_button:
        students = search_students_advanced(db, name_query, address, email, phone, gender, year, parent_name, 
                                         class_id)
        st.session_state.adv_search_results_students = students
    
    # Display results outside the form
    if 'adv_search_results_students' in st.session_state and st.session_state.adv_search_results_students:
        students = st.session_state.adv_search_results_students
        st.success(f"üîé T√¨m th·∫•y {len(students)} h·ªçc sinh")
        
        # Export options
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìä Xu·∫•t Excel", key="export_students_excel_adv"):
                export_student_list_integrated(students, 'excel')
        with col2:
            if st.button("üìÑ Xu·∫•t CSV", key="export_students_csv_adv"):
                export_student_list_integrated(students, 'csv')
        
        # Display results
        for i, student in enumerate(students):
            st.divider()
            st.subheader(f"üë®‚Äçüéì ID {student.id} - {student.full_name}")
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**üÜî ID H·ªçc sinh:** {student.id}")
                st.markdown(f"**üéÇ Ng√†y sinh:** {student.birth_date or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                st.markdown(f"**üìç ƒê·ªãa ch·ªâ:** {student.address or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                st.markdown(f"**üìß Email:** {student.email or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                st.markdown(f"**üìû ƒêi·ªán tho·∫°i:** {student.phone or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
            with col2:
                st.markdown(f"**üè• S·ª©c kh·ªèe khi v√†o l√†ng:** {getattr(student, 'health_on_admission', '') or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                st.markdown(f"**üîç ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô:** {getattr(student, 'initial_characteristics', '') or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                st.markdown(f"**üè† Nh√†:** {getattr(student, 'nha_chu_t_info', '') or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
            
            if st.button(f"üìÑ Xu·∫•t b√°o c√°o Word", key=f"export_word_adv_{student.id}"):
                word_file = export_student_comprehensive_report(db, student.id)
                if word_file:
                    st.success("B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng b√°o c√°o Word",
                        data=word_file,
                        file_name=f"bao_cao_tong_ket_{student.full_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        key=f"download_word_adv_{student.id}"
                    )
                else:
                    st.error("Kh√¥ng th·ªÉ t·∫°o b√°o c√°o")
    elif search_button:
        st.info("Kh√¥ng t√¨m th·∫•y h·ªçc sinh n√†o ph√π h·ª£p")

def render_veteran_advanced_search(db):
    """Render advanced search for veterans"""
    # Check search permissions
    if not is_search_allowed():
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng t√¨m ki·∫øm")
        return
    
    with st.form("veteran_advanced_search"):
        st.subheader("üîç T√¨m ki·∫øm c·ª±u chi·∫øn binh n√¢ng cao")
        
        col1, col2 = st.columns(2)
        with col1:
            name_query = st.text_input("T√™n c·ª±u chi·∫øn binh", key="adv_veteran_name")
            address = st.text_input("ƒê·ªãa ch·ªâ", key="adv_veteran_address")
            email = st.text_input("Email", key="adv_veteran_email")
        with col2:
            gender = st.selectbox("Gi·ªõi t√≠nh", ["T·∫•t c·∫£", "Nam", "N·ªØ"], key="adv_veteran_gender")
            health_status = st.selectbox(
                "ƒê·∫∑c ƒëi·ªÉm ban ƒë·∫ßu",
                ["T·∫•t c·∫£", "T·ªët", "B√¨nh th∆∞·ªùng", "C·∫ßn ch√∫ √Ω"],
                key="adv_veteran_health"
            )
        
        search_button = st.form_submit_button("üîç T√¨m ki·∫øm", type="primary")
    
    # Handle search results outside the form
    if search_button:
        veterans = search_veterans_advanced(db, name_query, address, email, gender, health_status)
        st.session_state.adv_search_results_veterans = veterans
    
    # Display results outside the form
    if 'adv_search_results_veterans' in st.session_state and st.session_state.adv_search_results_veterans:
        veterans = st.session_state.adv_search_results_veterans
        st.success(f"üîé T√¨m th·∫•y {len(veterans)} c·ª±u chi·∫øn binh")
        
        # Display results
        for i, veteran in enumerate(veterans):
            st.divider()
            st.subheader(f"üéñÔ∏è ID {veteran.id} - {veteran.full_name}")
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**üÜî ID B·ªánh nh√¢n:** {veteran.id}")
                st.markdown(f"**üéÇ Ng√†y sinh:** {veteran.birth_date or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                st.markdown(f"**üìç ƒê·ªãa ch·ªâ:** {veteran.address or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
            with col2:
                st.markdown(f"**üìß Email:** {veteran.email or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                st.markdown(f"**üè• ƒê·∫∑c ƒëi·ªÉm ban ƒë·∫ßu:** {veteran.health_condition or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                st.markdown(f"**‚öß Gi·ªõi t√≠nh:** {veteran.gender or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
    elif search_button:
        st.info("Kh√¥ng t√¨m th·∫•y c·ª±u chi·∫øn binh n√†o ph√π h·ª£p")

def search_students_advanced(db, name_query, address, email, phone, gender, year, parent_name, 
                           class_id):
    """Advanced search for students"""
    conditions = []
    params = []
    
    if name_query:
        conditions.append("s.full_name LIKE ?")
        params.append(f"%{name_query}%")
    
    if address:
        conditions.append("s.address LIKE ?")
        params.append(f"%{address}%")
        
    if email:
        conditions.append("s.email LIKE ?")
        params.append(f"%{email}%")
        
    if phone:
        conditions.append("s.phone LIKE ?")
        params.append(f"%{phone}%")
        
    if gender and gender != "T·∫•t c·∫£":
        conditions.append("s.gender = ?")
        params.append(gender)
        
    if year:
        conditions.append("s.year LIKE ?")
        params.append(f"%{year}%")
        
    if parent_name:
        conditions.append("s.parent_name LIKE ?")
        params.append(f"%{parent_name}%")
        
    if class_id:
        conditions.append("s.class_id = ?")
        params.append(class_id)
        

    
    where_clause = " AND ".join(conditions) if conditions else "1=1"
    
    query = f"""
        SELECT s.*, c.name as class_name
        FROM students s
        LEFT JOIN classes c ON s.class_id = c.id
        WHERE {where_clause}
        ORDER BY s.full_name
    """
    
    results = db.conn.execute(query, params).fetchall()
    
    # Convert to Student objects
    students = []
    for row in results:
        student = Student(
            id=row[0], full_name=row[1], birth_date=row[2], address=row[3],
            email=row[4], admission_date=row[5], class_id=row[6],
            profile_image=row[7], gender=row[8], phone=row[9], year=row[10],
            parent_name=row[11], decision_number=row[12], nha_chu_t_info=row[13],
            health_on_admission=row[14], 
            initial_characteristics=row[15] if len(row) > 15 else None
        )
        students.append(student)
    
    return students

def search_veterans_advanced(db, name_query, address, email, gender, health_status):
    """Advanced search for veterans"""
    conditions = []
    params = []
    
    if name_query:
        conditions.append("full_name LIKE ?")
        params.append(f"%{name_query}%")
    
    if address:
        conditions.append("address LIKE ?")
        params.append(f"%{address}%")
        
    if email:
        conditions.append("email LIKE ?")
        params.append(f"%{email}%")
        
    if gender and gender != "T·∫•t c·∫£":
        conditions.append("gender = ?")
        params.append(gender)
        
    if health_status and health_status != "T·∫•t c·∫£":
        conditions.append("initial_characteristics LIKE ?")
        params.append(f"%{health_status}%")
    
    where_clause = " AND ".join(conditions) if conditions else "1=1"
    
    query = f"""
        SELECT * FROM veterans
        WHERE {where_clause}
        ORDER BY full_name
    """
    
    results = db.conn.execute(query, params).fetchall()
    
    # Convert to Veteran objects
    veterans = []
    for row in results:
        veteran = Veteran(
            id=row[0], full_name=row[1], birth_date=row[2], 
            gender=row[3] if len(row) > 3 else None,
            address=row[4] if len(row) > 4 else None,
            email=row[5] if len(row) > 5 else None,
            health_condition=row[6] if len(row) > 6 else None,
            admission_date=row[7] if len(row) > 7 else None,
            psychological_status=row[8] if len(row) > 8 else None,
            profile_image=row[9] if len(row) > 9 else None,
            initial_characteristics=row[10] if len(row) > 10 else None
        )
        veterans.append(veteran)
    
    return veterans

def render_document_management_section(db):
    """Render document management section with instructions"""
    st.subheader("üìÅ Qu·∫£n l√Ω t√†i li·ªáu h·ªçc sinh")
    
    # Instructions section
    with st.expander("üìö H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", expanded=False):
        st.markdown("""
        ### üîß C√°ch s·ª≠ d·ª•ng h·ªá th·ªëng qu·∫£n l√Ω t√†i li·ªáu:
        
        **1. T·∫£i l√™n t√†i li·ªáu:**
        - Ch·ªçn h·ªçc sinh t·ª´ danh s√°ch
        - Ch·ªçn file t√†i li·ªáu (Word, PDF, h√¨nh ·∫£nh)
        - Nh·∫≠p m√¥ t·∫£ cho t√†i li·ªáu
        - Nh·∫•n "T·∫£i l√™n" ƒë·ªÉ l∆∞u
        
        **2. Xem t√†i li·ªáu:**
        - Ch·ªçn h·ªçc sinh ƒë·ªÉ xem danh s√°ch t√†i li·ªáu
        - Nh·∫•n v√†o t√™n file ƒë·ªÉ t·∫£i xu·ªëng
        - Xem th√¥ng tin chi ti·∫øt: ng√†y t·∫£i, ng∆∞·ªùi t·∫£i, m√¥ t·∫£
        
        **3. Qu·∫£n l√Ω t√†i li·ªáu:**
        - X√≥a t√†i li·ªáu kh√¥ng c·∫ßn thi·∫øt
        - C·∫≠p nh·∫≠t m√¥ t·∫£ t√†i li·ªáu
        - T√¨m ki·∫øm t√†i li·ªáu theo t√™n ho·∫∑c m√¥ t·∫£
        
        **4. L∆∞u √Ω quan tr·ªçng:**
        - Ch·ªâ t·∫£i l√™n c√°c file li√™n quan ƒë·∫øn h·ªçc sinh
        - ƒê·∫∑t t√™n file r√µ r√†ng, d·ªÖ hi·ªÉu
        - ƒê·ªãnh k·ª≥ ki·ªÉm tra v√† d·ªçn d·∫πp t√†i li·ªáu c≈©
        - K√≠ch th∆∞·ªõc file t·ªëi ƒëa: 10MB
        """)
    
    # Check permissions
    user_role = st.session_state.user.role
    if user_role not in ['admin', 'teacher', 'doctor', 'nurse']:
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng qu·∫£n l√Ω t√†i li·ªáu")
        return
    
    # Student selection
    students = db.get_students()
    if not students:
        st.warning("Kh√¥ng c√≥ h·ªçc sinh n√†o trong h·ªá th·ªëng")
        return
    
    student_options = [(s.id, f"{s.full_name} (ID: {s.id})") for s in students]
    selected_student_idx = st.selectbox(
        "Ch·ªçn h·ªçc sinh:",
        options=range(len(student_options)),
        format_func=lambda i: student_options[i][1],
        key="doc_student_select"
    )
    
    if selected_student_idx is not None:
        selected_student_id = student_options[selected_student_idx][0]
        selected_student_name = student_options[selected_student_idx][1]
        
        # Create tabs for upload and view
        doc_tabs = st.tabs(["üì§ T·∫£i l√™n t√†i li·ªáu", "üìÇ Xem t√†i li·ªáu"])
        
        with doc_tabs[0]:
            # Upload document form
            st.subheader(f"üì§ T·∫£i t√†i li·ªáu cho {selected_student_name}")
            
            with st.form("upload_document_form"):
                uploaded_file = st.file_uploader(
                    "Ch·ªçn t√†i li·ªáu",
                    type=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'txt'],
                    help="Ch·ªâ ch·∫•p nh·∫≠n file PDF, Word, h√¨nh ·∫£nh v√† text"
                )
                
                description = st.text_area(
                    "M√¥ t·∫£ t√†i li·ªáu",
                    placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ t√†i li·ªáu n√†y...",
                    height=100
                )
                
                submit_upload = st.form_submit_button("üì§ T·∫£i l√™n t√†i li·ªáu", type="primary")
                
                if submit_upload and uploaded_file is not None:
                    if len(description.strip()) < 5:
                        st.error("Vui l√≤ng nh·∫≠p m√¥ t·∫£ chi ti·∫øt √≠t nh·∫•t 5 k√Ω t·ª±")
                    else:
                        # Check file size (10MB limit)
                        if uploaded_file.size > 10 * 1024 * 1024:
                            st.error("File qu√° l·ªõn! K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 10MB")
                        else:
                            success = upload_document(db, selected_student_id, uploaded_file, description)
                            if success:
                                st.success(f"‚úÖ ƒê√£ t·∫£i l√™n t√†i li·ªáu '{uploaded_file.name}' th√†nh c√¥ng!")
                                st.rerun()
                            else:
                                st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i l√™n t√†i li·ªáu. Vui l√≤ng th·ª≠ l·∫°i!")
        
        with doc_tabs[1]:
            # View documents
            st.subheader(f"üìÇ T√†i li·ªáu c·ªßa {selected_student_name}")
            
            documents = get_student_documents(db, selected_student_id)
            
            if documents:
                st.info(f"T√¨m th·∫•y {len(documents)} t√†i li·ªáu")
                
                # Search documents
                search_term = st.text_input("üîç T√¨m ki·∫øm t√†i li·ªáu:", placeholder="Nh·∫≠p t√™n file ho·∫∑c m√¥ t·∫£...")
                
                if search_term:
                    documents = [doc for doc in documents if 
                               search_term.lower() in doc['file_name'].lower() or 
                               search_term.lower() in doc['description'].lower()]
                
                for doc in documents:
                    with st.container():
                        col1, col2, col3 = st.columns([3, 1, 1])
                        
                        with col1:
                            st.markdown(f"**üìÑ {doc['file_name']}**")
                            st.caption(f"üìÖ {doc['upload_date']} | üë§ {doc['uploader_name']}")
                            if doc['description']:
                                st.markdown(f"üí¨ {doc['description']}")
                        
                        with col2:
                            if st.button("üì• T·∫£i xu·ªëng", key=f"download_{doc['id']}"):
                                download_document(db, doc)
                        
                        with col3:
                            if user_role in ['admin', 'teacher']:
                                if st.button("üóëÔ∏è X√≥a", key=f"delete_{doc['id']}"):
                                    if delete_document(db, doc['id']):
                                        st.success("ƒê√£ x√≥a t√†i li·ªáu!")
                                        st.rerun()
                                    else:
                                        st.error("Kh√¥ng th·ªÉ x√≥a t√†i li·ªáu!")
                        
                        st.divider()
            else:
                st.info("üì≠ Ch∆∞a c√≥ t√†i li·ªáu n√†o cho h·ªçc sinh n√†y")

def upload_document(db, student_id, uploaded_file, description):
    """Upload a document for a student"""
    try:
        from datetime import datetime
        
        file_data = uploaded_file.read()
        file_type = uploaded_file.type
        uploader_id = st.session_state.user.id
        
        cursor = db.conn.cursor()
        cursor.execute("""
            INSERT INTO document_files (
                student_id, file_name, file_type, file_data, 
                upload_date, uploaded_by, description
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            student_id, uploaded_file.name, file_type, file_data,
            datetime.now(), uploader_id, description
        ))
        
        db.conn.commit()
        return True
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i l√™n: {str(e)}")
        return False

def get_student_documents(db, student_id):
    """Get all documents for a student"""
    try:
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT df.id, df.file_name, df.file_type, df.upload_date, 
                   df.description, u.full_name as uploader_name
            FROM document_files df
            LEFT JOIN users u ON df.uploaded_by = u.id
            WHERE df.student_id = ?
            ORDER BY df.upload_date DESC
        """, (student_id,))
        
        documents = []
        for row in cursor.fetchall():
            documents.append({
                'id': row[0],
                'file_name': row[1],
                'file_type': row[2],
                'upload_date': row[3],
                'description': row[4] or "Kh√¥ng c√≥ m√¥ t·∫£",
                'uploader_name': row[5] or "Kh√¥ng x√°c ƒë·ªãnh"
            })
        
        return documents
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i danh s√°ch t√†i li·ªáu: {str(e)}")
        return []

def download_document(db, doc):
    """Download a document"""
    try:
        # Get file data from database
        cursor = db.conn.cursor()
        cursor.execute("SELECT file_data FROM document_files WHERE id = ?", (doc['id'],))
        result = cursor.fetchone()
        
        if result:
            file_data = result[0]
            st.download_button(
                label=f"üì• T·∫£i {doc['file_name']}",
                data=file_data,
                file_name=doc['file_name'],
                mime=doc['file_type'],
                key=f"download_btn_{doc['id']}"
            )
        else:
            st.error("Kh√¥ng t√¨m th·∫•y file!")
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i xu·ªëng: {str(e)}")

def delete_document(db, doc_id):
    """Delete a document"""
    try:
        cursor = db.conn.cursor()
        cursor.execute("DELETE FROM document_files WHERE id = ?", (doc_id,))
        db.conn.commit()
        return True
    except Exception as e:
        st.error(f"L·ªói khi x√≥a t√†i li·ªáu: {str(e)}")
        return False
    
def render_export_section(db):
    """Render data export section"""
    st.subheader("üì§ Xu·∫•t d·ªØ li·ªáu")
    
    st.info("üìã Ch·ªçn c√°c lo·∫°i d·ªØ li·ªáu b·∫°n mu·ªën xu·∫•t ra file Excel theo ƒë·ªãnh d·∫°ng chu·∫©n")
    
    export_type = st.multiselect(
        "Ch·ªçn lo·∫°i d·ªØ li·ªáu c·∫ßn xu·∫•t:",
        ["H·ªçc sinh", "C·ª±u chi·∫øn binh", "H·ªì s∆° y t·∫ø", "ƒê√°nh gi√° t√¢m l√Ω"],
        default=["H·ªçc sinh"]
    )
    
    # T-house selection for students (simplified)
    t_house_option = None
    if "H·ªçc sinh" in export_type:
        t_house_options = ["Nh√† T2 (m·∫∑c ƒë·ªãnh)", "Nh√† T3", "Nh√† T4", "T·∫•t c·∫£ c√°c nh√†"]
        
        t_house_option = st.selectbox(
            "Ch·ªçn nh√† T ƒë·ªÉ xu·∫•t:",
            t_house_options,
            index=0
        )
    
    if st.button("üìä T·∫°o file Excel", type="primary"):
        if not export_type:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i d·ªØ li·ªáu ƒë·ªÉ xu·∫•t")
            return
            
        try:
            with st.spinner("ƒêang t·∫°o file Excel..."):
                # Create Excel writer
                output = BytesIO()
                from openpyxl import Workbook
                from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
                from openpyxl.utils.dataframe import dataframe_to_rows
                
                wb = Workbook()
                
                # Export students with proper formatting
                if "H·ªçc sinh" in export_type:
                    # Create or get worksheet
                    if wb.worksheets:
                        ws = wb.active
                        ws.title = "DANH S√ÅCH TR·∫∫ EM"
                    else:
                        ws = wb.create_sheet("DANH S√ÅCH TR·∫∫ EM")
                    
                    # Build SQL query with house filtering
                    house_condition = ""
                    if t_house_option and t_house_option != "T·∫•t c·∫£ c√°c nh√†":
                        if t_house_option == "Nh√† T2 (m·∫∑c ƒë·ªãnh)":
                            house_condition = "WHERE s.nha_chu_t_info LIKE '%T2%'"
                        elif t_house_option == "Nh√† T3":
                            house_condition = "WHERE s.nha_chu_t_info LIKE '%T3%'"
                        elif t_house_option == "Nh√† T4":
                            house_condition = "WHERE s.nha_chu_t_info LIKE '%T4%'"
                        elif t_house_option == "Nh√† T5":
                            house_condition = "WHERE s.nha_chu_t_info LIKE '%T5%'"
                        elif t_house_option == "Nh√† T6":
                            house_condition = "WHERE s.nha_chu_t_info LIKE '%T6%'"

                    # Get student data filtered by house
                    students = db.conn.execute(f"""
                        SELECT 
                            ROW_NUMBER() OVER (ORDER BY s.id) as stt,
                            s.full_name, 
                            CASE 
                                WHEN s.birth_date IS NOT NULL THEN DATE(s.birth_date)
                                ELSE ''
                            END as birth_date,
                            COALESCE(s.gender, '') as gender,
                            COALESCE(s.phone, '') as phone,
                            COALESCE(s.address, '') as address,
                            COALESCE(s.email, '') as email,
                            CASE 
                                WHEN s.admission_date IS NOT NULL THEN DATE(s.admission_date)
                                ELSE ''
                            END as admission_date,
                            COALESCE(c.name, 'Ch∆∞a ph√¢n l·ªõp') as class_name,
                            COALESCE(s.year, '') as year,
                            COALESCE(s.parent_name, '') as parent_name,
                            COALESCE(s.decision_number, '') as decision_number,
                            COALESCE(s.nha_chu_t_info, '') as nha_chu_t_info,
                            COALESCE(s.health_on_admission, '') as health_on_admission,
                            COALESCE(s.initial_characteristics, '') as initial_characteristics
                        FROM students s
                        LEFT JOIN classes c ON s.class_id = c.id
                        {house_condition}
                        ORDER BY s.id
                    """).fetchall()
                    
                    # Header formatting
                    header_font = Font(bold=True, size=14)
                    header_alignment = Alignment(horizontal='center', vertical='center')
                    
                    # Determine T-house filter and title
                    if t_house_option and t_house_option != "T·∫•t c·∫£ c√°c nh√†":
                        if t_house_option == "Nh√† T2 (m·∫∑c ƒë·ªãnh)":
                            t_house_filter = "NH√Ä T2"
                        elif t_house_option == "Nh√† T3":
                            t_house_filter = "NH√Ä T3"
                        elif t_house_option == "Nh√† T4":
                            t_house_filter = "NH√Ä T4"
                        elif t_house_option == "Nh√† T5":
                            t_house_filter = "NH√Ä T5"
                        elif t_house_option == "Nh√† T6":
                            t_house_filter = "NH√Ä T6"
                        else:
                            t_house_filter = "NH√Ä T2"
                    else:
                        t_house_filter = "T·∫§T C·∫¢ C√ÅC NH√Ä"
                    
                    # Add title with T-house information
                    ws.merge_cells('A1:T1')  # Expanded to cover all columns
                    ws['A1'] = f"DANH S√ÅCH TR·∫∫ EM {t_house_filter}"
                    ws['A1'].font = Font(bold=True, size=16)
                    ws['A1'].alignment = header_alignment
                    
                    # Set responsible person based on T-house
                    responsible_names = {
                        "NH√Ä T2": "ƒê·ªó Kh√°nh Linh",
                        "NH√Ä T3": "Ch∆∞a c·∫≠p nh·∫≠t",
                        "NH√Ä T4": "Ch∆∞a c·∫≠p nh·∫≠t",
                        "NH√Ä T5": "Ch∆∞a c·∫≠p nh·∫≠t",
                        "NH√Ä T6": "Ch∆∞a c·∫≠p nh·∫≠t",
                        "T·∫§T C·∫¢ C√ÅC NH√Ä": "Nhi·ªÅu ng∆∞·ªùi ph·ª• tr√°ch"
                    }
                    responsible_name = responsible_names.get(t_house_filter, "Ch∆∞a c·∫≠p nh·∫≠t")
                    
                    # Add responsible person info
                    ws.append([f"M·∫π ph·ª• tr√°ch : {responsible_name}"])
                    
                    # Add empty row
                    ws.append([])
                    
                    # Add comprehensive headers for ALL fields
                    headers = ['TT', 'H·ªç v√† t√™n', 'Ng√†y sinh', 'Gi·ªõi t√≠nh', 'ƒêi·ªán tho·∫°i', 'ƒê·ªãa ch·ªâ', 'Email', 
                              'Ng√†y nh·∫≠p h·ªçc', 'L·ªõp', 'NƒÉm', 'T√™n b·ªë m·∫π/ng∆∞·ªùi gi√°m h·ªô', 'S·ªë quy·∫øt ƒë·ªãnh', 'Nh√†',
                              'S·ª©c kh·ªèe khi v√†o l√†ng', 'ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô']
                    ws.append(headers)
                    
                    # Format header row (now on row 4 due to added responsible person row)
                    for col, header in enumerate(headers, 1):
                        cell = ws.cell(row=4, column=col)
                        cell.font = header_font
                        cell.alignment = header_alignment
                        cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
                    
                    # Add data
                    for student in students:
                        ws.append(list(student))
                    
                    # Set column widths for ALL fields (removed status fields)
                    column_widths = [5, 25, 12, 8, 15, 30, 20, 12, 15, 8, 25, 15, 8, 25, 30]
                    # TT, Name, DOB, Gender, Phone, Address, Email, Admission, Class, Year, Parent, Decision, House, Health_Admission, Characteristics
                    for i, width in enumerate(column_widths, 1):
                        if i <= 26:  # Excel column limit A-Z
                            column_letter = chr(64 + i)  # Convert to A, B, C, etc.
                            ws.column_dimensions[column_letter].width = width
                    
                    st.success(f"‚úÖ ƒê√£ xu·∫•t {len(students)} h·ªçc sinh")
                
                # Export veterans
                if "C·ª±u chi·∫øn binh" in export_type:
                    ws_veterans = wb.create_sheet("DANH S√ÅCH C·ª∞U CHI·∫æN BINH")
                    
                    # Get ALL veteran data with complete fields
                    veterans = db.conn.execute("""
                        SELECT 
                            ROW_NUMBER() OVER (ORDER BY id) as stt,
                            full_name, 
                            CASE 
                                WHEN birth_date IS NOT NULL THEN DATE(birth_date)
                                ELSE ''
                            END as birth_date,
                            COALESCE(service_period, '') as service_period,
                            COALESCE(health_condition, '') as health_condition,
                            COALESCE(address, '') as address,
                            COALESCE(email, '') as email,
                            COALESCE(contact_info, '') as contact_info,
                            COALESCE(initial_characteristics, '') as initial_characteristics
                        FROM veterans
                        ORDER BY id
                    """).fetchall()
                    
                    # Add title
                    ws_veterans.merge_cells('A1:I1')  # Extended for all columns
                    ws_veterans['A1'] = "DANH S√ÅCH C·ª∞U CHI·∫æN BINH"
                    ws_veterans['A1'].font = Font(bold=True, size=16)
                    ws_veterans['A1'].alignment = Alignment(horizontal='center', vertical='center')
                    
                    # Add empty row
                    ws_veterans.append([])
                    
                    # Add comprehensive headers for ALL veteran fields
                    vet_headers = ['TT', 'H·ªç v√† t√™n', 'Ng√†y sinh', 'Th·ªùi gian ph·ª•c v·ª•', 
                                  'S·ª©c kh·ªèe khi v√†o l√†ng', 'ƒê·ªãa ch·ªâ', 'Email', 'Th√¥ng tin li√™n h·ªá', 'ƒê·∫∑c ƒëi·ªÉm s∆° b·ªô']
                    ws_veterans.append(vet_headers)
                    
                    # Format header row
                    for col, header in enumerate(vet_headers, 1):
                        cell = ws_veterans.cell(row=3, column=col)
                        cell.font = Font(bold=True, size=14)
                        cell.alignment = Alignment(horizontal='center', vertical='center')
                        cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
                    
                    # Add data
                    for veteran in veterans:
                        ws_veterans.append(list(veteran))
                    
                    # Set column widths for ALL veteran fields
                    vet_column_widths = [5, 25, 15, 20, 25, 30, 20, 20, 35]  # TT, Name, DOB, Service, Health, Address, Email, Contact, Characteristics
                    for i, width in enumerate(vet_column_widths, 1):
                        column_letter = chr(64 + i)  # Convert to A, B, C, etc.
                        ws_veterans.column_dimensions[column_letter].width = width
                    
                    st.success(f"‚úÖ ƒê√£ xu·∫•t {len(veterans)} c·ª±u chi·∫øn binh")
                
                # Export medical records
                if "H·ªì s∆° y t·∫ø" in export_type:
                    ws_medical = wb.create_sheet("H·ªí S∆† Y T·∫æ")
                    
                    medical_records = db.conn.execute("""
                        SELECT 
                            ROW_NUMBER() OVER (ORDER BY mr.date DESC) as stt,
                            CASE 
                                WHEN mr.patient_type = 'student' THEN s.full_name 
                                WHEN mr.patient_type = 'veteran' THEN v.full_name 
                            END as patient_name,
                            mr.patient_type as patient_type,
                            DATE(mr.date) as exam_date,
                            COALESCE(mr.diagnosis, '') as diagnosis,
                            COALESCE(mr.treatment, '') as treatment,
                            COALESCE(mr.medications, '') as medications,
                            CASE 
                                WHEN mr.follow_up_date IS NOT NULL THEN DATE(mr.follow_up_date)
                                ELSE ''
                            END as follow_up_date,
                            COALESCE(u.full_name, '') as doctor_name
                        FROM medical_records mr
                        LEFT JOIN students s ON mr.patient_id = s.id AND mr.patient_type = 'student'
                        LEFT JOIN veterans v ON mr.patient_id = v.id AND mr.patient_type = 'veteran'
                        LEFT JOIN users u ON mr.doctor_id = u.id
                        ORDER BY mr.date DESC
                    """).fetchall()
                    
                    # Add title and headers
                    ws_medical.merge_cells('A1:I1')
                    ws_medical['A1'] = "H·ªí S∆† Y T·∫æ"
                    ws_medical['A1'].font = Font(bold=True, size=16)
                    ws_medical['A1'].alignment = Alignment(horizontal='center', vertical='center')
                    
                    ws_medical.append([])
                    
                    med_headers = ['TT', 'T√™n b·ªánh nh√¢n', 'Lo·∫°i', 'Ng√†y kh√°m', 'Ch·∫©n ƒëo√°n', 
                                  'ƒêi·ªÅu tr·ªã', 'Thu·ªëc', 'Ng√†y t√°i kh√°m', 'B√°c sƒ©']
                    ws_medical.append(med_headers)
                    
                    # Format headers
                    for col, header in enumerate(med_headers, 1):
                        cell = ws_medical.cell(row=3, column=col)
                        cell.font = Font(bold=True, size=14)
                        cell.alignment = Alignment(horizontal='center', vertical='center')
                        cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
                    
                    # Add data
                    for record in medical_records:
                        ws_medical.append(list(record))
                    
                    # Set fixed column widths for medical records
                    med_column_widths = [5, 25, 12, 15, 25, 25, 20, 15, 20]  # TT, Patient, Type, Date, Diagnosis, Treatment, Meds, Follow-up, Doctor
                    for i, width in enumerate(med_column_widths, 1):
                        column_letter = chr(64 + i)  # Convert to A, B, C, etc.
                        ws_medical.column_dimensions[column_letter].width = width
                    
                    st.success(f"‚úÖ ƒê√£ xu·∫•t {len(medical_records)} h·ªì s∆° y t·∫ø")
                
                # Export psychological evaluations
                if "ƒê√°nh gi√° t√¢m l√Ω" in export_type:
                    ws_psych = wb.create_sheet("ƒê√ÅNH GI√Å T√ÇM L√ù")
                    
                    psych_evals = db.conn.execute("""
                        SELECT 
                            ROW_NUMBER() OVER (ORDER BY pe.evaluation_date DESC) as stt,
                            s.full_name as student_name,
                            DATE(pe.evaluation_date) as evaluation_date,
                            COALESCE(pe.assessment, '') as assessment,
                            COALESCE(pe.recommendations, '') as recommendations,
                            COALESCE(pe.notes, '') as notes,
                            COALESCE(u.full_name, '') as evaluator_name
                        FROM psychological_evaluations pe
                        LEFT JOIN students s ON pe.student_id = s.id
                        LEFT JOIN users u ON pe.evaluator_id = u.id
                        ORDER BY pe.evaluation_date DESC
                    """).fetchall()
                    
                    # Add title and headers
                    ws_psych.merge_cells('A1:G1')
                    ws_psych['A1'] = "ƒê√ÅNH GI√Å T√ÇM L√ù"
                    ws_psych['A1'].font = Font(bold=True, size=16)
                    ws_psych['A1'].alignment = Alignment(horizontal='center', vertical='center')
                    
                    ws_psych.append([])
                    
                    psych_headers = ['TT', 'T√™n h·ªçc sinh', 'Ng√†y ƒë√°nh gi√°', 'ƒê√°nh gi√°', 
                                    'Khuy·∫øn ngh·ªã', 'Ghi ch√∫', 'Ng∆∞·ªùi ƒë√°nh gi√°']
                    ws_psych.append(psych_headers)
                    
                    # Format headers
                    for col, header in enumerate(psych_headers, 1):
                        cell = ws_psych.cell(row=3, column=col)
                        cell.font = Font(bold=True, size=14)
                        cell.alignment = Alignment(horizontal='center', vertical='center')
                        cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
                    
                    # Add data
                    for eval_record in psych_evals:
                        ws_psych.append(list(eval_record))
                    
                    # Set fixed column widths for psychological evaluations
                    psych_column_widths = [5, 25, 15, 30, 30, 25, 20]  # TT, Student, Date, Assessment, Recommendations, Notes, Evaluator
                    for i, width in enumerate(psych_column_widths, 1):
                        column_letter = chr(64 + i)  # Convert to A, B, C, etc.
                        ws_psych.column_dimensions[column_letter].width = width
                    
                    st.success(f"‚úÖ ƒê√£ xu·∫•t {len(psych_evals)} ƒë√°nh gi√° t√¢m l√Ω")
                
                # Save workbook to BytesIO
                wb.save(output)
                
                # Create download button
                filename = f"danh_sach_lang_huu_nghi_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                st.download_button(
                    label="‚¨áÔ∏è T·∫£i xu·ªëng file Excel",
                    data=output.getvalue(),
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key="download_excel_export"
                )
                st.success("‚úÖ File Excel ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng theo ƒë·ªãnh d·∫°ng chu·∫©n!")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫°o file Excel: {str(e)}")
            print(f"Export error: {str(e)}")  # For debugging

if __name__ == "__main__":
    render()