import streamlit as st
from auth import check_auth, check_role, can_edit_student_info, can_edit_veteran_info
from database import Database
from models import Student, Veteran
from utils import show_success, show_error, apply_theme
from translations import get_text
import pandas as pd
from io import BytesIO
from datetime import datetime
import base64

def display_student_details(student, db):
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa h·ªçc sinh"""
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Hi·ªÉn th·ªã ·∫£nh h·ªçc sinh n·∫øu c√≥
        if student.profile_image:
            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† chuy·ªÉn ƒë·ªïi n·∫øu c·∫ßn
                if isinstance(student.profile_image, str):
                    st.warning(get_text('common.invalid_image', 'D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá'))
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
                else:
                    img_data = base64.b64encode(student.profile_image).decode()
                    st.markdown(
                        f'<img src="data:image/jpeg;base64,{img_data}" width="150" style="border-radius: 10px;">',
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.warning(f"{get_text('common.image_display_error', 'Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh')}: {str(e)}")
                st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
        else:
            st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
    
    with col2:
        col_a, col_b = st.columns(2)
        not_updated = get_text('common.not_updated', 'Ch∆∞a c·∫≠p nh·∫≠t')
        
        with col_a:
            st.markdown(f"**üéÇ {get_text('profile.birth_date', 'Ng√†y sinh')}:** {student.birth_date or not_updated}")
            st.markdown(f"**‚öß {get_text('profile.gender', 'Gi·ªõi t√≠nh')}:** {student.gender or not_updated}")
            st.markdown(f"**üì± {get_text('profile.phone', 'ƒêi·ªán tho·∫°i')}:** {student.phone or not_updated}")
            st.markdown(f"**üìç {get_text('profile.address', 'ƒê·ªãa ch·ªâ')}:** {student.address or not_updated}")
        
        with col_b:
            # L·∫•y th√¥ng tin l·ªõp h·ªçc n·∫øu c√≥
            class_info = get_text('profile.no_class', 'Ch∆∞a ph√¢n l·ªõp')
            if student.class_id:
                class_data = db.get_class(student.class_id)
                if class_data:
                    class_info = f"{class_data.name} ({class_data.academic_year})"
                    
            st.markdown(f"**üë®‚Äçüè´ {get_text('profile.class', 'L·ªõp')}:** {class_info}")
            st.markdown(f"**üìß {get_text('profile.email', 'Email')}:** {student.email or not_updated}")
            st.markdown(f"**üë™ {get_text('profile.parent', 'Ph·ª• huynh')}:** {student.parent_name or not_updated}")
            st.markdown(f"**üìÖ {get_text('profile.admission_date', 'Ng√†y nh·∫≠p h·ªçc')}:** {student.admission_date or not_updated}")
    
    # Hi·ªÉn th·ªã th√¥ng tin t√¨nh tr·∫°ng
    st.markdown(f"##### üè• {get_text('profile.status', 'T√¨nh tr·∫°ng')}")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"**{get_text('profile.academic', 'H·ªçc t·∫≠p')}:** {student.academic_status or not_updated}")
    with col2:
        st.markdown(f"**{get_text('profile.health', 'S·ª©c kh·ªèe')}:** {student.health_status or not_updated}")
    with col3:
        st.markdown(f"**{get_text('profile.psychological', 'T√¢m l√Ω')}:** {student.psychological_status or get_text('common.not_evaluated', 'Ch∆∞a ƒë√°nh gi√°')}")

def display_veteran_details(veteran, db):
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa c·ª±u chi·∫øn binh"""
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Hi·ªÉn th·ªã ·∫£nh c·ª±u chi·∫øn binh n·∫øu c√≥
        if veteran.profile_image:
            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† chuy·ªÉn ƒë·ªïi n·∫øu c·∫ßn
                if isinstance(veteran.profile_image, str):
                    st.warning(get_text('common.invalid_image', 'D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá'))
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
                else:
                    img_data = base64.b64encode(veteran.profile_image).decode()
                    st.markdown(
                        f'<img src="data:image/jpeg;base64,{img_data}" width="150" style="border-radius: 10px;">',
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.warning(f"{get_text('common.image_display_error', 'Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh')}: {str(e)}")
                st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
        else:
            st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
    
    with col2:
        col_a, col_b = st.columns(2)
        not_updated = get_text('common.not_updated', 'Ch∆∞a c·∫≠p nh·∫≠t')
        
        with col_a:
            st.markdown(f"**üéÇ {get_text('profile.birth_date', 'Ng√†y sinh')}:** {veteran.birth_date or not_updated}")
            st.markdown(f"**üèÖ {get_text('profile.service_period', 'Th·ªùi gian ph·ª•c v·ª•')}:** {veteran.service_period or not_updated}")
            st.markdown(f"**üìç {get_text('profile.address', 'ƒê·ªãa ch·ªâ')}:** {veteran.address or not_updated}")
        
        with col_b:
            st.markdown(f"**üìß {get_text('profile.email', 'Email')}:** {veteran.email or not_updated}")
            st.markdown(f"**üìû {get_text('profile.contact', 'Li√™n h·ªá')}:** {veteran.contact_info or not_updated}")
            st.markdown(f"**üè• {get_text('profile.health_condition', 'T√¨nh tr·∫°ng s·ª©c kh·ªèe')}:** {veteran.health_condition or not_updated}")

def handle_student_edit(student, db):
    """X·ª≠ l√Ω ch·ªânh s·ª≠a th√¥ng tin h·ªçc sinh"""
    st.subheader(f"‚úèÔ∏è {get_text('profile.edit_information', 'Ch·ªânh s·ª≠a th√¥ng tin')}")
    
    # Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i v√† t√πy ch·ªçn t·∫£i l√™n ·∫£nh m·ªõi
    uploaded_image = None
    col_img1, col_img2 = st.columns([1, 2])
    
    with col_img1:
        # Hi·ªÉn th·ªã ·∫£nh h·ªçc sinh n·∫øu c√≥
        if student.profile_image:
            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† chuy·ªÉn ƒë·ªïi n·∫øu c·∫ßn
                if isinstance(student.profile_image, str):
                    st.warning("D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá")
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
                else:
                    img_data = base64.b64encode(student.profile_image).decode()
                    st.markdown(
                        f'<img src="data:image/jpeg;base64,{img_data}" width="150" style="border-radius: 10px;">',
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh: {str(e)}")
                st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
        else:
            st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
    
    with col_img2:
        # T·∫£i l√™n ·∫£nh m·ªõi
        uploaded_image = st.file_uploader(get_text("profile.upload_new_image", "T·∫£i l√™n ·∫£nh m·ªõi"), type=["jpg", "jpeg", "png"])
        if uploaded_image is not None:
            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
            st.image(uploaded_image, width=200)
            
            # L∆∞u ·∫£nh v√†o c∆° s·ªü d·ªØ li·ªáu khi nh·∫•n n√∫t
            if st.button(get_text("profile.save_image", "L∆∞u ·∫£nh"), key="save_student_image"):
                try:
                    # ƒê·ªçc d·ªØ li·ªáu ·∫£nh
                    image_bytes = uploaded_image.getvalue()
                    # L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
                    if db.save_student_image(student.id, image_bytes):
                        show_success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng!")
                        st.rerun()  # Reload ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh m·ªõi
                    else:
                        show_error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh")
                except Exception as e:
                    show_error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ·∫£nh: {str(e)}")
    
    # T·∫°o form ch·ªânh s·ª≠a
    with st.form("edit_student_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            full_name = st.text_input(get_text("profile.full_name", "H·ªç v√† t√™n"), value=student.full_name)
            birth_date = st.text_input(get_text("profile.birth_date", "Ng√†y sinh"), value=student.birth_date or "", 
                                      help=get_text("profile.date_format_help", "ƒê·ªãnh d·∫°ng: YYYY-MM-DD"))
            gender = st.selectbox(get_text("profile.gender", "Gi·ªõi t√≠nh"), 
                                options=[get_text("gender.male", "Nam"), get_text("gender.female", "N·ªØ"), get_text("gender.other", "Kh√°c")],
                                index=[get_text("gender.male", "Nam"), get_text("gender.female", "N·ªØ"), get_text("gender.other", "Kh√°c")].index(student.gender) if student.gender in [get_text("gender.male", "Nam"), get_text("gender.female", "N·ªØ"), get_text("gender.other", "Kh√°c")] else 0)
            phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value=student.phone or "")
            address = st.text_input("ƒê·ªãa ch·ªâ", value=student.address or "")
        
        with col2:
            email = st.text_input("Email", value=student.email or "")
            parent_name = st.text_input("Ph·ª• huynh", value=student.parent_name or "")
            year = st.text_input("NƒÉm h·ªçc", value=student.year or "")
            
            # L·∫•y danh s√°ch l·ªõp h·ªçc
            classes = db.get_classes()
            class_options = [(0, "Kh√¥ng ph√¢n l·ªõp")] + [(c.id, f"{c.name} ({c.academic_year})") for c in classes]
            
            # T√¨m v·ªã tr√≠ c·ªßa l·ªõp h·ªçc hi·ªán t·∫°i trong danh s√°ch
            selected_index = 0
            for i, (class_id, _) in enumerate(class_options):
                if student.class_id == class_id:
                    selected_index = i
                    break
            
            class_id = st.selectbox(
                "L·ªõp", 
                options=range(len(class_options)),
                format_func=lambda i: class_options[i][1],
                index=selected_index
            )
            class_id = class_options[class_id][0] if class_id is not None else None
            
            # Convert class_id = 0 to None
            if class_id == 0:
                class_id = None
            
            # ƒê·ªïi ƒë·ªãnh d·∫°ng ng√†y nh·∫≠p h·ªçc t·ª´ text sang date_input
            admission_date = None
            try:
                if student.admission_date:
                    admission_date = datetime.strptime(student.admission_date, "%Y-%m-%d").date()
            except:
                pass
            
            admission_date = st.date_input("Ng√†y nh·∫≠p h·ªçc", value=admission_date or datetime.now().date())
        
        # T√¨nh tr·∫°ng
        st.subheader("T√¨nh tr·∫°ng")
        col1, col2 = st.columns(2)
        
        with col1:
            health_status = st.selectbox(
                "T√¨nh tr·∫°ng s·ª©c kh·ªèe",
                ["T·ªët", "B√¨nh th∆∞·ªùng", "·ªîn ƒë·ªãnh", "C·∫ßn ch√∫ √Ω"],
                index=["T·ªët", "B√¨nh th∆∞·ªùng", "·ªîn ƒë·ªãnh", "C·∫ßn ch√∫ √Ω"].index(student.health_status) if student.health_status in ["T·ªët", "B√¨nh th∆∞·ªùng", "·ªîn ƒë·ªãnh", "C·∫ßn ch√∫ √Ω"] else 1
            )
        
        with col2:
            academic_status = st.selectbox(
                "T√¨nh tr·∫°ng h·ªçc t·∫≠p",
                ["Xu·∫•t s·∫Øc", "T·ªët", "Trung b√¨nh", "C·∫ßn c·∫£i thi·ªán", "Ch∆∞a ƒë√°nh gi√°"],
                index=["Xu·∫•t s·∫Øc", "T·ªët", "Trung b√¨nh", "C·∫ßn c·∫£i thi·ªán", "Ch∆∞a ƒë√°nh gi√°"].index(student.academic_status) if student.academic_status in ["Xu·∫•t s·∫Øc", "T·ªët", "Trung b√¨nh", "C·∫ßn c·∫£i thi·ªán", "Ch∆∞a ƒë√°nh gi√°"] else 4
            )
            
            psychological_status = st.selectbox(
                "T√¨nh tr·∫°ng t√¢m l√Ω",
                ["·ªîn ƒë·ªãnh", "C·∫ßn theo d√µi", "C·∫ßn h·ªó tr·ª£", "T·ªët", "Ch∆∞a ƒë√°nh gi√°"],
                index=["·ªîn ƒë·ªãnh", "C·∫ßn theo d√µi", "C·∫ßn h·ªó tr·ª£", "T·ªët", "Ch∆∞a ƒë√°nh gi√°"].index(student.psychological_status) if student.psychological_status in ["·ªîn ƒë·ªãnh", "C·∫ßn theo d√µi", "C·∫ßn h·ªó tr·ª£", "T·ªët", "Ch∆∞a ƒë√°nh gi√°"] else 0
            )
            
        if st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi"):
            student_data = {
                "full_name": full_name,
                "birth_date": birth_date,
                "gender": gender,
                "phone": phone,
                "address": address,
                "email": email,
                "parent_name": parent_name,
                "year": year,
                "admission_date": admission_date.strftime("%Y-%m-%d"),
                "class_id": class_id,
                "health_status": health_status,
                "academic_status": academic_status,
                "psychological_status": psychological_status
            }
            
            try:
                if db.update_student(student.id, student_data):
                    # Ghi nh·∫≠n l·ªãch s·ª≠ thay ƒë·ªïi l·ªõp h·ªçc n·∫øu l·ªõp h·ªçc thay ƒë·ªïi
                    if student.class_id != class_id:
                        db.update_student_class(student.id, class_id)
                    
                    show_success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh th√†nh c√¥ng!")
                    st.rerun()
                else:
                    show_error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh")
            except Exception as e:
                show_error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {str(e)}")

def handle_veteran_edit(veteran, db):
    """X·ª≠ l√Ω ch·ªânh s·ª≠a th√¥ng tin c·ª±u chi·∫øn binh"""
    st.subheader("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin")
    
    # Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i v√† t√πy ch·ªçn t·∫£i l√™n ·∫£nh m·ªõi
    uploaded_image = None
    col_img1, col_img2 = st.columns([1, 2])
    
    with col_img1:
        # Hi·ªÉn th·ªã ·∫£nh c·ª±u chi·∫øn binh n·∫øu c√≥
        if veteran.profile_image:
            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† chuy·ªÉn ƒë·ªïi n·∫øu c·∫ßn
                if isinstance(veteran.profile_image, str):
                    st.warning("D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá")
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
                else:
                    img_data = base64.b64encode(veteran.profile_image).decode()
                    st.markdown(
                        f'<img src="data:image/jpeg;base64,{img_data}" width="150" style="border-radius: 10px;">',
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh: {str(e)}")
                st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
        else:
            st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png", width=150)
    
    with col_img2:
        # T·∫£i l√™n ·∫£nh m·ªõi
        uploaded_image = st.file_uploader(get_text("profile.upload_new_image", "T·∫£i l√™n ·∫£nh m·ªõi"), type=["jpg", "jpeg", "png"], key="upload_veteran_image")
        if uploaded_image is not None:
            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
            st.image(uploaded_image, width=200)
            
            # L∆∞u ·∫£nh v√†o c∆° s·ªü d·ªØ li·ªáu khi nh·∫•n n√∫t
            if st.button(get_text("profile.save_image", "L∆∞u ·∫£nh"), key="save_veteran_image"):
                try:
                    # ƒê·ªçc d·ªØ li·ªáu ·∫£nh
                    image_bytes = uploaded_image.getvalue()
                    # L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
                    if db.save_veteran_image(veteran.id, image_bytes):
                        show_success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng!")
                        st.rerun()  # Reload ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh m·ªõi
                    else:
                        show_error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh")
                except Exception as e:
                    show_error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ·∫£nh: {str(e)}")
    
    # T·∫°o form ch·ªânh s·ª≠a
    with st.form("edit_veteran_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            full_name = st.text_input("H·ªç v√† t√™n", value=veteran.full_name)
            birth_date = st.text_input("Ng√†y sinh", value=veteran.birth_date or "", 
                                      help="ƒê·ªãnh d·∫°ng: YYYY-MM-DD")
            service_period = st.text_input("Th·ªùi gian ph·ª•c v·ª•", value=veteran.service_period or "")
            address = st.text_input("ƒê·ªãa ch·ªâ", value=veteran.address or "")
        
        with col2:
            health_condition = st.text_input("T√¨nh tr·∫°ng s·ª©c kh·ªèe", value=veteran.health_condition or "")
            email = st.text_input("Email", value=veteran.email or "")
            contact_info = st.text_input("Th√¥ng tin li√™n h·ªá", value=veteran.contact_info or "")
            
        if st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi"):
            veteran_data = {
                "full_name": full_name,
                "birth_date": birth_date,
                "service_period": service_period,
                "address": address,
                "health_condition": health_condition,
                "email": email,
                "contact_info": contact_info
            }
            
            try:
                if db.update_veteran(veteran.id, veteran_data):
                    show_success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin c·ª±u chi·∫øn binh th√†nh c√¥ng!")
                    st.rerun()
                else:
                    show_error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ª±u chi·∫øn binh")
            except Exception as e:
                show_error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {str(e)}")

def add_new_student(db):
    """Th√™m h·ªçc sinh m·ªõi"""
    st.subheader("‚ûï Th√™m h·ªçc sinh m·ªõi")
    
    # T·∫£i l√™n ·∫£nh cho h·ªçc sinh m·ªõi
    uploaded_image = st.file_uploader("T·∫£i l√™n ·∫£nh h·ªçc sinh", type=["jpg", "jpeg", "png"], key="upload_new_student_image")
    if uploaded_image is not None:
        st.image(uploaded_image, width=200)
        st.info("·∫¢nh s·∫Ω ƒë∆∞·ª£c l∆∞u sau khi b·∫°n th√™m h·ªçc sinh")
    
    with st.form("add_student_form"):
        # Th√¥ng tin c∆° b·∫£n
        col1, col2 = st.columns(2)
        with col1:
            full_name = st.text_input("H·ªç v√† t√™n", key="add_full_name")
            birth_date = st.text_input("Ng√†y sinh", key="add_birth_place", 
                                     help="ƒê·ªãnh d·∫°ng: YYYY-MM-DD")
            gender = st.selectbox("Gi·ªõi t√≠nh", ["Nam", "N·ªØ", "Kh√°c"], key="add_gender")
            phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", key="add_phone")
            address = st.text_input("ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫", key="add_address")
        
        with col2:
            email = st.text_input("Email", key="add_email")
            parent_name = st.text_input("Ph·ª• huynh", key="add_parent_name")
            year = st.text_input("NƒÉm h·ªçc", key="add_year")
            admission_date = st.date_input("Ng√†y nh·∫≠p h·ªçc", key="add_admission_date")

            # L·∫•y danh s√°ch l·ªõp h·ªçc
            classes = db.get_classes()
            class_options = [(0, "Kh√¥ng ph√¢n l·ªõp")] + [(c.id, f"{c.name} ({c.academic_year})") for c in classes]
            
            class_id = st.selectbox(
                "L·ªõp",
                options=range(len(class_options)),
                format_func=lambda i: class_options[i][1],
                key="add_class_id"
            )
            class_id = class_options[class_id][0] if class_id is not None else None
            
            # Convert class_id = 0 to None
            if class_id == 0:
                class_id = None

        # T√¨nh tr·∫°ng
        st.subheader("T√¨nh tr·∫°ng")
        col1, col2 = st.columns(2)
        
        with col1:
            health_status = st.selectbox(
                "T√¨nh tr·∫°ng s·ª©c kh·ªèe",
                ["T·ªët", "B√¨nh th∆∞·ªùng", "·ªîn ƒë·ªãnh", "C·∫ßn ch√∫ √Ω"],
                key="add_health_status"
            )
        
        with col2:
            academic_status = st.selectbox(
                "T√¨nh tr·∫°ng h·ªçc t·∫≠p",
                ["Xu·∫•t s·∫Øc", "T·ªët", "Trung b√¨nh", "C·∫ßn c·∫£i thi·ªán", "Ch∆∞a ƒë√°nh gi√°"],
                key="add_academic_status"
            )
            
            psychological_status = st.selectbox(
                "T√¨nh tr·∫°ng t√¢m l√Ω",
                ["·ªîn ƒë·ªãnh", "C·∫ßn theo d√µi", "C·∫ßn h·ªó tr·ª£", "T·ªët", "Ch∆∞a ƒë√°nh gi√°"],
                key="add_psychological_status"
            )

        if st.form_submit_button("Th√™m h·ªçc sinh"):
            student_data = {
                "full_name": full_name,
                "birth_date": birth_date,
                "gender": gender,
                "phone": phone,
                "address": address,
                "email": email,
                "parent_name": parent_name,
                "year": year,
                "admission_date": admission_date.strftime("%Y-%m-%d"),
                "health_status": health_status,
                "academic_status": academic_status,
                "psychological_status": psychological_status,
                "class_id": class_id
            }
            
            if not full_name:
                show_error("Vui l√≤ng nh·∫≠p h·ªç v√† t√™n h·ªçc sinh")
            else:
                try:
                    student_id = db.add_student(student_data)
                    if student_id:
                        # N·∫øu c√≥ l·ªõp h·ªçc, c·∫≠p nh·∫≠t l·ªãch s·ª≠ l·ªõp h·ªçc
                        if class_id:
                            db.update_student_class(student_id, class_id)
                        
                        # N·∫øu c√≥ t·∫£i l√™n ·∫£nh, l∆∞u ·∫£nh v√†o c∆° s·ªü d·ªØ li·ªáu
                        if 'upload_new_student_image' in st.session_state and st.session_state.upload_new_student_image is not None:
                            uploaded_image = st.session_state.upload_new_student_image
                            image_bytes = uploaded_image.getvalue()
                            if db.save_student_image(student_id, image_bytes):
                                show_success(f"ƒê√£ th√™m h·ªçc sinh {full_name} v√† l∆∞u ·∫£nh th√†nh c√¥ng!")
                            else:
                                show_success(f"ƒê√£ th√™m h·ªçc sinh {full_name} th√†nh c√¥ng, nh∆∞ng kh√¥ng th·ªÉ l∆∞u ·∫£nh!")
                        else:
                            show_success(f"ƒê√£ th√™m h·ªçc sinh {full_name} th√†nh c√¥ng!")
                            
                        st.rerun()
                    else:
                        show_error("Kh√¥ng th·ªÉ th√™m h·ªçc sinh")
                except Exception as e:
                    show_error(f"L·ªói khi th√™m h·ªçc sinh: {str(e)}")

def add_new_veteran(db):
    """Th√™m c·ª±u chi·∫øn binh m·ªõi"""
    st.subheader("‚ûï Th√™m c·ª±u chi·∫øn binh m·ªõi")
    
    # T·∫£i l√™n ·∫£nh cho c·ª±u chi·∫øn binh m·ªõi
    uploaded_image = st.file_uploader("T·∫£i l√™n ·∫£nh c·ª±u chi·∫øn binh", type=["jpg", "jpeg", "png"], key="upload_new_veteran_image")
    if uploaded_image is not None:
        st.image(uploaded_image, width=200)
        st.info("·∫¢nh s·∫Ω ƒë∆∞·ª£c l∆∞u sau khi b·∫°n th√™m c·ª±u chi·∫øn binh")
    
    with st.form("add_veteran_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            full_name = st.text_input("H·ªç v√† t√™n", key="add_vet_name")
            birth_date = st.text_input("Ng√†y sinh", key="add_vet_birth", 
                                     help="ƒê·ªãnh d·∫°ng: YYYY-MM-DD")
            service_period = st.text_input("Th·ªùi gian ph·ª•c v·ª•", key="add_vet_service")
            address = st.text_input("ƒê·ªãa ch·ªâ", key="add_vet_address")
        
        with col2:
            health_condition = st.text_input("T√¨nh tr·∫°ng s·ª©c kh·ªèe", key="add_vet_health")
            email = st.text_input("Email", key="add_vet_email")
            contact_info = st.text_input("Th√¥ng tin li√™n h·ªá", key="add_vet_contact")
            
        if st.form_submit_button("Th√™m c·ª±u chi·∫øn binh"):
            if not full_name:
                show_error("Vui l√≤ng nh·∫≠p h·ªç v√† t√™n")
            else:
                veteran_data = {
                    "full_name": full_name,
                    "birth_date": birth_date,
                    "service_period": service_period,
                    "address": address,
                    "health_condition": health_condition,
                    "email": email,
                    "contact_info": contact_info
                }
                
                try:
                    veteran_id = db.add_veteran(veteran_data)
                    if veteran_id:
                        # N·∫øu c√≥ t·∫£i l√™n ·∫£nh, l∆∞u ·∫£nh v√†o c∆° s·ªü d·ªØ li·ªáu
                        if 'upload_new_veteran_image' in st.session_state and st.session_state.upload_new_veteran_image is not None:
                            uploaded_image = st.session_state.upload_new_veteran_image
                            image_bytes = uploaded_image.getvalue()
                            if db.save_veteran_image(veteran_id, image_bytes):
                                show_success(f"ƒê√£ th√™m c·ª±u chi·∫øn binh {full_name} v√† l∆∞u ·∫£nh th√†nh c√¥ng!")
                            else:
                                show_success(f"ƒê√£ th√™m c·ª±u chi·∫øn binh {full_name} th√†nh c√¥ng, nh∆∞ng kh√¥ng th·ªÉ l∆∞u ·∫£nh!")
                        else:
                            show_success(f"ƒê√£ th√™m c·ª±u chi·∫øn binh {full_name} th√†nh c√¥ng!")
                            
                        st.rerun()
                    else:
                        show_error("Kh√¥ng th·ªÉ th√™m c·ª±u chi·∫øn binh")
                except Exception as e:
                    show_error(f"L·ªói khi th√™m c·ª±u chi·∫øn binh: {str(e)}")

def render():
    # Apply theme from session state
    apply_theme()
    
    # Set current page for role checking
    st.session_state.current_page = "03_Quan_ly_ho_so"
    
    check_auth()
    
    db = Database()
    
    st.title(f"üë• {get_text('profile.title', 'Qu·∫£n L√Ω H·ªì S∆°')}")
    
    # T·∫°o tabs cho h·ªçc sinh v√† c·ª±u chi·∫øn binh
    entity_type = st.radio(
        get_text('profile.select_type', 'Ch·ªçn lo·∫°i h·ªì s∆°'), 
        [get_text('common.student', 'H·ªçc sinh'), get_text('common.veteran', 'C·ª±u chi·∫øn binh')], 
        horizontal=True
    )
    
    if entity_type == get_text('common.student', 'H·ªçc sinh'):
        student_tabs = st.tabs([
            f"üîç {get_text('common.list', 'Danh s√°ch')}", 
            f"‚ûï {get_text('common.add_new', 'Th√™m m·ªõi')}"
        ])
        
        with student_tabs[0]:
            st.subheader(f"üìã {get_text('profile.student_list', 'Danh s√°ch h·ªçc sinh')}")
            
            # Th√™m √¥ t√¨m ki·∫øm
            search_query = st.text_input(
                f"üîç {get_text('common.search_by_name', 'T√¨m ki·∫øm theo t√™n')}", 
                key="search_student"
            )
            
            # L·∫•y danh s√°ch h·ªçc sinh
            students = db.get_students()
            
            # L·ªçc h·ªçc sinh theo t√¨m ki·∫øm n·∫øu c√≥
            if search_query:
                search_query = search_query.lower()
                students = [s for s in students if search_query in s.full_name.lower()]
            
            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng h·ªçc sinh
            st.info(f"üìä {get_text('common.total', 'T·ªïng s·ªë')}: {len(students)} {get_text('common.student', 'h·ªçc sinh')}")
            
            # Hi·ªÉn th·ªã danh s√°ch h·ªçc sinh trong c√°c expanders
            for student in students:
                with st.expander(f"üë®‚Äçüéì {student.full_name}"):
                    # Th√¥ng tin chi ti·∫øt h·ªçc sinh
                    display_student_details(student, db)
                    
                    # N√∫t ch·ªânh s·ª≠a
                    if can_edit_student_info():
                        if st.button(f"‚úèÔ∏è {get_text('common.edit', 'Ch·ªânh s·ª≠a')}", key=f"edit_student_{student.id}"):
                            st.session_state.edit_student_id = student.id
                            st.rerun()
            
            # Hi·ªÉn th·ªã form ch·ªânh s·ª≠a n·∫øu ƒë√£ ch·ªçn h·ªçc sinh
            if hasattr(st.session_state, 'edit_student_id'):
                for student in students:
                    if student.id == st.session_state.edit_student_id:
                        handle_student_edit(student, db)
                        break
                
                # N√∫t h·ªßy ch·ªânh s·ª≠a
                if st.button(f"‚ùå {get_text('common.cancel_edit', 'H·ªßy ch·ªânh s·ª≠a')}"):
                    del st.session_state.edit_student_id
                    st.rerun()
        
        with student_tabs[1]:
            # Ki·ªÉm tra quy·ªÅn th√™m h·ªçc sinh m·ªõi
            if can_edit_student_info():
                add_new_student(db)
            else:
                st.warning(get_text("profile.student_add_permission_denied", "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m h·ªçc sinh m·ªõi"))
    
    else:  # C·ª±u chi·∫øn binh
        veteran_tabs = st.tabs([
            f"üîç {get_text('common.list', 'Danh s√°ch')}", 
            f"‚ûï {get_text('common.add_new', 'Th√™m m·ªõi')}"
        ])
        
        with veteran_tabs[0]:
            st.subheader(f"üìã {get_text('profile.veteran_list', 'Danh s√°ch c·ª±u chi·∫øn binh')}")
            
            # Th√™m √¥ t√¨m ki·∫øm
            search_query = st.text_input(
                f"üîç {get_text('common.search_by_name', 'T√¨m ki·∫øm theo t√™n')}", 
                key="search_veteran"
            )
            
            # L·∫•y danh s√°ch c·ª±u chi·∫øn binh
            veterans = db.get_veterans()
            
            # L·ªçc c·ª±u chi·∫øn binh theo t√¨m ki·∫øm n·∫øu c√≥
            if search_query:
                search_query = search_query.lower()
                veterans = [v for v in veterans if search_query in v.full_name.lower()]
            
            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng c·ª±u chi·∫øn binh
            st.info(f"üìä {get_text('common.total', 'T·ªïng s·ªë')}: {len(veterans)} {get_text('common.veteran', 'c·ª±u chi·∫øn binh')}")
            
            # Hi·ªÉn th·ªã danh s√°ch c·ª±u chi·∫øn binh trong c√°c expanders
            for veteran in veterans:
                with st.expander(f"üéñÔ∏è {veteran.full_name}"):
                    # Th√¥ng tin chi ti·∫øt c·ª±u chi·∫øn binh
                    display_veteran_details(veteran, db)
                    
                    # N√∫t ch·ªânh s·ª≠a
                    if can_edit_veteran_info():
                        if st.button(f"‚úèÔ∏è {get_text('common.edit', 'Ch·ªânh s·ª≠a')}", key=f"edit_veteran_{veteran.id}"):
                            st.session_state.edit_veteran_id = veteran.id
                            st.rerun()
            
            # Hi·ªÉn th·ªã form ch·ªânh s·ª≠a n·∫øu ƒë√£ ch·ªçn c·ª±u chi·∫øn binh
            if hasattr(st.session_state, 'edit_veteran_id'):
                for veteran in veterans:
                    if veteran.id == st.session_state.edit_veteran_id:
                        handle_veteran_edit(veteran, db)
                        break
                
                # N√∫t h·ªßy ch·ªânh s·ª≠a
                if st.button(f"‚ùå {get_text('common.cancel_edit', 'H·ªßy ch·ªânh s·ª≠a')}", key="cancel_veteran_edit"):
                    del st.session_state.edit_veteran_id
                    st.rerun()
        
        with veteran_tabs[1]:
            # Ki·ªÉm tra quy·ªÅn th√™m c·ª±u chi·∫øn binh m·ªõi
            if can_edit_veteran_info():
                add_new_veteran(db)
            else:
                st.warning(get_text("profile.veteran_add_permission_denied", "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m c·ª±u chi·∫øn binh m·ªõi"))

if __name__ == "__main__":
    render()