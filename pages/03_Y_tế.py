import streamlit as st
from auth import init_auth, check_auth, check_role, check_page_access
from database import Database
from utils import show_success, show_error, apply_theme
from datetime import datetime
from translations import get_text

def render():
    # Initialize authentication first
    init_auth()
    
    # Apply theme from session state
    # apply_theme()  # Disabled - using Streamlit defaults

    # Set current page for role checking
    st.session_state.current_page = "03_Y_t·∫ø"

    check_auth()
    
    # Check if user has access to this page dynamically
    if not check_page_access('03_Y_t·∫ø'):
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.")
        st.stop()
        return

    st.title(get_text("pages.healthcare.title", "Qu·∫£n L√Ω H·ªì S∆° Y T·∫ø"))

    db = Database()

    tab1, tab2 = st.tabs([
        get_text("pages.healthcare.view_records", "üìã Xem H·ªì S∆°"), 
        get_text("pages.healthcare.add_record", "‚ûï Th√™m H·ªì S∆°")
    ])

    with tab1:
        # Add filters
        st.subheader(get_text("healthcare.filters", "B·ªô l·ªçc"))
        col1, col2, col3 = st.columns(3)

        with col1:
            patient_type = st.selectbox(
                get_text("healthcare.patient_type", "üè• Lo·∫°i b·ªánh nh√¢n"),
                [
                    get_text("healthcare.all", "T·∫•t c·∫£"), 
                    get_text("healthcare.student", "Sinh vi√™n"), 
                    get_text("healthcare.veteran", "C·ª±u chi·∫øn binh")
                ],
                key="view_filter_patient_type"
            )
        with col2:
            patient_filter = st.text_input(get_text("healthcare.search_name", "üîç T√¨m theo t√™n"), key="view_patient_filter")
        with col3:
            # Set default date range to include records from last 30 days
            from datetime import timedelta
            default_start = datetime.now().date() - timedelta(days=30)
            default_end = datetime.now().date()
            date_range = st.date_input(
                get_text("healthcare.date_range", "üìÖ Kho·∫£ng th·ªùi gian"),
                value=(default_start, default_end),
                key="view_date_range"
            )

        try:
            # Build query based on filters with proper patient name resolution
            query = """
                SELECT mr.*, 
                    u.full_name as doctor_name,
                    CASE 
                        WHEN mr.patient_type = 'student' THEN s.full_name
                        WHEN mr.patient_type = 'veteran' THEN COALESCE(v.full_name, 'C·ª±u chi·∫øn binh ' || mr.patient_id)
                        ELSE 'B·ªánh nh√¢n ' || mr.patient_id
                    END as patient_name,
                    CASE 
                        WHEN mr.patient_type = 'student' THEN s.email
                        WHEN mr.patient_type = 'veteran' THEN v.email
                        ELSE 'unknown@example.com'
                    END as patient_email,
                    mr.patient_id as patient_id_actual
                FROM medical_records mr
                LEFT JOIN users u ON mr.doctor_id = u.id
                LEFT JOIN students s ON mr.patient_id = s.id AND mr.patient_type = 'student'
                LEFT JOIN veterans v ON mr.patient_id = v.id AND mr.patient_type = 'veteran'
                WHERE 1=1
            """
            params = []

            # For family users, only show their student's medical records
            if st.session_state.user.role == 'family':
                query += " AND mr.patient_type = ? AND s.id = ?"
                params.extend(['student', st.session_state.user.family_student_id])

            if patient_type != "T·∫•t c·∫£":
                query += " AND mr.patient_type = ?"
                params.append("student" if patient_type == "Sinh vi√™n" else "veteran")

            if patient_filter:
                query += " AND (s.full_name LIKE ? OR v.full_name LIKE ?)"
                params.extend([f"%{patient_filter}%", f"%{patient_filter}%"])

            if len(date_range) == 2:
                query += " AND DATE(mr.date) BETWEEN ? AND ?"
                params.extend([date_range[0], date_range[1]])

            query += " ORDER BY mr.date DESC"

            medical_records = db.conn.execute(query, params).fetchall()

            if medical_records:
                # Group medical records by patient
                records_by_patient = {}
                for record in medical_records:
                    # From debug output: After mr.* (12 fields), we have doctor_name(12), patient_name(13), patient_email(14), patient_id_actual(15)
                    patient_name = record[13]  # patient_name  
                    patient_id = record[15]    # patient_id_actual
                    patient_type = record[2]   # patient_type
                    
                    if patient_id not in records_by_patient:
                        records_by_patient[patient_id] = {
                            'name': patient_name,
                            'type': patient_type,
                            'records': []
                        }
                    
                    records_by_patient[patient_id]['records'].append(record)
                
                # Display medical records by patient
                for patient_id, data in records_by_patient.items():
                    patient_name = data['name']
                    patient_type = data['type']
                    patient_records = data['records']
                    
                    type_icon = "üéì" if patient_type == "student" else "üéñÔ∏è"
                    st.write(f"### {type_icon} {patient_name}")
                    
                    for record in patient_records:
                        # Correct field positions from debug output:
                        # ['int:id', 'int:patient_id', 'str:patient_type', 'str:diagnosis', 'str:treatment', 'int:doctor_id', 'str:date', ...]
                        date_field = record[6]  # The date field is actually at position 6
                        
                        try:
                            # Handle different date formats
                            if isinstance(date_field, str):
                                # Try to parse as full datetime string first (YYYY-MM-DD HH:MM:SS)
                                try:
                                    parsed_date = datetime.strptime(date_field, '%Y-%m-%d %H:%M:%S.%f')
                                    exam_date = parsed_date.strftime('%d/%m/%Y')
                                except ValueError:
                                    try:
                                        parsed_date = datetime.strptime(date_field, '%Y-%m-%d %H:%M:%S')
                                        exam_date = parsed_date.strftime('%d/%m/%Y')
                                    except ValueError:
                                        # Try to parse as YYYY-MM-DD format
                                        try:
                                            parsed_date = datetime.strptime(date_field, '%Y-%m-%d')
                                            exam_date = parsed_date.strftime('%d/%m/%Y')
                                        except ValueError:
                                            # Try to parse as datetime string format
                                            try:
                                                parsed_date = datetime.strptime(date_field.split()[0], '%Y-%m-%d')
                                                exam_date = parsed_date.strftime('%d/%m/%Y')
                                            except (ValueError, IndexError):
                                                exam_date = str(date_field)
                            elif hasattr(date_field, 'strftime'):
                                # Handle date/datetime objects
                                exam_date = date_field.strftime('%d/%m/%Y')
                            else:
                                # Handle numeric or other types
                                exam_date = str(date_field)
                        except (ValueError, AttributeError):
                            # Fallback for invalid dates
                            exam_date = str(date_field) if date_field else "Kh√¥ng x√°c ƒë·ªãnh"
                        
                        with st.expander(f"üè• Kh√°m ng√†y: {exam_date}", expanded=False):
                            col1, col2 = st.columns(2)

                            with col1:
                                st.markdown(f"**üóìÔ∏è Ng√†y kh√°m:** {exam_date}")
                                st.markdown(f"**üë®‚Äç‚öïÔ∏è B√°c sƒ©:** {record[12]}")  # doctor_name
                                st.markdown(f"**üîç Ch·∫©n ƒëo√°n:** {record[3]}")  # diagnosis

                            with col2:
                                st.markdown("**üíä ƒêi·ªÅu tr·ªã:**")
                                st.info(record[4])  # treatment
                                if record[7]:  # notes
                                    st.markdown("**üìù Ghi ch√∫:**")
                                    st.info(record[7])

                            # Email notification section (only show for non-family users)
                            if st.session_state.user.role != 'family':
                                st.markdown("---")
                                patient_email = record[14]  # patient_email
                                if patient_email:
                                    col3, col4 = st.columns([3, 1])
                                    with col3:
                                        st.info("üìß C√≥ th·ªÉ g·ª≠i th√¥ng b√°o qua email")
                                    with col4:
                                        if st.button("üì§ G·ª≠i th√¥ng b√°o", key=f"notify_medical_{record[0]}"):
                                            if db.send_medical_record_notification(record[0]):
                                                show_success("ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng!")
                                                st.rerun()
                                            else:
                                                show_error("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o")
                                else:
                                    st.error("‚ùå Kh√¥ng c√≥ email b·ªánh nh√¢n")
            else:
                st.info(get_text("pages.healthcare.no_records_found", "üîç Kh√¥ng t√¨m th·∫•y h·ªì s∆° y t·∫ø ph√π h·ª£p v·ªõi b·ªô l·ªçc"))

        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")
            print(f"Database error: {str(e)}")

    # Only show add medical record tab for doctors, nurses and admin
    if st.session_state.user.role in ['doctor', 'nurse', 'admin']:
        with tab2:
            st.info(get_text("pages.healthcare.instructions", """
            ‚ÑπÔ∏è **H∆∞·ªõng d·∫´n:**
            1. Ch·ªçn b·ªánh nh√¢n (sinh vi√™n ho·∫∑c c·ª±u chi·∫øn binh)
            2. ƒêi·ªÅn th√¥ng tin ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã
            3. Th√™m ghi ch√∫ (n·∫øu c·∫ßn)
            4. T√πy ch·ªçn g·ª≠i th√¥ng b√°o email
            """))

            with st.form("add_medical_record", clear_on_submit=True):
                st.subheader(get_text("pages.healthcare.record_info", "Th√¥ng tin kh√°m b·ªánh"))

                # Patient type selection
                col1, col2 = st.columns(2)
                with col1:
                    patient_type = st.selectbox(
                        get_text("healthcare.patient_type", "üè• Lo·∫°i b·ªánh nh√¢n"),
                        ["student", "veteran"],
                        format_func=lambda x: "Sinh vi√™n" if x == "student" else "C·ª±u chi·∫øn binh",
                        key="add_patient_type"
                    )
                
                # Get appropriate patient list based on type
                if patient_type == "student":
                    patients = db.get_students_for_selection()
                    patient_options = [f"{name} (ID: {id})" for id, name in patients]
                    selection_label = "üéì Ch·ªçn sinh vi√™n"
                else:
                    veterans = db.get_veterans_for_selection()
                    patient_options = [f"{name} (ID: {id})" for id, name in veterans]
                    selection_label = "üéñÔ∏è Ch·ªçn c·ª±u chi·∫øn binh"

                with col2:
                    if patient_options:
                        selected_patient = st.selectbox(
                            selection_label,
                            options=patient_options,
                            format_func=lambda x: str(x).split(" (ID: ")[0] if " (ID: " in str(x) else str(x)
                        )
                        # Extract patient ID from selection
                        patient_id = int(str(selected_patient).split("ID: ")[1].rstrip(")"))
                    else:
                        st.error(f"Kh√¥ng c√≥ {'sinh vi√™n' if patient_type == 'student' else 'c·ª±u chi·∫øn binh'} n√†o trong h·ªá th·ªëng")
                        patient_id = None

                col3, col4 = st.columns(2)
                with col3:
                    exam_date = st.date_input("üìÖ Ng√†y kh√°m", value=datetime.now().date())
                with col4:
                    send_notification = st.checkbox("üìß G·ª≠i th√¥ng b√°o email", value=True)

                diagnosis = st.text_area("üîç Ch·∫©n ƒëo√°n", height=100,
                    placeholder="Nh·∫≠p ch·∫©n ƒëo√°n chi ti·∫øt...")

                treatment = st.text_area("üíä ƒêi·ªÅu tr·ªã", height=100,
                    placeholder="Nh·∫≠p ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã v√† thu·ªëc...")

                notes = st.text_area("üìù Ghi ch√∫", height=80,
                    placeholder="Ghi ch√∫ b·ªï sung (kh√¥ng b·∫Øt bu·ªôc)...")

                if st.form_submit_button("‚úÖ Th√™m h·ªì s∆° y t·∫ø") and patient_id:
                    try:
                        record_data = {
                            "patient_id": patient_id,
                            "patient_type": patient_type,
                            "doctor_id": st.session_state.user.id,
                            "diagnosis": diagnosis,
                            "treatment": treatment,
                            "notes": notes
                        }
                        record_id = db.add_medical_record(record_data)

                        if record_id:
                            show_success("‚ú® Th√™m h·ªì s∆° y t·∫ø th√†nh c√¥ng!")
                            if send_notification:
                                if db.send_medical_record_notification(record_id):
                                    show_success("üì§ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng!")
                                else:
                                    show_error("‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o")
                            st.rerun()
                        else:
                            show_error("‚ùå Kh√¥ng th·ªÉ th√™m h·ªì s∆° y t·∫ø")
                    except Exception as e:
                        show_error(f"‚ùå L·ªói khi th√™m h·ªì s∆°: {str(e)}")
    else:
        with tab2:
            st.warning("‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m h·ªì s∆° y t·∫ø m·ªõi")

if __name__ == "__main__":
    render()