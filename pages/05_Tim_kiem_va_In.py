import streamlit as st
import pandas as pd
import sqlite3
from io import BytesIO
from auth import check_auth, is_search_allowed, is_print_allowed, can_manage_data, get_role_based_search_types
from database import Database
from utils import show_success, show_error, apply_theme, format_date
from datetime import datetime, date, timedelta
import plotly.graph_objects as go
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import inch
from translations import get_text
import os

def export_to_excel(db, person_type, person_id):
    """Export person data to Excel with formatting"""
    # Create Excel writer
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='openpyxl')

    # Get basic info - ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·ª• th·ªÉ ƒë·ªÉ tr√°nh l·ªói kh√¥ng kh·ªõp s·ªë c·ªôt
    if person_type == "student":
        query = """
            SELECT s.id, s.full_name, s.birth_date, s.address, s.email, 
                   s.admission_date, s.health_status, s.academic_status, 
                   s.psychological_status, s.gender, s.phone, 
                   c.name as class_name, c.academic_year
            FROM students s
            LEFT JOIN classes c ON s.class_id = c.id
            WHERE s.id = ?
        """
    else:
        query = """
            SELECT id, full_name, birth_date, address, email, 
                   service_period, health_condition, contact_info
            FROM veterans 
            WHERE id = ?
        """

    person = db.conn.execute(query, (person_id,)).fetchone()

    if person:
        # Basic Info Sheet
        basic_info = {
            'Th√¥ng tin': ['H·ªç v√† t√™n', 'Ng√†y sinh', 'ƒê·ªãa ch·ªâ', 'Email'],
            'Gi√° tr·ªã': [
                person[1],  # full_name
                person[2] or 'Ch∆∞a c·∫≠p nh·∫≠t',  # birth_date
                person[3] or 'Ch∆∞a c·∫≠p nh·∫≠t',  # address
                person[4] or 'Ch∆∞a c·∫≠p nh·∫≠t'   # email
            ]
        }

        if person_type == "student":
            # C·∫≠p nh·∫≠t ch·ªâ s·ªë d·ª±a tr√™n th·ª© t·ª± tr∆∞·ªùng trong c√¢u truy v·∫•n SQL
            # SELECT s.id, s.full_name, s.birth_date, s.address, s.email, 
            #        s.admission_date, s.health_status, s.academic_status, 
            #        s.psychological_status, s.gender, s.phone, 
            #        c.name as class_name, c.academic_year
            basic_info['Th√¥ng tin'].extend([
                'L·ªõp',
                'NƒÉm h·ªçc',
                'Ng√†y nh·∫≠p h·ªçc',
                'T√¨nh tr·∫°ng s·ª©c kh·ªèe',
                'T√¨nh tr·∫°ng h·ªçc t·∫≠p',
                'T√¨nh tr·∫°ng t√¢m l√Ω'
            ])
            basic_info['Gi√° tr·ªã'].extend([
                person[11] or 'Ch∆∞a ph√¢n l·ªõp',  # class_name
                person[12] or 'Ch∆∞a c·∫≠p nh·∫≠t',  # academic_year
                person[5] or 'Ch∆∞a c·∫≠p nh·∫≠t',   # admission_date
                person[6] or 'Ch∆∞a c·∫≠p nh·∫≠t',   # health_status
                person[7] or 'Ch∆∞a ƒë√°nh gi√°',   # academic_status
                person[8] or 'Ch∆∞a ƒë√°nh gi√°'    # psychological_status
            ])
        else:
            # C·∫≠p nh·∫≠t ch·ªâ s·ªë d·ª±a tr√™n th·ª© t·ª± tr∆∞·ªùng trong c√¢u truy v·∫•n SQL
            # SELECT id, full_name, birth_date, address, email, 
            #        service_period, health_condition, contact_info
            basic_info['Th√¥ng tin'].extend([
                'Th·ªùi gian ph·ª•c v·ª•',
                'T√¨nh tr·∫°ng s·ª©c kh·ªèe',
                'Li√™n h·ªá'
            ])
            basic_info['Gi√° tr·ªã'].extend([
                person[5] or 'Ch∆∞a c·∫≠p nh·∫≠t',  # service_period
                person[6] or 'Ch∆∞a c·∫≠p nh·∫≠t',  # health_condition
                person[7] or 'Ch∆∞a c·∫≠p nh·∫≠t'   # contact_info
            ])

        df_basic = pd.DataFrame(basic_info)
        df_basic.to_excel(writer, sheet_name='Th√¥ng tin c∆° b·∫£n', index=False)

        # Medical Records Sheet
        records = db.conn.execute("""
            SELECT mr.id, mr.patient_id, mr.patient_type, mr.diagnosis, mr.treatment,
                   mr.doctor_id, mr.date, mr.notes, mr.notification_sent,
                   u.full_name as doctor_name
            FROM medical_records mr
            JOIN users u ON mr.doctor_id = u.id
            WHERE mr.patient_id = ? AND mr.patient_type = ?
            ORDER BY mr.date DESC
        """, (person_id, person_type)).fetchall()

        if records:
            medical_data = []
            for record in records:
                medical_data.append({
                    'Ng√†y kh√°m': record[6],
                    'B√°c sƒ©': record[-1],
                    'Ch·∫©n ƒëo√°n': record[3],
                    'ƒêi·ªÅu tr·ªã': record[4],
                    'Ghi ch√∫': record[7] or ''
                })
            df_medical = pd.DataFrame(medical_data)
            df_medical.to_excel(writer, sheet_name='H·ªì s∆° y t·∫ø', index=False)

        # Psychological Evaluations Sheet (only for students)
        if person_type == "student":
            evals = db.conn.execute("""
                SELECT pe.id, pe.student_id, pe.evaluation_date, pe.evaluator_id, 
                       pe.assessment, pe.recommendations, pe.follow_up_date, pe.notification_sent,
                       u.full_name as evaluator_name
                FROM psychological_evaluations pe
                JOIN users u ON pe.evaluator_id = u.id
                WHERE pe.student_id = ?
                ORDER BY pe.evaluation_date DESC
            """, (person_id,)).fetchall()

            if evals:
                psych_data = []
                for eval in evals:
                    psych_data.append({
                        'Ng√†y ƒë√°nh gi√°': eval[2],
                        'Ng∆∞·ªùi ƒë√°nh gi√°': eval[-1],
                        'ƒê√°nh gi√°': eval[4],
                        'Khuy·∫øn ngh·ªã': eval[5],
                        'Ng√†y theo d√µi ti·∫øp': eval[6] or ''
                    })
                df_psych = pd.DataFrame(psych_data)
                df_psych.to_excel(writer, sheet_name='ƒê√°nh gi√° t√¢m l√Ω', index=False)

        # Auto-adjust columns width
        for worksheet in writer.sheets.values():
            for column in worksheet.columns:
                max_length = 0
                column = [cell for cell in column]
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = (max_length + 2)
                worksheet.column_dimensions[column[0].column_letter].width = adjusted_width

        # Save the file
        writer.close()
        return output.getvalue()
    return None

def search_section():
    """Ph·∫ßn t√¨m ki·∫øm to√†n b·ªô d·ªØ li·ªáu"""
    st.subheader(f"üîç {get_text('pages.search.detailed_search', 'T√¨m ki·∫øm chi ti·∫øt')}")
    
    # Ki·ªÉm tra quy·ªÅn s·ª≠ d·ª•ng t√¨m ki·∫øm
    if not is_search_allowed():
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng t√¨m ki·∫øm")
        return
    
    db = Database()
    
    # Ch·ªçn lo·∫°i t√¨m ki·∫øm d·ª±a theo vai tr√≤ ng∆∞·ªùi d√πng
    all_search_types = {
        "students": "H·ªçc sinh",
        "veterans": "C·ª±u chi·∫øn binh",
        "medical_records": "H·ªì s∆° y t·∫ø", 
        "psychological_evaluations": "ƒê√°nh gi√° t√¢m l√Ω"
    }
    
    # L·∫•y danh s√°ch lo·∫°i t√¨m ki·∫øm ƒë∆∞·ª£c ph√©p theo vai tr√≤
    allowed_search_types_keys = get_role_based_search_types()
    
    # Ch·ªâ hi·ªÉn th·ªã c√°c lo·∫°i t√¨m ki·∫øm ƒë∆∞·ª£c ph√©p
    search_types = [all_search_types[key] for key in allowed_search_types_keys]
    
    if not search_types:
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn t√¨m ki·∫øm b·∫•t k·ª≥ lo·∫°i d·ªØ li·ªáu n√†o")
        return
        
    search_type = st.selectbox("üîç Ch·ªçn lo·∫°i t√¨m ki·∫øm", search_types, key="search_type")

    # T·∫°o form t√¨m ki·∫øm
    with st.form("search_form"):
        # T√¨m ki·∫øm chung
        name_query = st.text_input("T√™n", key="search_name")
        
        # C√°c tr∆∞·ªùng t√¨m ki·∫øm b·ªï sung t√πy theo lo·∫°i
        advanced_fields = st.expander("üìã T√¨m ki·∫øm n√¢ng cao")
        
        # Tr∆∞·ªùng d·ªØ li·ªáu t√πy theo lo·∫°i t√¨m ki·∫øm
        with advanced_fields:
            if search_type == "H·ªçc sinh":
                st.markdown("#### Th√¥ng tin c∆° b·∫£n")
                
                col1, col2 = st.columns(2)
                with col1:
                    address = st.text_input("ƒê·ªãa ch·ªâ", key="search_address")
                    email = st.text_input("Email", key="search_email")
                    phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", key="search_phone")
                    
                with col2:
                    gender = st.selectbox(
                        "Gi·ªõi t√≠nh",
                        ["T·∫•t c·∫£", "Nam", "N·ªØ", "Kh√°c"],
                        key="search_gender"
                    )
                    year = st.text_input("NƒÉm", key="search_year")
                    parent_name = st.text_input("Ph·ª• huynh", key="search_parent")
                
                st.markdown("#### Th√¥ng tin h·ªçc t·∫≠p")
                class_options = [(None, "T·∫•t c·∫£ l·ªõp")] + [(c.id, c.name) for c in db.get_classes()]
                selected_class = st.selectbox(
                    "L·ªõp",
                    options=range(len(class_options)),
                    format_func=lambda i: class_options[i][1],
                    key="search_class"
                )
                class_id = class_options[selected_class][0] if selected_class > 0 else None
                
                col1, col2 = st.columns(2)
                with col1:
                    use_admission_date = st.checkbox("L·ªçc theo ng√†y nh·∫≠p h·ªçc", key="use_admission_date")
                    if use_admission_date:
                        admission_date_range = st.date_input(
                            "Ph·∫°m vi ng√†y nh·∫≠p h·ªçc",
                            value=[datetime.now().replace(day=1), datetime.now()],
                            key="admission_date_range"
                        )
                
                with col2:
                    use_birth_date = st.checkbox("L·ªçc theo ng√†y sinh", key="use_birth_date")
                    if use_birth_date:
                        birth_date_range = st.date_input(
                            "Ph·∫°m vi ng√†y sinh",
                            value=[datetime.now().replace(year=datetime.now().year-18, day=1), datetime.now()],
                            key="birth_date_range"
                        )
                
                st.markdown("#### T√¨nh tr·∫°ng")
                col1, col2, col3 = st.columns(3)
                with col1:
                    health_status = st.selectbox(
                        "T√¨nh tr·∫°ng s·ª©c kh·ªèe",
                        ["T·∫•t c·∫£", "T·ªët", "B√¨nh th∆∞·ªùng", "·ªîn ƒë·ªãnh", "C·∫ßn ch√∫ √Ω"],
                        key="search_health"
                    )
                with col2:
                    academic_status = st.selectbox(
                        "T√¨nh tr·∫°ng h·ªçc t·∫≠p",
                        ["T·∫•t c·∫£", "Xu·∫•t s·∫Øc", "T·ªët", "Trung b√¨nh", "C·∫ßn c·∫£i thi·ªán", "Ch∆∞a ƒë√°nh gi√°"],
                        key="search_academic"
                    )
                with col3:
                    psychological_status = st.selectbox(
                        "T√¨nh tr·∫°ng t√¢m l√Ω",
                        ["T·∫•t c·∫£", "·ªîn ƒë·ªãnh", "C·∫ßn theo d√µi", "C·∫ßn h·ªó tr·ª£", "T·ªët", "Ch∆∞a ƒë√°nh gi√°"],
                        key="search_psych"
                    )
                
            elif search_type == "C·ª±u chi·∫øn binh":
                st.markdown("#### Th√¥ng tin c∆° b·∫£n")
                col1, col2 = st.columns(2)
                with col1:
                    address = st.text_input("ƒê·ªãa ch·ªâ", key="search_vet_address")
                    email = st.text_input("Email", key="search_vet_email")
                with col2:
                    contact_info = st.text_input("Th√¥ng tin li√™n h·ªá", key="search_vet_contact")
                    service_period = st.text_input("Th·ªùi gian ph·ª•c v·ª•", key="search_service")
                
                st.markdown("#### T√¨nh tr·∫°ng s·ª©c kh·ªèe")
                health_condition = st.text_input("T√¨nh tr·∫°ng s·ª©c kh·ªèe", key="search_vet_health")
                
                use_birth_date = st.checkbox("L·ªçc theo ng√†y sinh", key="use_vet_birth_date")
                if use_birth_date:
                    birth_date_range = st.date_input(
                        "Ph·∫°m vi ng√†y sinh",
                        value=[datetime.now().replace(year=datetime.now().year-65), datetime.now()],
                        key="vet_birth_date_range"
                    )
                
            else:  # Y t·∫ø v√† T√¢m l√Ω
                st.markdown("#### Th·ªùi gian")
                use_date_filter = st.checkbox("L·ªçc theo th·ªùi gian", key="use_date_filter")
                if use_date_filter:
                    date_range = st.date_input(
                        "Ph·∫°m vi th·ªùi gian",
                        value=[datetime.now().replace(day=1), datetime.now()],
                        key="date_range"
                    )
                
                if search_type == "H·ªì s∆° y t·∫ø":
                    # Danh s√°ch b√°c sƒ©
                    doctor_options = [(None, "T·∫•t c·∫£ b√°c sƒ©")]
                    doctors = db.conn.execute("""
                        SELECT id, full_name FROM users 
                        WHERE role = 'doctor' OR role = 'nurse' OR role = 'admin'
                        ORDER BY full_name
                    """).fetchall()
                    doctor_options += [(d[0], d[1]) for d in doctors]
                    
                    selected_doctor = st.selectbox(
                        "B√°c sƒ©",
                        options=range(len(doctor_options)),
                        format_func=lambda i: doctor_options[i][1],
                        key="search_doctor"
                    )
                    doctor_id = doctor_options[selected_doctor][0] if selected_doctor > 0 else None
                    
                    diagnosis = st.text_input("Ch·∫©n ƒëo√°n", key="search_diagnosis")
                    treatment = st.text_input("ƒêi·ªÅu tr·ªã", key="search_treatment")
                
                elif search_type == "ƒê√°nh gi√° t√¢m l√Ω":
                    # Danh s√°ch chuy√™n vi√™n t√¢m l√Ω
                    counselor_options = [(None, "T·∫•t c·∫£ chuy√™n vi√™n")]
                    counselors = db.conn.execute("""
                        SELECT id, full_name FROM users 
                        WHERE role = 'counselor' OR role = 'admin'
                        ORDER BY full_name
                    """).fetchall()
                    counselor_options += [(c[0], c[1]) for c in counselors]
                    
                    selected_counselor = st.selectbox(
                        "Chuy√™n vi√™n",
                        options=range(len(counselor_options)),
                        format_func=lambda i: counselor_options[i][1],
                        key="search_counselor"
                    )
                    counselor_id = counselor_options[selected_counselor][0] if selected_counselor > 0 else None
                    
                    assessment = st.text_input("ƒê√°nh gi√°", key="search_assessment")
                    recommendations = st.text_input("Khuy·∫øn ngh·ªã", key="search_recommendations")
        
        # N√∫t t√¨m ki·∫øm
        search_button = st.form_submit_button("üîç T√¨m ki·∫øm")
        
        if search_button:
            # T·∫°o query t√¨m ki·∫øm
            query = {"name": name_query}
            
            # Th√™m c√°c tr∆∞·ªùng t√¨m ki·∫øm n√¢ng cao
            if search_type == "H·ªçc sinh":
                if address:
                    query["address"] = address
                if email:
                    query["email"] = email
                if phone:
                    query["phone"] = phone
                if gender != "T·∫•t c·∫£":
                    query["gender"] = gender
                if year:
                    query["year"] = year
                if parent_name:
                    query["parent_name"] = parent_name
                if class_id is not None:
                    query["class_id"] = class_id
                if health_status != "T·∫•t c·∫£":
                    query["health_status"] = health_status
                if academic_status != "T·∫•t c·∫£":
                    query["academic_status"] = academic_status
                if psychological_status != "T·∫•t c·∫£":
                    query["psychological_status"] = psychological_status
                
                # Th√™m l·ªçc theo ng√†y nh·∫≠p h·ªçc
                if 'use_admission_date' in locals() and use_admission_date and 'admission_date_range' in locals() and len(admission_date_range) > 1:
                    query["from_date"] = admission_date_range[0].strftime("%Y-%m-%d")
                    query["to_date"] = admission_date_range[1].strftime("%Y-%m-%d")
                
                # Th√™m l·ªçc theo ng√†y sinh
                if 'use_birth_date' in locals() and use_birth_date and 'birth_date_range' in locals() and len(birth_date_range) > 1:
                    query["birth_date_from"] = birth_date_range[0].strftime("%Y-%m-%d")
                    query["birth_date_to"] = birth_date_range[1].strftime("%Y-%m-%d")
                
                # In log debug
                st.write(f"Query: {query}")
                
                # Th·ª±c hi·ªán t√¨m ki·∫øm v√† l∆∞u v√†o session state
                st.session_state.search_results_students = db.search_students(query)
                st.session_state.current_search_type = "H·ªçc sinh"
                
            elif search_type == "C·ª±u chi·∫øn binh":
                if address:
                    query["address"] = address
                if email:
                    query["email"] = email
                if contact_info:
                    query["contact_info"] = contact_info
                if service_period:
                    query["service_period"] = service_period
                if health_condition:
                    query["health_condition"] = health_condition
                
                # Th√™m l·ªçc theo ng√†y sinh
                if 'use_birth_date' in locals() and use_birth_date and 'birth_date_range' in locals() and len(birth_date_range) > 1:
                    query["birth_date_from"] = birth_date_range[0].strftime("%Y-%m-%d")
                    query["birth_date_to"] = birth_date_range[1].strftime("%Y-%m-%d")
                
                # In log debug
                st.write(f"Veteran Query: {query}")
                
                # Th·ª±c hi·ªán t√¨m ki·∫øm
                st.session_state.search_results_veterans = db.search_veterans(query)
                st.session_state.current_search_type = "C·ª±u chi·∫øn binh"
                
            elif search_type == "H·ªì s∆° y t·∫ø":
                if doctor_id is not None:
                    query["doctor_id"] = doctor_id
                if diagnosis:
                    query["diagnosis"] = diagnosis
                if treatment:
                    query["treatment"] = treatment
                
                # Th√™m l·ªçc theo th·ªùi gian
                if use_date_filter and 'date_range' in locals() and len(date_range) > 1:
                    query["from_date"] = date_range[0].strftime("%Y-%m-%d")
                    query["to_date"] = date_range[1].strftime("%Y-%m-%d")
                
                # Th·ª±c hi·ªán t√¨m ki·∫øm
                st.session_state.search_results_medical = db.search_medical_records(query)
                st.session_state.current_search_type = "H·ªì s∆° y t·∫ø"
                
            elif search_type == "ƒê√°nh gi√° t√¢m l√Ω":
                if counselor_id is not None:
                    query["evaluator_id"] = counselor_id
                if assessment:
                    query["assessment"] = assessment
                if recommendations:
                    query["recommendations"] = recommendations
                
                # Th√™m l·ªçc theo th·ªùi gian
                if use_date_filter and 'date_range' in locals() and len(date_range) > 1:
                    query["from_date"] = date_range[0].strftime("%Y-%m-%d")
                    query["to_date"] = date_range[1].strftime("%Y-%m-%d")
                
                # Th·ª±c hi·ªán t√¨m ki·∫øm
                st.session_state.search_results_psych = db.search_psychological_evaluations(query)
                st.session_state.current_search_type = "ƒê√°nh gi√° t√¢m l√Ω"
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm (ngo√†i form)
    if 'current_search_type' in st.session_state:
        search_type = st.session_state.current_search_type
        
        if search_type == "H·ªçc sinh" and 'search_results_students' in st.session_state:
            students = st.session_state.search_results_students
            
            st.subheader(f"üîé K·∫øt qu·∫£: {len(students)} h·ªçc sinh")
            
            # N·∫øu c√≥ k·∫øt qu·∫£, hi·ªÉn th·ªã c√°c n√∫t xu·∫•t danh s√°ch
            if students:
                # Button ƒë·ªÉ xu·∫•t danh s√°ch h·ªçc sinh k·∫øt qu·∫£ (ngo√†i form)
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button("üìÑ Xu·∫•t danh s√°ch Excel", key="export_students_excel"):
                        export_student_list(students, 'excel')
                with col2:
                    if st.button("üìÑ Xu·∫•t danh s√°ch CSV", key="export_students_csv"):
                        export_student_list(students, 'csv')
                with col3:
                    if st.button("üìÑ Xu·∫•t danh s√°ch PDF", key="export_students_pdf"):
                        export_student_list(students, 'pdf')
                
                st.markdown("---")
                
                # Hi·ªÉn th·ªã danh s√°ch h·ªçc sinh
                for student in students:
                    with st.expander(f"üë®‚Äçüéì {student.full_name}", expanded=False):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown(f"**üéÇ Ng√†y sinh:** {student.birth_date or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**üìß Email:** {student.email or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**üìç ƒê·ªãa ch·ªâ:** {student.address or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                        with col2:
                            if student.admission_date:
                                st.markdown(f"**üìÖ Ng√†y nh·∫≠p h·ªçc:** {student.admission_date}")
                            else:
                                st.markdown(f"**üìÖ Ng√†y nh·∫≠p h·ªçc:** Ch∆∞a c·∫≠p nh·∫≠t")
                            st.markdown(f"**üè• T√¨nh tr·∫°ng s·ª©c kh·ªèe:** {student.health_status or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**üìö T√¨nh tr·∫°ng h·ªçc t·∫≠p:** {student.academic_status or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            if hasattr(student, 'psychological_status'):
                                st.markdown(f"**üß† T√¨nh tr·∫°ng t√¢m l√Ω:** {student.psychological_status or 'Ch∆∞a ƒë√°nh gi√°'}")
                            else:
                                st.markdown(f"**üß† T√¨nh tr·∫°ng t√¢m l√Ω:** Ch∆∞a ƒë√°nh gi√°")
            else:
                st.info("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p")
                
        elif search_type == "C·ª±u chi·∫øn binh" and 'search_results_veterans' in st.session_state:
            veterans = st.session_state.search_results_veterans
            
            st.subheader(f"üîé K·∫øt qu·∫£: {len(veterans)} c·ª±u chi·∫øn binh")
            if veterans:
                # Hi·ªÉn th·ªã danh s√°ch c·ª±u chi·∫øn binh
                for veteran in veterans:
                    with st.expander(f"üéñÔ∏è {veteran.full_name}", expanded=False):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown(f"**üéÇ Ng√†y sinh:** {veteran.birth_date or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**üèÖ Th·ªùi gian ph·ª•c v·ª•:** {veteran.service_period or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**üìç ƒê·ªãa ch·ªâ:** {veteran.address or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                        with col2:
                            st.markdown(f"**üìß Email:** {veteran.email or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**üìû Li√™n h·ªá:** {veteran.contact_info or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**üè• T√¨nh tr·∫°ng s·ª©c kh·ªèe:** {veteran.health_condition or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
            else:
                st.info("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p")
                
        elif search_type == "H·ªì s∆° y t·∫ø" and 'search_results_medical' in st.session_state:
            records = st.session_state.search_results_medical
            
            st.subheader(f"üîé K·∫øt qu·∫£: {len(records)} h·ªì s∆° y t·∫ø")
            if records:
                for record in records:
                    patient_type = "H·ªçc sinh" if record['patient_type'] == "student" else "C·ª±u chi·∫øn binh"
                    with st.expander(f"üè• {record['patient_name']} - {patient_type} - {record['date']}", expanded=False):
                        st.markdown(f"**üë®‚Äç‚öïÔ∏è B√°c sƒ©:** {record['doctor_name']}")
                        st.markdown(f"**üìÖ Ng√†y kh√°m:** {record['date']}")
                        st.markdown("**üìã Ch·∫©n ƒëo√°n:**")
                        st.info(record['diagnosis'])
                        st.markdown("**üíä ƒêi·ªÅu tr·ªã:**")
                        st.info(record['treatment'])
                        if record['notes']:
                            st.markdown("**üìù Ghi ch√∫:**")
                            st.info(record['notes'])
            else:
                st.info("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p")
                
        elif search_type == "ƒê√°nh gi√° t√¢m l√Ω" and 'search_results_psych' in st.session_state:
            evals = st.session_state.search_results_psych
            
            st.subheader(f"üîé K·∫øt qu·∫£: {len(evals)} ƒë√°nh gi√° t√¢m l√Ω")
            if evals:
                for eval in evals:
                    with st.expander(f"üß† {eval['student_name']} - {eval['evaluation_date']}", expanded=False):
                        st.markdown(f"**üë®‚Äç‚öïÔ∏è Chuy√™n vi√™n:** {eval['evaluator_name']}")
                        st.markdown(f"**üìÖ Ng√†y ƒë√°nh gi√°:** {eval['evaluation_date']}")
                        st.markdown("**üìã ƒê√°nh gi√°:**")
                        st.info(eval['assessment'])
                        st.markdown("**üí° Khuy·∫øn ngh·ªã:**")
                        st.info(eval['recommendations'])
                        if eval['follow_up_date']:
                            st.markdown(f"**üìÖ Ng√†y theo d√µi ti·∫øp:** {eval['follow_up_date']}")
            else:
                st.info("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p")

def save_changes_to_db(conn, table_name, original_df, edited_df, start_idx):
    """L∆∞u thay ƒë·ªïi v√†o database"""
    cursor = conn.cursor()
    
    # L·∫•y th√¥ng tin c√°c c·ªôt c·ªßa b·∫£ng
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns_info = cursor.fetchall()
    primary_key = next((col[1] for col in columns_info if col[5] == 1), None)  # L·∫•y t√™n c·ªôt l√† kh√≥a ch√≠nh
    
    if not primary_key:
        # N·∫øu kh√¥ng c√≥ kh√≥a ch√≠nh, d√πng rowid
        primary_key = "rowid"
    
    # Duy·ªát qua t·ª´ng h√†ng ƒë·ªÉ ki·ªÉm tra s·ª± thay ƒë·ªïi
    for i in range(len(edited_df)):
        original_row = original_df.iloc[i]
        edited_row = edited_df.iloc[i]
        
        # So s√°nh t·ª´ng h√†ng ƒë·ªÉ ph√°t hi·ªán thay ƒë·ªïi
        if not original_row.equals(edited_row):
            # T·∫°o chu·ªói c·∫≠p nh·∫≠t SET column=value
            updates = []
            params = []
            
            for col in edited_df.columns:
                if original_row[col] != edited_row[col]:
                    updates.append(f"{col} = ?")
                    params.append(edited_row[col])
            
            if updates:
                # L·∫•y gi√° tr·ªã c·ªßa kh√≥a ch√≠nh
                if primary_key in original_row:
                    pk_value = original_row[primary_key]
                else:
                    # N·∫øu kh√¥ng t√¨m th·∫•y kh√≥a ch√≠nh trong DataFrame, d√πng rowid
                    pk_value = start_idx + i + 1
                
                # T·∫°o v√† th·ª±c thi truy v·∫•n UPDATE
                query = f"UPDATE {table_name} SET {', '.join(updates)} WHERE {primary_key} = ?"
                params.append(pk_value)
                cursor.execute(query, params)
    
    # Commit c√°c thay ƒë·ªïi
    conn.commit()

def export_student_list(students, format_type='excel'):
    """Xu·∫•t danh s√°ch h·ªçc sinh d·ª±a theo k·∫øt qu·∫£ t√¨m ki·∫øm"""
    if not students:
        st.warning("Kh√¥ng c√≥ h·ªçc sinh n√†o ƒë·ªÉ xu·∫•t")
        return
    
    # Kh√¥ng c·∫ßn debug code n·ªØa, ƒë√£ hi·ªÉu r√µ c·∫•u tr√∫c c·ªßa Student object
    
    db = Database()
    
    # Danh s√°ch c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë·ªÉ xu·∫•t - l∆∞u √Ω ph·∫£i gi·ªØ s·ªë l∆∞·ª£ng c·ªôt n√†y kh·ªõp v·ªõi student_data
    export_fields = [
        "ID", "H·ªç v√† t√™n", "Ng√†y sinh", "Gi·ªõi t√≠nh", "ƒê·ªãa ch·ªâ", 
        "Email", "S·ªë ƒëi·ªán tho·∫°i", "L·ªõp", "Ng√†y nh·∫≠p h·ªçc", 
        "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "T√¨nh tr·∫°ng h·ªçc t·∫≠p", "T√¨nh tr·∫°ng t√¢m l√Ω"
    ]
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho export
    data = []
    for student in students:
        # L·∫•y th√¥ng tin l·ªõp h·ªçc n·∫øu c√≥
        class_name = "Ch∆∞a ph√¢n l·ªõp"
        if student.class_id:
            class_info = db.get_class(student.class_id)
            if class_info:
                class_name = class_info.name
        
        # T·∫°o dictionary cho m·ªói h·ªçc sinh - QUAN TR·ªåNG: ch·ªâ l·∫•y c√°c tr∆∞·ªùng c√≥ trong export_fields
        student_data = {}
        student_data["ID"] = student.id
        student_data["H·ªç v√† t√™n"] = student.full_name
        student_data["Ng√†y sinh"] = format_date(student.birth_date) if student.birth_date else "Ch∆∞a c·∫≠p nh·∫≠t"
        student_data["Gi·ªõi t√≠nh"] = student.gender or "Ch∆∞a c·∫≠p nh·∫≠t"
        student_data["ƒê·ªãa ch·ªâ"] = student.address or "Ch∆∞a c·∫≠p nh·∫≠t"
        student_data["Email"] = student.email or "Ch∆∞a c·∫≠p nh·∫≠t"
        student_data["S·ªë ƒëi·ªán tho·∫°i"] = student.phone or "Ch∆∞a c·∫≠p nh·∫≠t"
        student_data["L·ªõp"] = class_name
        student_data["Ng√†y nh·∫≠p h·ªçc"] = format_date(student.admission_date) if student.admission_date else "Ch∆∞a c·∫≠p nh·∫≠t"
        student_data["T√¨nh tr·∫°ng s·ª©c kh·ªèe"] = student.health_status or "Ch∆∞a ƒë√°nh gi√°"
        student_data["T√¨nh tr·∫°ng h·ªçc t·∫≠p"] = student.academic_status or "Ch∆∞a ƒë√°nh gi√°"
        student_data["T√¨nh tr·∫°ng t√¢m l√Ω"] = student.psychological_status or "Ch∆∞a ƒë√°nh gi√°"
        
        # ƒê·∫£m b·∫£o kh√¥ng c√≥ tr∆∞·ªùng th·ª´a
        data.append({field: student_data[field] for field in export_fields})
    
    # T·∫°o DataFrame v·ªõi ƒë√∫ng s·ªë c·ªôt nh∆∞ ƒë√£ ƒë·ªãnh nghƒ©a
    df = pd.DataFrame(data)
    
    # Timestamp cho t√™n file
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Xu·∫•t theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu
    if format_type == 'excel':
        # ƒê·∫£m b·∫£o ch·ªâ l·∫•y c√°c c·ªôt ·ªïn ƒë·ªãnh cho Excel
        # L·∫•y danh s√°ch c·ªôt v√† lo·∫°i b·ªè c√°c thu·ªôc t√≠nh kh√¥ng c·∫ßn thi·∫øt
        required_columns = [
            "ID", "H·ªç v√† t√™n", "Ng√†y sinh", "Gi·ªõi t√≠nh", "ƒê·ªãa ch·ªâ", 
            "Email", "S·ªë ƒëi·ªán tho·∫°i", "L·ªõp", "Ng√†y nh·∫≠p h·ªçc", 
            "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "T√¨nh tr·∫°ng h·ªçc t·∫≠p", "T√¨nh tr·∫°ng t√¢m l√Ω"
        ]
        
        # ƒê√¢y l√† v·∫•n ƒë·ªÅ ch√≠nh - t·∫°o DataFrame m·ªõi ho√†n to√†n t·ª´ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        # thay v√¨ d√πng DataFrame hi·ªán t·∫°i v√† c√°c c·ªôt c·ªßa n√≥
        excel_data = []
        for student_data in data:
            row = {}
            for col in required_columns:
                row[col] = student_data.get(col, "")
            excel_data.append(row)
                
        # T·∫°o DataFrame m·ªõi v·ªõi ƒë√∫ng c·∫•u tr√∫c
        excel_df = pd.DataFrame(excel_data, columns=required_columns)
                
        # Xu·∫•t ra Excel
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            excel_df.to_excel(writer, index=False, sheet_name="Danh s√°ch h·ªçc sinh")
            
            # ƒê·ªãnh d·∫°ng sheet ƒë·ªÉ d·ªÖ ƒë·ªçc
            worksheet = writer.sheets["Danh s√°ch h·ªçc sinh"]
            for idx, col in enumerate(excel_df.columns, 1):
                # ƒê·∫∑t ƒë·ªô r·ªông c·ªôt d·ª±a v√†o n·ªôi dung
                max_length = max(excel_df[col].astype(str).map(len).max(), len(col))
                worksheet.column_dimensions[chr(64 + idx)].width = max_length + 5
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ t·∫£i xu·ªëng
        excel_data = output.getvalue()
        
        # T√™n file
        filename = f"Danh_sach_hoc_sinh_{timestamp}.xlsx"
        
        # Download button
        st.download_button(
            label="üì• T·∫£i xu·ªëng danh s√°ch (Excel)",
            data=excel_data,
            file_name=filename,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key="download_student_list_excel"
        )
        show_success("ƒê√£ t·∫°o file Excel th√†nh c√¥ng! Nh·∫•n n√∫t t·∫£i xu·ªëng ƒë·ªÉ l∆∞u file.")
        
    elif format_type == 'csv':
        # ƒê·∫£m b·∫£o ch·ªâ l·∫•y c√°c c·ªôt ·ªïn ƒë·ªãnh cho CSV
        # L·∫•y danh s√°ch c·ªôt v√† lo·∫°i b·ªè c√°c thu·ªôc t√≠nh kh√¥ng c·∫ßn thi·∫øt
        required_columns = [
            "ID", "H·ªç v√† t√™n", "Ng√†y sinh", "Gi·ªõi t√≠nh", "ƒê·ªãa ch·ªâ", 
            "Email", "S·ªë ƒëi·ªán tho·∫°i", "L·ªõp", "Ng√†y nh·∫≠p h·ªçc", 
            "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "T√¨nh tr·∫°ng h·ªçc t·∫≠p", "T√¨nh tr·∫°ng t√¢m l√Ω"
        ]
        
        # T·∫°o DataFrame m·ªõi ho√†n to√†n t·ª´ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        csv_data = []
        for student_data in data:
            row = {}
            for col in required_columns:
                row[col] = student_data.get(col, "")
            csv_data.append(row)
                
        # T·∫°o DataFrame m·ªõi v·ªõi ƒë√∫ng c·∫•u tr√∫c
        csv_df = pd.DataFrame(csv_data, columns=required_columns)
                
        # Xu·∫•t ra CSV
        csv = csv_df.to_csv(index=False).encode('utf-8')
        
        # T√™n file
        filename = f"Danh_sach_hoc_sinh_{timestamp}.csv"
        
        # Download button
        st.download_button(
            label="üì• T·∫£i xu·ªëng danh s√°ch (CSV)",
            data=csv,
            file_name=filename,
            mime="text/csv",
            key="download_student_list_csv"
        )
        show_success("ƒê√£ t·∫°o file CSV th√†nh c√¥ng! Nh·∫•n n√∫t t·∫£i xu·ªëng ƒë·ªÉ l∆∞u file.")
        
    elif format_type == 'pdf':
        # T·∫°o PDF v·ªõi reportlab
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, title="Danh s√°ch h·ªçc sinh")
        
        # Danh s√°ch c√°c ph·∫ßn t·ª≠ ƒë·ªÉ th√™m v√†o PDF
        elements = []
        
        # ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát (c·∫ßn t·∫°o tr∆∞·ªõc)
        try:
            pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
            pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', 'DejaVuSans-Bold.ttf'))
            font_name = 'DejaVuSans'
        except:
            font_name = 'Helvetica'
        
        # Style cho ti√™u ƒë·ªÅ
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'Title',
            parent=styles['Heading1'],
            fontName=font_name+'-Bold',
            fontSize=16,
            alignment=1, # center
            spaceAfter=12
        )
        
        # Th√™m ti√™u ƒë·ªÅ
        elements.append(Paragraph("DANH S√ÅCH H·ªåC SINH", title_style))
        elements.append(Spacer(1, 12))
        
        # ƒê·∫£m b·∫£o ch·ªâ l·∫•y c√°c c·ªôt ·ªïn ƒë·ªãnh cho b·∫£ng
        # L·∫•y danh s√°ch c·ªôt v√† lo·∫°i b·ªè c√°c thu·ªôc t√≠nh kh√¥ng c·∫ßn thi·∫øt
        required_columns = [
            "ID", "H·ªç v√† t√™n", "Ng√†y sinh", "Gi·ªõi t√≠nh", "ƒê·ªãa ch·ªâ", 
            "Email", "S·ªë ƒëi·ªán tho·∫°i", "L·ªõp", "Ng√†y nh·∫≠p h·ªçc", 
            "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "T√¨nh tr·∫°ng h·ªçc t·∫≠p", "T√¨nh tr·∫°ng t√¢m l√Ω"
        ]
        
        # T·∫°o DataFrame m·ªõi ho√†n to√†n t·ª´ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        pdf_data = []
        for student_data in data:
            row = {}
            for col in required_columns:
                row[col] = student_data.get(col, "")
            pdf_data.append(row)
                
        # T·∫°o DataFrame m·ªõi v·ªõi ƒë√∫ng c·∫•u tr√∫c
        pdf_df = pd.DataFrame(pdf_data, columns=required_columns)
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu cho b·∫£ng
        table_data = [pdf_df.columns.tolist()]  # Ti√™u ƒë·ªÅ c√°c c·ªôt
        for _, row in pdf_df.iterrows():
            table_data.append(row.tolist())
        
        # T·∫°o b·∫£ng
        table = Table(table_data, repeatRows=1)
        
        # Style cho b·∫£ng
        table_style = TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), font_name+'-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('FONTNAME', (0, 1), (-1, -1), font_name),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BOX', (0, 0), (-1, -1), 1, colors.black),
        ])
        table.setStyle(table_style)
        
        # Gi·ªõi h·∫°n ƒë·ªô r·ªông c·ªßa b·∫£ng
        table._argW = [1.2*inch] + [1.5*inch] * (len(pdf_df.columns) - 1)
        
        # Th√™m b·∫£ng v√†o t√†i li·ªáu
        elements.append(table)
        
        # T·∫°o PDF
        doc.build(elements)
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ t·∫£i xu·ªëng
        pdf_data = buffer.getvalue()
        buffer.close()
        
        # T√™n file
        filename = f"Danh_sach_hoc_sinh_{timestamp}.pdf"
        
        # Download button
        st.download_button(
            label="üì• T·∫£i xu·ªëng danh s√°ch (PDF)",
            data=pdf_data,
            file_name=filename,
            mime="application/pdf",
            key="download_student_list_pdf"
        )
        show_success("ƒê√£ t·∫°o file PDF th√†nh c√¥ng! Nh·∫•n n√∫t t·∫£i xu·ªëng ƒë·ªÉ l∆∞u file.")

def database_section():
    """Ph·∫ßn qu·∫£n l√Ω database"""
    # Ki·ªÉm tra quy·ªÅn qu·∫£n l√Ω d·ªØ li·ªáu
    if not can_manage_data():
        st.error(get_text("common.no_permission", "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y"))
        return
    
    st.subheader("üóÑÔ∏è " + get_text("database_management.title", "Qu·∫£n l√Ω D·ªØ li·ªáu"))
    
    # Th√¥ng tin h∆∞·ªõng d·∫´n
    st.info("""
    ### üìå Th√¥ng tin
    - Trang n√†y cho ph√©p b·∫°n tr·ª±c ti·∫øp truy c·∫≠p v√† qu·∫£n l√Ω d·ªØ li·ªáu trong c∆° s·ªü d·ªØ li·ªáu
    - B·∫°n c√≥ th·ªÉ xem, ch·ªânh s·ª≠a, xu·∫•t v√† nh·∫≠p d·ªØ li·ªáu theo t·ª´ng b·∫£ng
    - ƒê·ªÉ qu·∫£n l√Ω sao l∆∞u v√† kh√¥i ph·ª•c database, vui l√≤ng s·ª≠ d·ª•ng trang **Qu·∫£n l√Ω H·ªá th·ªëng**
    """)
    
    # T·∫°o c√°c tab ƒë·ªÉ ph√¢n chia ch·ª©c nƒÉng
    tab1, tab2, tab3 = st.tabs([
        get_text("database_management.view_tables", "Xem v√† Ch·ªânh s·ª≠a B·∫£ng"),
        get_text("database_management.export", "Xu·∫•t d·ªØ li·ªáu"),
        get_text("database_management.import", "Nh·∫≠p d·ªØ li·ªáu t·ª´ File")
    ])
    
    # K·∫øt n·ªëi ƒë·∫øn database
    conn = sqlite3.connect('lang_huu_nghi.db')
    
    # Tab 1: Xem v√† ch·ªânh s·ª≠a b·∫£ng
    with tab1:
        # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b·∫£ng
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [table[0] for table in cursor.fetchall()]
        
        # Ch·ªçn b·∫£ng ƒë·ªÉ xem v√† ch·ªânh s·ª≠a - hi·ªÉn th·ªã t√™n ƒë√£ d·ªãch
        table_options = []
        table_display_names = {}
        
        for table in tables:
            # L·∫•y t√™n ƒë√£ d·ªãch c·ªßa b·∫£ng n·∫øu c√≥, n·∫øu kh√¥ng d√πng t√™n g·ªëc
            display_name = get_text(f"database_management.tables.{table}", table)
            table_options.append(display_name)
            table_display_names[display_name] = table
            
        selected_table_display = st.selectbox(
            get_text("database_management.select_table", "Ch·ªçn b·∫£ng"),
            table_options,
            key="db_select_table"
        )
        
        # L·∫•y t√™n b·∫£ng th·ª±c t·∫ø t·ª´ t√™n hi·ªÉn th·ªã
        selected_table = table_display_names.get(selected_table_display, selected_table_display)
        
        if selected_table:
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ b·∫£ng ƒë√£ ch·ªçn - s·ª≠ d·ª•ng SELECT c·ª• th·ªÉ thay v√¨ SELECT *
            # L·∫•y danh s√°ch c√°c c·ªôt trong b·∫£ng
            cursor = conn.cursor()
            cursor.execute(f"PRAGMA table_info({selected_table})")
            columns = [column[1] for column in cursor.fetchall()]
            
            # T·∫°o c√¢u truy v·∫•n SELECT v·ªõi c√°c c·ªôt c·ª• th·ªÉ
            columns_str = ", ".join(columns)
            df = pd.read_sql_query(f"SELECT {columns_str} FROM {selected_table}", conn)
            
            # Hi·ªÉn th·ªã th√¥ng tin b·∫£ng v·ªõi t√™n ƒë√£ d·ªãch
            st.markdown(f"##### {get_text('database_management.table_info', 'Th√¥ng tin b·∫£ng')}: {selected_table_display}")
            st.write(f"{get_text('database_management.rows', 'S·ªë h√†ng')}: {len(df)}, {get_text('database_management.columns', 'S·ªë c·ªôt')}: {len(df.columns)}")
            
            # Hi·ªÉn th·ªã v√† cho ph√©p ch·ªânh s·ª≠a d·ªØ li·ªáu
            st.markdown(f"##### {get_text('database_management.edit_data', 'Ch·ªânh s·ª≠a d·ªØ li·ªáu')}")
            
            # Gi·ªõi h·∫°n s·ªë h√†ng hi·ªÉn th·ªã ƒë·ªÉ tr√°nh qu√° t·∫£i
            rows_per_page = st.number_input(
                get_text("database_management.rows_per_page", "S·ªë h√†ng m·ªói trang"), 
                min_value=5, max_value=100, value=10, step=5,
                key="db_rows_per_page"
            )
            
            total_pages = (len(df) + rows_per_page - 1) // rows_per_page
            page = st.number_input(
                get_text("database_management.page_number", "Trang"),
                min_value=1, max_value=max(1, total_pages), value=1, step=1,
                key="db_page_number"
            )
            
            # Ph√¢n trang
            start_idx = (page - 1) * rows_per_page
            end_idx = min(start_idx + rows_per_page, len(df))
            
            # Hi·ªÉn th·ªã v√† cho ph√©p ch·ªânh s·ª≠a d·ªØ li·ªáu tr√™n trang hi·ªán t·∫°i
            if len(df) > 0:
                try:
                    edited_df = st.data_editor(
                        df.iloc[start_idx:end_idx].reset_index(drop=True), 
                        key=f"editor_{selected_table}_{page}"
                    )
                    
                    if st.button(get_text("database_management.save_changes", "L∆∞u thay ƒë·ªïi"), key="db_save_changes"):
                        try:
                            # L∆∞u c√°c thay ƒë·ªïi v√†o database
                            save_changes_to_db(conn, selected_table, df.iloc[start_idx:end_idx], edited_df, start_idx)
                            show_success(get_text("database_management.saved_successfully", "ƒê√£ l∆∞u thay ƒë·ªïi th√†nh c√¥ng!"))
                        except Exception as e:
                            show_error(f"{get_text('database_management.save_error', 'L·ªói khi l∆∞u thay ƒë·ªïi')}: {str(e)}")
                except Exception as e:
                    st.error(f"L·ªói khi hi·ªÉn th·ªã d·ªØ li·ªáu: {str(e)}")
            else:
                st.info(get_text("database_management.no_data", "Kh√¥ng c√≥ d·ªØ li·ªáu trong b·∫£ng n√†y"))
    
    # Tab 2: Xu·∫•t d·ªØ li·ªáu
    with tab2:
        st.markdown(f"##### {get_text('database_management.export_data', 'Xu·∫•t d·ªØ li·ªáu')}")
        
        # Ch·ªçn b·∫£ng ƒë·ªÉ xu·∫•t - hi·ªÉn th·ªã t√™n ƒë√£ d·ªãch
        export_table_display = st.selectbox(
            get_text("database_management.select_table_export", "Ch·ªçn b·∫£ng ƒë·ªÉ xu·∫•t"),
            table_options,
            key="db_export_table"
        )
        
        # L·∫•y t√™n b·∫£ng th·ª±c t·∫ø t·ª´ t√™n hi·ªÉn th·ªã
        export_table = table_display_names.get(export_table_display, export_table_display)
        
        if export_table:
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ b·∫£ng ƒë√£ ch·ªçn - s·ª≠ d·ª•ng SELECT c·ª• th·ªÉ thay v√¨ SELECT *
            # L·∫•y danh s√°ch c√°c c·ªôt trong b·∫£ng
            cursor = conn.cursor()
            cursor.execute(f"PRAGMA table_info({export_table})")
            columns = [column[1] for column in cursor.fetchall()]
            
            # T·∫°o c√¢u truy v·∫•n SELECT v·ªõi c√°c c·ªôt c·ª• th·ªÉ
            columns_str = ", ".join(columns)
            export_df = pd.read_sql_query(f"SELECT {columns_str} FROM {export_table}", conn)
            
            # Xem tr∆∞·ªõc d·ªØ li·ªáu
            preview_rows = min(5, len(export_df))
            st.markdown(f"##### {get_text('database_management.preview', 'Xem tr∆∞·ªõc')} {preview_rows} {get_text('database_management.first_rows', 'h√†ng ƒë·∫ßu ti√™n')}")
            st.dataframe(export_df.head(preview_rows))
            
            # N√∫t xu·∫•t d·ªØ li·ªáu
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button(get_text("database_management.export_csv", "Xu·∫•t ra CSV"), key="db_export_csv"):
                    # Xu·∫•t d·ªØ li·ªáu ra CSV
                    csv = export_df.to_csv(index=False).encode('utf-8')
                    
                    # T·∫°o t√™n file v·ªõi timestamp
                    now = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"{export_table}_{now}.csv"
                    
                    # Download button
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng CSV",
                        data=csv,
                        file_name=filename,
                        mime="text/csv",
                        key="db_download_csv"
                    )
                    show_success(f"ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng. Nh·∫•n n√∫t t·∫£i xu·ªëng ƒë·ªÉ l∆∞u file.")
            
            with col2:
                if st.button(get_text("database_management.export_excel", "Xu·∫•t ra Excel"), key="db_export_excel"):
                    # Xu·∫•t d·ªØ li·ªáu ra Excel
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        export_df.to_excel(writer, index=False, sheet_name=export_table)
                    
                    # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ t·∫£i xu·ªëng
                    excel_data = output.getvalue()
                    
                    # T·∫°o t√™n file v·ªõi timestamp
                    now = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"{export_table}_{now}.xlsx"
                    
                    # Download button
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng Excel",
                        data=excel_data,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        key="db_download_excel"
                    )
                    show_success(f"ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng. Nh·∫•n n√∫t t·∫£i xu·ªëng ƒë·ªÉ l∆∞u file.")
    
    # Tab 3: Nh·∫≠p d·ªØ li·ªáu t·ª´ file
    with tab3:
        st.markdown(f"##### {get_text('database_management.import_data', 'Nh·∫≠p d·ªØ li·ªáu')}")
        
        # Ch·ªçn b·∫£ng ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu - hi·ªÉn th·ªã t√™n ƒë√£ d·ªãch
        import_table_display = st.selectbox(
            get_text("database_management.select_table_import", "Ch·ªçn b·∫£ng ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu"),
            table_options,
            key="db_import_table"
        )
        
        # L·∫•y t√™n b·∫£ng th·ª±c t·∫ø t·ª´ t√™n hi·ªÉn th·ªã
        import_table = table_display_names.get(import_table_display, import_table_display)
        
        if import_table:
            # Upload file
            uploaded_file = st.file_uploader(
                get_text("database_management.upload_file", "T·∫£i l√™n file (CSV ho·∫∑c Excel)"),
                type=["csv", "xlsx"],
                key="db_upload_file"
            )
            
            if uploaded_file is not None:
                try:
                    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file
                    if uploaded_file.name.endswith('.csv'):
                        import_df = pd.read_csv(uploaded_file)
                    else:
                        import_df = pd.read_excel(uploaded_file)
                    
                    # Xem tr∆∞·ªõc d·ªØ li·ªáu
                    st.markdown(f"##### {get_text('database_management.preview_import', 'Xem tr∆∞·ªõc d·ªØ li·ªáu nh·∫≠p')}")
                    st.dataframe(import_df.head())
                    
                    # L·∫•y c·∫•u tr√∫c b·∫£ng hi·ªán t·∫°i ƒë·ªÉ so s√°nh
                    table_structure = pd.read_sql_query(f"PRAGMA table_info({import_table})", conn)
                    table_columns = table_structure['name'].tolist()
                    
                    # Ki·ªÉm tra xem c√≥ c·ªôt n√†o kh·ªõp kh√¥ng
                    matching_columns = [col for col in import_df.columns if col in table_columns]
                    
                    if matching_columns:
                        # Hi·ªÉn th·ªã c·ªôt kh·ªõp
                        st.write(f"C√°c c·ªôt kh·ªõp: {', '.join(matching_columns)}")
                        
                        # T√πy ch·ªçn nh·∫≠p
                        st.markdown(f"##### {get_text('database_management.import_options', 'T√πy ch·ªçn nh·∫≠p')}")
                        import_mode = st.radio(
                            "Ch·ªçn ch·∫ø ƒë·ªô nh·∫≠p:",
                            ["append", "replace"],
                            format_func=lambda x: get_text(f"database_management.{x}", x),
                            key="db_import_mode"
                        )
                        
                        if st.button(get_text("database_management.import_button", "Nh·∫≠p d·ªØ li·ªáu"), key="db_import_data"):
                            try:
                                # L·ªçc d·ªØ li·ªáu ch·ªâ gi·ªØ c√°c c·ªôt kh·ªõp
                                filtered_df = import_df[matching_columns]
                                
                                # X·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc khi nh·∫≠p (n·∫øu c·∫ßn)
                                
                                # Th·ª±c hi·ªán nh·∫≠p d·ªØ li·ªáu
                                if import_mode == "replace":
                                    # X√≥a d·ªØ li·ªáu c≈©
                                    cursor.execute(f"DELETE FROM {import_table}")
                                
                                # Nh·∫≠p d·ªØ li·ªáu m·ªõi
                                filtered_df.to_sql(import_table, conn, if_exists='append', index=False)
                                conn.commit()
                                
                                show_success(f"{get_text('database_management.imported_successfully', 'ƒê√£ nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!')}: {len(filtered_df)}")
                            except Exception as e:
                                show_error(f"{get_text('database_management.import_error', 'L·ªói khi nh·∫≠p d·ªØ li·ªáu')}: {str(e)}")
                    else:
                        st.error(get_text("database_management.no_matching_columns", "Kh√¥ng c√≥ c·ªôt n√†o trong file kh·ªõp v·ªõi c·ªôt trong b·∫£ng"))
                
                except Exception as e:
                    st.error(f"{get_text('database_management.file_read_error', 'L·ªói khi ƒë·ªçc file')}: {str(e)}")
    
    # ƒê√≥ng k·∫øt n·ªëi database khi ho√†n t·∫•t
    conn.close()

def print_section():
    """Ph·∫ßn in h·ªì s∆°"""
    st.subheader(f"üñ®Ô∏è {get_text('pages.search.print_profile', 'In H·ªì S∆°')}")
    
    # Ki·ªÉm tra quy·ªÅn in h·ªì s∆°
    if not is_print_allowed():
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng in h·ªì s∆°")
        return
    
    db = Database()
    
    st.info("""
    ‚ÑπÔ∏è **H∆∞·ªõng d·∫´n:**
    1. Ch·ªçn lo·∫°i h·ªì s∆° (H·ªçc sinh/C·ª±u chi·∫øn binh)
    2. Ch·ªçn ng∆∞·ªùi c·∫ßn in h·ªì s∆°
    3. Xem tr∆∞·ªõc th√¥ng tin tr∆∞·ªõc khi in
    """)

    # X√°c ƒë·ªãnh lo·∫°i h·ªì s∆° ng∆∞·ªùi d√πng c√≥ quy·ªÅn in theo vai tr√≤
    allowed_print_types = []
    allowed_search_types = get_role_based_search_types()
    
    # X√°c ƒë·ªãnh quy·ªÅn in d·ª±a tr√™n quy·ªÅn t√¨m ki·∫øm
    if 'students' in allowed_search_types:
        allowed_print_types.append("student")
    if 'veterans' in allowed_search_types:
        allowed_print_types.append("veteran")
    
    # N·∫øu kh√¥ng c√≥ lo·∫°i h·ªì s∆° n√†o ƒë∆∞·ª£c ph√©p
    if not allowed_print_types:
        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn in b·∫•t k·ª≥ lo·∫°i h·ªì s∆° n√†o")
        return
        
    # Ch·ªçn lo·∫°i h·ªì s∆° t·ª´ danh s√°ch ƒë∆∞·ª£c ph√©p
    profile_type = st.selectbox(
        "üéØ Ch·ªçn lo·∫°i h·ªì s∆°",
        allowed_print_types,
        format_func=lambda x: "H·ªçc sinh" if x == "student" else "C·ª±u chi·∫øn binh"
    )

    # Get list of people based on type
    if profile_type == "student":
        people = db.get_students_for_selection()
    else:
        people = db.get_veterans_for_selection()

    person_options = [f"{name} (ID: {id})" for id, name in people]

    # Select person
    selected_person = st.selectbox(
        "üë§ Ch·ªçn ng∆∞·ªùi c·∫ßn in h·ªì s∆°",
        options=person_options,
        format_func=lambda x: x.split(" (ID: ")[0]
    )

    # Extract ID from selection
    person_id = int(selected_person.split("ID: ")[1].rstrip(")"))

    # Add tabs for different output formats
    tabs = st.tabs(["üìÑ Xem tr∆∞·ªõc", "üìä Xu·∫•t Excel", "üìä Ph√¢n t√≠ch d·ªØ li·ªáu"])

    with tabs[0]:
        # Get language setting
        from translations import get_current_language
        current_language = get_current_language()
        
        # Translate button text
        button_text = "üìÑ T·∫°o h·ªì s∆°" if current_language == 'vi' else "üìÑ Generate Profile"
        profile_title = "üìã H·ªì s∆° chi ti·∫øt" if current_language == 'vi' else "üìã Detailed Profile"
        
        if st.button(button_text):
            try:
                with st.container():
                    st.markdown("---")
                    st.subheader(profile_title)

                    # Get person details
                    if profile_type == "student":
                        query = """
                            SELECT s.id, s.full_name, s.birth_date, s.address, s.email, 
                                   s.admission_date, s.health_status, s.academic_status, 
                                   s.psychological_status, s.gender, s.phone,
                                   c.name as class_name, c.academic_year
                            FROM students s
                            LEFT JOIN classes c ON s.class_id = c.id
                            WHERE s.id = ?
                        """
                    else:
                        query = """
                            SELECT id, full_name, birth_date, address, email, 
                                   service_period, health_condition, contact_info
                            FROM veterans 
                            WHERE id = ?
                        """

                    person = db.conn.execute(query, (person_id,)).fetchone()

                    if person:
                        # Personal Information
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("##### üë§ Th√¥ng tin c√° nh√¢n")
                            st.markdown(f"**H·ªç v√† t√™n:** {person[1]}")
                            st.markdown(f"**Ng√†y sinh:** {person[2] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**ƒê·ªãa ch·ªâ:** {person[3] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            st.markdown(f"**Email:** {person[4] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")

                            if profile_type == "student":
                                st.markdown(f"**L·ªõp:** {person[-2] or 'Ch∆∞a ph√¢n l·ªõp'}")
                                st.markdown(f"**NƒÉm h·ªçc:** {person[-1] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                                st.markdown(f"**Ng√†y nh·∫≠p h·ªçc:** {person[5] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                            else:
                                st.markdown(f"**Th·ªùi gian ph·ª•c v·ª•:** {person[3] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                                st.markdown(f"**Li√™n h·ªá:** {person[7] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")

                        with col2:
                            st.markdown("##### üè• T√¨nh tr·∫°ng")
                            if profile_type == "student":
                                st.markdown(f"**S·ª©c kh·ªèe:** {person[7] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")
                                st.markdown(f"**H·ªçc t·∫≠p:** {person[8] or 'Ch∆∞a ƒë√°nh gi√°'}")
                                st.markdown(f"**T√¢m l√Ω:** {person[9] or 'Ch∆∞a ƒë√°nh gi√°'}")
                            else:
                                st.markdown(f"**S·ª©c kh·ªèe:** {person[4] or 'Ch∆∞a c·∫≠p nh·∫≠t'}")

                        # Medical Records
                        st.markdown("---")
                        st.markdown("##### üè• L·ªãch s·ª≠ y t·∫ø")
                        records = db.conn.execute("""
                            SELECT mr.id, mr.patient_id, mr.patient_type, mr.diagnosis, mr.treatment,
                                   mr.doctor_id, mr.date, mr.notes, mr.notification_sent,
                                   u.full_name as doctor_name
                            FROM medical_records mr
                            JOIN users u ON mr.doctor_id = u.id
                            WHERE mr.patient_id = ? AND mr.patient_type = ?
                            ORDER BY mr.date DESC
                        """, (person_id, profile_type)).fetchall()

                        if records:
                            for record in records:
                                with st.expander(f"üè• Kh√°m ng√†y: {record[6].split()[0]}", expanded=True):
                                    st.markdown(f"**üë®‚Äç‚öïÔ∏è B√°c sƒ©:** {record[-1]}")
                                    st.markdown("**üìã Ch·∫©n ƒëo√°n:**")
                                    st.info(record[3])
                                    st.markdown("**üíä ƒêi·ªÅu tr·ªã:**")
                                    st.info(record[4])
                                    if record[7]:  # notes
                                        st.markdown("**üìù Ghi ch√∫:**")
                                        st.info(record[7])
                        else:
                            st.info("Ch∆∞a c√≥ h·ªì s∆° y t·∫ø")

                        # Psychological Evaluations (only for students)
                        if profile_type == "student":
                            st.markdown("---")
                            st.markdown("##### üß† ƒê√°nh gi√° t√¢m l√Ω")
                            evals = db.conn.execute("""
                                SELECT pe.id, pe.student_id, pe.evaluation_date, pe.evaluator_id, 
                                       pe.assessment, pe.recommendations, pe.follow_up_date,
                                       pe.notification_sent, u.full_name as evaluator_name
                                FROM psychological_evaluations pe
                                JOIN users u ON pe.evaluator_id = u.id
                                WHERE pe.student_id = ?
                                ORDER BY pe.evaluation_date DESC
                            """, (person_id,)).fetchall()

                            if evals:
                                for eval in evals:
                                    with st.expander(f"üìù ƒê√°nh gi√° ng√†y: {eval[2].split()[0]}", expanded=True):
                                        st.markdown(f"**üë§ Ng∆∞·ªùi ƒë√°nh gi√°:** {eval[-1]}")
                                        st.markdown("**üìã ƒê√°nh gi√°:**")
                                        st.info(eval[4])
                                        st.markdown("**üí° Khuy·∫øn ngh·ªã:**")
                                        st.info(eval[5])
                                        if eval[6]:  # follow_up_date
                                            st.markdown(f"**üìÖ Ng√†y theo d√µi ti·∫øp:** {eval[6]}")
                            else:
                                st.info("Ch∆∞a c√≥ ƒë√°nh gi√° t√¢m l√Ω")

                        # Print instructions
                        st.markdown("---")
                        st.markdown("""
                        ‚ÑπÔ∏è **H∆∞·ªõng d·∫´n in:**
                        1. Nh·∫•n Ctrl + P (Windows) ho·∫∑c Command + P (Mac)
                        2. Ch·ªçn m√°y in ho·∫∑c l∆∞u th√†nh PDF
                        3. ƒêi·ªÅu ch·ªânh c√†i ƒë·∫∑t in n·∫øu c·∫ßn
                        """)
                    else:
                        st.error("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin")

            except Exception as e:
                st.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")
                print(f"Database error: {str(e)}")

    with tabs[1]:
        # Get language setting
        from translations import get_current_language
        current_language = get_current_language()
        
        # Translate texts
        if current_language == 'vi':
            excel_info = "üìä Xu·∫•t d·ªØ li·ªáu sang file Excel"
            options_title = "##### T√πy ch·ªçn xu·∫•t Excel"
            medical_option = "üè• Bao g·ªìm h·ªì s∆° y t·∫ø"
            psych_option = "üß† Bao g·ªìm ƒë√°nh gi√° t√¢m l√Ω"
            submit_button = "üì• T·∫°o file Excel"
        else:
            excel_info = "üìä Export data to Excel file"
            options_title = "##### Excel Export Options"
            medical_option = "üè• Include medical records"
            psych_option = "üß† Include psychological evaluations"
            submit_button = "üì• Generate Excel File"
            
        st.info(excel_info)

        # Excel export options
        with st.form("excel_export_options"):
            st.write(options_title)
            include_medical = st.checkbox(medical_option, value=True)
            if profile_type == "student":
                include_psych = st.checkbox(psych_option, value=True)

            generate_clicked = st.form_submit_button(submit_button)
        
        # T·∫°o file Excel v√† n√∫t t·∫£i xu·ªëng ·ªü ngo√†i form
        if 'generate_clicked' in locals() and generate_clicked:
            try:
                excel_data = export_to_excel(db, profile_type, person_id)
                if excel_data:
                    # Create download button for Excel file
                    # Get language for label and success message
                    if current_language == 'vi':
                        download_label = "‚¨áÔ∏è T·∫£i file Excel"
                        success_msg = "‚úÖ File Excel ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
                    else:
                        download_label = "‚¨áÔ∏è Download Excel File"
                        success_msg = "‚úÖ Excel file created successfully!"
                    
                    filename = f"ho_so_{person_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                    st.download_button(
                        label=download_label,
                        data=excel_data,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    st.success(success_msg)
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o file Excel")
            except Exception as e:
                st.error(f"‚ùå L·ªói khi t·∫°o file Excel: {str(e)}")

    with tabs[2]:
        # Get language setting
        from translations import get_current_language
        current_language = get_current_language()
        
        # Translate texts based on current language
        if current_language == 'vi':
            tab_title = "üìä Ph√¢n t√≠ch d·ªØ li·ªáu"
            academic_section = "##### üìö Ti·∫øn ƒë·ªô h·ªçc t·∫≠p"
            no_academic_data = "Ch∆∞a c√≥ d·ªØ li·ªáu ƒë√°nh gi√° h·ªçc t·∫≠p"
            health_section = "##### üè• Theo d√µi s·ª©c kh·ªèe"
            chart_title = 'L·ªãch s·ª≠ kh√°m b·ªánh theo th·ªùi gian'
            chart_series = 'L·ªãch s·ª≠ kh√°m'
            chart_x_title = 'Th·ªùi gian'
            chart_y_title = 'S·ªë l·∫ßn kh√°m'
            stats_section = "##### üìä Th·ªëng k√™" 
            total_visits = "T·ªïng s·ªë l·∫ßn kh√°m"
            monitoring_period = "Th·ªùi gian theo d√µi"
            days_unit = "ng√†y"
            last_visit = "L·∫ßn kh√°m g·∫ßn nh·∫•t"
            days_ago = "ng√†y tr∆∞·ªõc"
            no_medical_data = "Ch∆∞a c√≥ d·ªØ li·ªáu kh√°m b·ªánh"
        else:
            tab_title = "üìä Data Analysis"
            academic_section = "##### üìö Academic Progress"
            no_academic_data = "No academic evaluation data available"
            health_section = "##### üè• Health Monitoring"
            chart_title = 'Medical History Timeline'
            chart_series = 'Medical History'
            chart_x_title = 'Time'
            chart_y_title = 'Number of Visits'
            stats_section = "##### üìä Statistics"
            total_visits = "Total Visits"
            monitoring_period = "Monitoring Period"
            days_unit = "days"
            last_visit = "Last Visit"
            days_ago = "days ago"
            no_medical_data = "No medical data available"
        
        st.subheader(tab_title)

        if profile_type == "student":
            # Academic Performance Timeline
            st.markdown(academic_section)
            academic_records = db.conn.execute("""
                SELECT evaluation_date, assessment, recommendations
                FROM psychological_evaluations
                WHERE student_id = ?
                ORDER BY evaluation_date
            """, (person_id,)).fetchall()

            if academic_records:
                df_academic = pd.DataFrame(academic_records, 
                    columns=['date', 'assessment', 'recommendations'])
                df_academic['date'] = pd.to_datetime(df_academic['date'])

                st.line_chart(df_academic.set_index('date'))
            else:
                st.info(no_academic_data)

        # Health Status Timeline
        st.markdown(health_section)
        medical_records = db.conn.execute("""
            SELECT date, diagnosis, treatment
            FROM medical_records
            WHERE patient_id = ? AND patient_type = ?
            ORDER BY date
        """, (person_id, profile_type)).fetchall()

        if medical_records:
            df_medical = pd.DataFrame(medical_records,
                columns=['date', 'diagnosis', 'treatment'])
            df_medical['date'] = pd.to_datetime(df_medical['date'])

            # Create a timeline visualization
            medical_fig = go.Figure()
            medical_fig.add_trace(go.Scatter(
                x=df_medical['date'],
                y=list(range(len(df_medical))),
                mode='lines+markers',
                name=chart_series
            ))
            medical_fig.update_layout(
                title=chart_title,
                xaxis_title=chart_x_title,
                yaxis_title=chart_y_title
            )
            st.plotly_chart(medical_fig)

            # Display statistics
            st.markdown(stats_section)
            col1, col2 = st.columns(2)
            with col1:
                st.metric(total_visits, len(medical_records))
                st.metric(monitoring_period, 
                    f"{(df_medical['date'].max() - df_medical['date'].min()).days} {days_unit}")
            with col2:
                recent_visit = df_medical['date'].max()
                days_since_visit = (pd.Timestamp.now() - recent_visit).days
                st.metric(last_visit, 
                    recent_visit.strftime('%d/%m/%Y'),
                    f"{days_since_visit} {days_ago}")
        else:
            st.info(no_medical_data)

def render():
    """Main render function"""
    # Apply theme from session state
    apply_theme()
    
    # Set current page for role checking
    st.session_state.current_page = "05_Tim_kiem_va_In"
    
    check_auth()
    
    st.title(f"üîç {get_text('pages.search.title', 'T√¨m ki·∫øm & In h·ªì s∆°')}")
    
    # T·∫°o c√°c tab ch√≠nh
    tabs = st.tabs([
        f"üîç {get_text('pages.search.search_tab', 'T√¨m ki·∫øm')}", 
        f"üñ®Ô∏è {get_text('pages.search.print_tab', 'In h·ªì s∆°')}",
        f"üóÑÔ∏è {get_text('database_management.title', 'Qu·∫£n l√Ω Database')}"
    ])
    
    with tabs[0]:
        search_section()
    
    with tabs[1]:
        print_section()
        
    with tabs[2]:
        database_section()

if __name__ == "__main__":
    render()