import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from auth import check_auth
from database import Database
import pandas as pd
from io import BytesIO
from visualizations import ChartCustomizer
from utils import apply_theme
from translations import get_text

def render():
    check_auth()

    # Apply theme from session state
    apply_theme()

    st.title(get_text("pages.statistics.title", "Th·ªëng K√™ v√† Ph√¢n T√≠ch D·ªØ Li·ªáu"))

    db = Database()
    chart_customizer = ChartCustomizer()

    # Sidebar filters
    st.sidebar.header(get_text("pages.statistics.filters", "B·ªô l·ªçc"))

    date_range = st.sidebar.date_input(
        get_text("pages.statistics.date_range", "Kho·∫£ng th·ªùi gian"),
        value=(datetime.now() - timedelta(days=365), datetime.now())
    )

    # Overview statistics
    col1, col2, col3, col4 = st.columns(4)

    total_students = len(db.get_students())
    total_veterans = len(db.get_veterans())

    medical_records = db.conn.execute("SELECT COUNT(*) FROM medical_records").fetchone()[0]
    psych_evals = db.conn.execute("SELECT COUNT(*) FROM psychological_evaluations").fetchone()[0]

    with col1:
        st.metric("T·ªïng s·ªë sinh vi√™n", total_students)
    with col2:
        st.metric("T·ªïng s·ªë c·ª±u chi·∫øn binh", total_veterans)
    with col3:
        st.metric("S·ªë h·ªì s∆° y t·∫ø", medical_records)
    with col4:
        st.metric("S·ªë ƒë√°nh gi√° t√¢m l√Ω", psych_evals)

    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    st.subheader("üìä T√πy ch·ªânh bi·ªÉu ƒë·ªì")

    # Ch·ªçn lo·∫°i d·ªØ li·ªáu
    data_type = st.selectbox(
        "Ch·ªçn lo·∫°i d·ªØ li·ªáu",
        ["T√¨nh tr·∫°ng s·ª©c kh·ªèe", "K·∫øt qu·∫£ h·ªçc t·∫≠p", "H·ªì s∆° y t·∫ø", "ƒê√°nh gi√° t√¢m l√Ω"]
    )

    # Layout t√πy ch·ªânh
    col1, col2 = st.columns(2)
    with col1:
        chart_type = st.selectbox(
            "Lo·∫°i bi·ªÉu ƒë·ªì",
            chart_customizer.get_available_chart_types()
        )
        color_scheme = st.selectbox(
            "B·∫£ng m√†u",
            chart_customizer.get_available_color_schemes()
        )
    with col2:
        show_grid = st.checkbox("Hi·ªÉn th·ªã l∆∞·ªõi", value=True)
        orientation = st.selectbox(
            "H∆∞·ªõng bi·ªÉu ƒë·ªì",
            ["vertical", "horizontal"]
        )

    # Get and prepare data based on selection
    if data_type == "T√¨nh tr·∫°ng s·ª©c kh·ªèe":
        data = db.conn.execute("""
            SELECT health_status, COUNT(*) as count
            FROM students
            GROUP BY health_status
        """).fetchall()
        df = pd.DataFrame(data, columns=['status', 'count'])

        # Create customizable chart
        fig = chart_customizer.create_customizable_chart(
            data=df,
            chart_type=chart_type,
            x_column='status',
            y_column='count',
            title='Ph√¢n B·ªë T√¨nh Tr·∫°ng S·ª©c Kh·ªèe Sinh Vi√™n',
            color_scheme=color_scheme,
            orientation=orientation,
            show_grid=show_grid
        )
        if fig:
            st.plotly_chart(fig)

    elif data_type == "K·∫øt qu·∫£ h·ªçc t·∫≠p":
        data = db.conn.execute("""
            SELECT academic_status, COUNT(*) as count
            FROM students
            GROUP BY academic_status
        """).fetchall()
        df = pd.DataFrame(data, columns=['status', 'count'])

        fig = chart_customizer.create_customizable_chart(
            data=df,
            chart_type=chart_type,
            x_column='status',
            y_column='count',
            title='Ph√¢n B·ªë K·∫øt Qu·∫£ H·ªçc T·∫≠p',
            color_scheme=color_scheme,
            orientation=orientation,
            show_grid=show_grid
        )
        if fig:
            st.plotly_chart(fig)

    elif data_type == "H·ªì s∆° y t·∫ø":
        data = db.conn.execute("""
            SELECT DATE(date) as record_date, COUNT(*) as count
            FROM medical_records
            WHERE date(date) BETWEEN ? AND ?
            GROUP BY DATE(date)
            ORDER BY record_date
        """, (date_range[0], date_range[1])).fetchall()

        if data:
            df = pd.DataFrame(data, columns=['date', 'count'])
            fig = chart_customizer.create_customizable_chart(
                data=df,
                chart_type=chart_type,
                x_column='date',
                y_column='count',
                title='S·ªë L∆∞·ª£ng H·ªì S∆° Y T·∫ø Theo Ng√†y',
                color_scheme=color_scheme,
                orientation=orientation,
                show_grid=show_grid
            )
            if fig:
                st.plotly_chart(fig)

    elif data_type == "ƒê√°nh gi√° t√¢m l√Ω":
        data = db.conn.execute("""
            SELECT 
                DATE(evaluation_date) as eval_date,
                COUNT(*) as total_evals,
                SUM(CASE WHEN notification_sent THEN 1 ELSE 0 END) as notified
            FROM psychological_evaluations
            WHERE date(evaluation_date) BETWEEN ? AND ?
            GROUP BY DATE(evaluation_date)
            ORDER BY eval_date
        """, (date_range[0], date_range[1])).fetchall()

        if data:
            df = pd.DataFrame(data, columns=['date', 'total', 'notified'])

            # Create comparison chart
            fig = chart_customizer.create_comparison_chart(
                data1=df,
                data2=df,
                x_column='date',
                y_column='total',
                y2_column='notified',
                label1='T·ªïng s·ªë ƒë√°nh gi√°',
                label2='ƒê√£ g·ª≠i th√¥ng b√°o',
                title='Th·ªëng K√™ ƒê√°nh Gi√° T√¢m L√Ω v√† Th√¥ng B√°o'
            )
            st.plotly_chart(fig)

    # Export functionality
    st.markdown("---")
    st.subheader("üì• Xu·∫•t d·ªØ li·ªáu")

    with st.expander("‚öôÔ∏è T√πy ch·ªçn xu·∫•t d·ªØ li·ªáu"):
        export_type = st.multiselect(
            "Ch·ªçn lo·∫°i d·ªØ li·ªáu c·∫ßn xu·∫•t",
            ["Sinh vi√™n", "C·ª±u chi·∫øn binh", "H·ªì s∆° y t·∫ø", "ƒê√°nh gi√° t√¢m l√Ω"],
            default=["Sinh vi√™n"]
        )

        if st.button("üìä T·∫°o file Excel"):
            try:
                # Create Excel writer
                output = BytesIO()
                writer = pd.ExcelWriter(output, engine='openpyxl')

                # Export students
                if "Sinh vi√™n" in export_type:
                    # Ch·ªâ ƒë·ªãnh r√µ c√°c c·ªôt c·∫ßn l·∫•y thay v√¨ SELECT *
                    students = db.conn.execute("""
                        SELECT 
                            s.id, 
                            s.full_name, 
                            s.birth_date, 
                            s.address, 
                            s.email,
                            s.admission_date, 
                            s.class_id, 
                            s.health_status, 
                            s.academic_status,
                            s.psychological_status, 
                            c.name as class_name, 
                            c.academic_year
                        FROM students s
                        LEFT JOIN classes c ON s.class_id = c.id
                    """).fetchall()
                    if students:
                        # ƒê·∫£m b·∫£o s·ªë c·ªôt trong columns l√† ƒë√∫ng v·ªõi s·ªë c·ªôt trong truy v·∫•n SQL
                        df_students = pd.DataFrame(students, columns=[
                            'ID', 'H·ªç v√† t√™n', 'Ng√†y sinh', 'ƒê·ªãa ch·ªâ', 'Email',
                            'Ng√†y nh·∫≠p h·ªçc', 'L·ªõp ID', 'S·ª©c kh·ªèe', 'H·ªçc t·∫≠p',
                            'T√¢m l√Ω', 'T√™n l·ªõp', 'NƒÉm h·ªçc'
                        ])
                        df_students.to_excel(writer, sheet_name='Sinh vi√™n', index=False)

                # Export veterans
                if "C·ª±u chi·∫øn binh" in export_type:
                    # Ch·ªâ ƒë·ªãnh r√µ c√°c c·ªôt c·∫ßn l·∫•y
                    veterans = db.conn.execute("""
                        SELECT 
                            id, 
                            full_name, 
                            birth_date, 
                            service_period, 
                            health_condition, 
                            address, 
                            email, 
                            contact_info
                        FROM veterans
                    """).fetchall()
                    if veterans:
                        df_veterans = pd.DataFrame(veterans, columns=[
                            'ID', 'H·ªç v√† t√™n', 'Ng√†y sinh', 'Th·ªùi gian ph·ª•c v·ª•',
                            'T√¨nh tr·∫°ng s·ª©c kh·ªèe', 'ƒê·ªãa ch·ªâ', 'Email', 'Li√™n h·ªá'
                        ])
                        df_veterans.to_excel(writer, sheet_name='C·ª±u chi·∫øn binh', index=False)

                # Save the file
                writer.close()

                # Create download button
                filename = f"du_lieu_lang_huu_nghi_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                st.download_button(
                    label="‚¨áÔ∏è T·∫£i xu·ªëng file Excel",
                    data=output.getvalue(),
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                st.success("‚úÖ File Excel ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")

            except Exception as e:
                st.error(f"‚ùå L·ªói khi t·∫°o file Excel: {str(e)}")
                print(f"Export error: {str(e)}")

if __name__ == "__main__":
    render()